module SqlHydra.SchemaGeneratorFab

open Domain
open Fabulous.AST
open type Ast

open FSharp.Compiler.SyntaxTree
open FSharp.Compiler.XmlDoc
open FsAst
open Fantomas
open Domain
open System.Data
open SqlHydra.SchemaFilters



/// Generates the outer module and table records.
let generateModule (cfg: Config) (app: AppInfo) (db: Schema) = 
    let filteredTables = 
        db.Tables 
        |> List.sortBy (fun tbl -> tbl.Schema, tbl.Name)

    let schemas = 
        let enumSchemas = db.Enums |> List.map (fun e -> e.Schema)
        let tableSchemas = filteredTables |> List.map (fun t -> t.Schema) 
        enumSchemas @ tableSchemas |> List.distinct
    
    Namespace(app.Name) {
        for schema in schemas do
            let tables = 
                filteredTables 
                |> List.filter (fun t -> t.Schema = schema)
                |> List.map (fun t -> t.Name)

            let enums = 
                db.Enums 
                |> List.filter (fun e -> e.Schema = schema)
                |> List.map (fun e -> e.Name)

            NestedModule(schema) {
                //for enum in enums do
                //    let enumType = 
                //        db.Enums 
                //        |> List.find (fun e -> e.Schema = schema && e.Name = enum)

                //    let enumValues = 
                //        enumType.Values 
                //        |> List.map (fun v -> v.Name)

                //    Type(enum) {
                //        Enum(enumValues)
                //    }

                for table in tables do
                    let tableType = 
                        db.Tables 
                        |> List.find (fun t -> t.Schema = schema && t.Name = table)

                    Record(table) {
                        for column in tableType.Columns do 
                            Ast.Field(column.Name, LongIdent("int"))
                    }
            }
    }

open Fantomas
open Fantomas.Core

/// Formats the generated code using Fantomas.
let toFormattedCode (cfg: Config) (app: AppInfo) (version: string) (source: WidgetBuilder<SyntaxOak.Oak>) = 
    //let comment = $"// This code was generated by `{app.Name}` -- v{version}."

    //let cfg = 
    //    { FormatConfig.FormatConfig.Default with 
    //        StrictMode = true
    //        MaxIfThenElseShortWidth = 400   // Forces ReadIfNotNull if/then to be on a single line
    //        MaxValueBindingWidth = 400      // Ensure reader property/column bindings stay on one line
    //        MaxLineLength = 400             // Ensure reader property/column bindings stay on one line
    //    }

    let output = 
        source
        |> Gen.mkOak
        |> CodeFormatter.FormatOakAsync
        |> Async.RunSynchronously

    let formattedCodeWithComment =
        [   
            output
        ]
        |> String.concat System.Environment.NewLine

    formattedCodeWithComment
