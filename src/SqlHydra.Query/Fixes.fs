/// Contains query fixes for bugs in SqlKata generated queries.
module SqlHydra.Query.Fixes

open System
open System.Data.Common
open System.Threading
open SqlKata

module Oracle = 

    /// Fixes broken SqlKata query for Oracle multiple inserts.
    let fixMultiInsertQuery (cmdText: string) = 
        let columnsStr, parameterStr = 
            match cmdText.Replace("INSERT INTO ", "").Split([| " VALUES " |], StringSplitOptions.RemoveEmptyEntries) with
            | [| columns; values |] -> columns, values
            | _ -> failwith "Invalid query"

        let entityLines = 
            parameterStr.Split([| "), (" |], StringSplitOptions.RemoveEmptyEntries)
            |> Array.map (fun p -> p.Replace("(", "").Replace(")", ""))
            |> Array.map (fun p -> $"INTO {columnsStr} VALUES ({p})")

        let sb = Text.StringBuilder()
        sb.AppendLine("INSERT ALL") |> ignore
        
        for line in entityLines do
            sb.AppendLine(line) |> ignore

        sb.AppendLine("SELECT * FROM DUAL") |> ignore

        sb.ToString()

    /// Adds an identity query to an Oracle insert query.
    let fixIdentityQuery (identityColumnName: string) (cmdText: string) = 
        $"{cmdText} returning \"{identityColumnName}\" into :outputParam"

module Postgres = 
    
    /// Fixes the Postgres identity query generated by SqlKata.
    let fixIdentityQuery (identityColumnName: string) (cmdText: string) = 
        cmdText.Replace(";SELECT lastval() AS id", $";RETURNING {identityColumnName};")