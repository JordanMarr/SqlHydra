module SqlServer.Generation

open Swensen.Unquote
open NUnit.Framework
open VerifyTests
open VerifyNUnit
open SqlHydra
open SqlHydra.SqlServer
open SqlHydra.Domain

let cfg = 
    {
        ConnectionString = DB.connectionString
        OutputFile = ""
        Namespace = "TestNS"
        IsCLIMutable = true
        IsMutableProperties = false
        NullablePropertyType = NullablePropertyType.Option
        ProviderDbTypeAttributes = true
        TableDeclarations = false
        Readers = Some { ReadersConfig.ReaderType = "Microsoft.Data.SqlClient.SqlDataReader" } 
        Filters = Filters.Empty
    }

let lazySchema = lazy SqlServerSchemaProvider.getSchema cfg

let getCode cfg = 
    lazySchema.Value
    |> SchemaGenerator.generate cfg AppInfo.info
    |> SchemaGenerator.toFormattedCode cfg AppInfo.info "---"

let inCode (str: string) cfg = 
    let code = getCode cfg
    code.Contains(str) =! true

let notInCode (str: string) cfg = 
    let code = getCode cfg
    code.Contains str =! false

[<Test; Ignore "Ignore">]
let ``Print Schema``() = 
    let schema = SqlServerSchemaProvider.getSchema cfg
    printfn "Schema: %A" schema

[<Test>]
let ``Verify Generated Code``() = task {
    let code = getCode cfg
            
    let settings = VerifySettings()
#if NET6_0
    settings.UseFileName("Generation.Verify Generated Code NET6")
#endif
#if NET8_0
    settings.UseFileName("Generation.Verify Generated Code NET8")
#endif
    settings.UseDirectory("./Verify")
    settings.ScrubLines(fun line -> line.StartsWith("// This code was generated by"))
    VerifierSettings.OmitContentFromException() // Cleans up FAKE build output
    let! _ = Verifier.Verify(code, settings)
    ()
}

[<Test>]
let ``Code Should Have Reader``() = 
    cfg |> inCode "type HydraReader"

[<Test>]
let ``Code Should Not Have Reader``() = 
    { cfg with Readers = None } |> notInCode "type HydraReader"

[<Test>]
let ``Code Should Have CLIMutable``() = 
    { cfg with IsCLIMutable = true } |> inCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Not Have CLIMutable``() = 
    { cfg with IsCLIMutable = false } |> notInCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Have Namespace``() = 
    cfg |> inCode "namespace TestNS"
