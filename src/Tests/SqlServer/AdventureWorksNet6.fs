// This code was generated by `SqlHydra.SqlServer` -- v2.4.0.0.
namespace SqlServer.AdventureWorksNet6


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

    type NullableObjectColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> null
                | o -> (getter o) |> unbox

    type NullableValueColumn<'T, 'Reader when 'T : struct and 'T : (new : unit -> 'T) and 'T :> System.ValueType and 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> System.Nullable<'T>()
                | o -> System.Nullable<'T> (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module HumanResources =
    [<CLIMutable>]
    type Department =
        { [<SqlHydra.ProviderDbType("SmallInt")>]
          DepartmentID: int16
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          GroupName: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Department = SqlHydra.Query.Table.table<Department>

    [<CLIMutable>]
    type Employee =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          NationalIDNumber: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          LoginID: string
          [<SqlHydra.ProviderDbType("SmallInt")>]
          OrganizationLevel: System.Nullable<int16>
          [<SqlHydra.ProviderDbType("NVarChar")>]
          JobTitle: string
          [<SqlHydra.ProviderDbType("Date")>]
          BirthDate: System.DateOnly
          [<SqlHydra.ProviderDbType("NChar")>]
          MaritalStatus: string
          [<SqlHydra.ProviderDbType("NChar")>]
          Gender: string
          [<SqlHydra.ProviderDbType("Date")>]
          HireDate: System.DateOnly
          [<SqlHydra.ProviderDbType("Bit")>]
          SalariedFlag: bool
          [<SqlHydra.ProviderDbType("SmallInt")>]
          VacationHours: int16
          [<SqlHydra.ProviderDbType("SmallInt")>]
          SickLeaveHours: int16
          [<SqlHydra.ProviderDbType("Bit")>]
          CurrentFlag: bool
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Employee = SqlHydra.Query.Table.table<Employee>

    [<CLIMutable>]
    type EmployeeDepartmentHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("SmallInt")>]
          DepartmentID: int16
          [<SqlHydra.ProviderDbType("TinyInt")>]
          ShiftID: byte
          [<SqlHydra.ProviderDbType("Date")>]
          StartDate: System.DateOnly
          [<SqlHydra.ProviderDbType("Date")>]
          EndDate: System.Nullable<System.DateOnly>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let EmployeeDepartmentHistory = SqlHydra.Query.Table.table<EmployeeDepartmentHistory>

    [<CLIMutable>]
    type EmployeePayHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          RateChangeDate: System.DateTime
          [<SqlHydra.ProviderDbType("Money")>]
          Rate: decimal
          [<SqlHydra.ProviderDbType("TinyInt")>]
          PayFrequency: byte
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let EmployeePayHistory = SqlHydra.Query.Table.table<EmployeePayHistory>

    [<CLIMutable>]
    type JobCandidate =
        { [<SqlHydra.ProviderDbType("Int")>]
          JobCandidateID: int
          [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let JobCandidate = SqlHydra.Query.Table.table<JobCandidate>

    [<CLIMutable>]
    type Shift =
        { [<SqlHydra.ProviderDbType("TinyInt")>]
          ShiftID: byte
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("Time")>]
          StartTime: System.TimeOnly
          [<SqlHydra.ProviderDbType("Time")>]
          EndTime: System.TimeOnly
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Shift = SqlHydra.Query.Table.table<Shift>

    module Readers =
        type DepartmentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.GroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "GroupName")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Department.DepartmentID = __.DepartmentID.Read()
                  Name = __.Name.Read()
                  GroupName = __.GroupName.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.DepartmentID.IsNull() then None else Some(__.Read())

        type EmployeeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.NationalIDNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "NationalIDNumber")
            member __.LoginID = RequiredColumn(reader, getOrdinal, reader.GetString, "LoginID")
            member __.OrganizationLevel = NullableValueColumn(reader, getOrdinal, reader.GetInt16, "OrganizationLevel")
            member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
            member __.BirthDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "BirthDate")
            member __.MaritalStatus = RequiredColumn(reader, getOrdinal, reader.GetString, "MaritalStatus")
            member __.Gender = RequiredColumn(reader, getOrdinal, reader.GetString, "Gender")
            member __.HireDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "HireDate")
            member __.SalariedFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "SalariedFlag")
            member __.VacationHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "VacationHours")
            member __.SickLeaveHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SickLeaveHours")
            member __.CurrentFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "CurrentFlag")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Employee.BusinessEntityID = __.BusinessEntityID.Read()
                  NationalIDNumber = __.NationalIDNumber.Read()
                  LoginID = __.LoginID.Read()
                  OrganizationLevel = __.OrganizationLevel.Read()
                  JobTitle = __.JobTitle.Read()
                  BirthDate = __.BirthDate.Read()
                  MaritalStatus = __.MaritalStatus.Read()
                  Gender = __.Gender.Read()
                  HireDate = __.HireDate.Read()
                  SalariedFlag = __.SalariedFlag.Read()
                  VacationHours = __.VacationHours.Read()
                  SickLeaveHours = __.SickLeaveHours.Read()
                  CurrentFlag = __.CurrentFlag.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type EmployeeDepartmentHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
            member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateOnly, "EndDate")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { EmployeeDepartmentHistory.BusinessEntityID = __.BusinessEntityID.Read()
                  DepartmentID = __.DepartmentID.Read()
                  ShiftID = __.ShiftID.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type EmployeePayHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.RateChangeDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "RateChangeDate")
            member __.Rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Rate")
            member __.PayFrequency = RequiredColumn(reader, getOrdinal, reader.GetByte, "PayFrequency")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { EmployeePayHistory.BusinessEntityID = __.BusinessEntityID.Read()
                  RateChangeDate = __.RateChangeDate.Read()
                  Rate = __.Rate.Read()
                  PayFrequency = __.PayFrequency.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type JobCandidateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
            member __.BusinessEntityID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { JobCandidate.JobCandidateID = __.JobCandidateID.Read()
                  BusinessEntityID = __.BusinessEntityID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.JobCandidateID.IsNull() then None else Some(__.Read())

        type ShiftReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.StartTime = RequiredColumn(reader, getOrdinal, reader.GetTimeOnly, "StartTime")
            member __.EndTime = RequiredColumn(reader, getOrdinal, reader.GetTimeOnly, "EndTime")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Shift.ShiftID = __.ShiftID.Read()
                  Name = __.Name.Read()
                  StartTime = __.StartTime.Read()
                  EndTime = __.EndTime.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ShiftID.IsNull() then None else Some(__.Read())

module Person =
    [<CLIMutable>]
    type Address =
        { [<SqlHydra.ProviderDbType("Int")>]
          AddressID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          AddressLine1: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          AddressLine2: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          City: string
          [<SqlHydra.ProviderDbType("Int")>]
          StateProvinceID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          PostalCode: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Address = SqlHydra.Query.Table.table<Address>

    [<CLIMutable>]
    type AddressType =
        { [<SqlHydra.ProviderDbType("Int")>]
          AddressTypeID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let AddressType = SqlHydra.Query.Table.table<AddressType>

    [<CLIMutable>]
    type BusinessEntity =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let BusinessEntity = SqlHydra.Query.Table.table<BusinessEntity>

    [<CLIMutable>]
    type BusinessEntityAddress =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          AddressID: int
          [<SqlHydra.ProviderDbType("Int")>]
          AddressTypeID: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let BusinessEntityAddress = SqlHydra.Query.Table.table<BusinessEntityAddress>

    [<CLIMutable>]
    type BusinessEntityContact =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          PersonID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ContactTypeID: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let BusinessEntityContact = SqlHydra.Query.Table.table<BusinessEntityContact>

    [<CLIMutable>]
    type ContactType =
        { [<SqlHydra.ProviderDbType("Int")>]
          ContactTypeID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ContactType = SqlHydra.Query.Table.table<ContactType>

    [<CLIMutable>]
    type CountryRegion =
        { [<SqlHydra.ProviderDbType("NVarChar")>]
          CountryRegionCode: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let CountryRegion = SqlHydra.Query.Table.table<CountryRegion>

    [<CLIMutable>]
    type EmailAddress =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          EmailAddressID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          EmailAddress: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let EmailAddress = SqlHydra.Query.Table.table<EmailAddress>

    [<CLIMutable>]
    type Password =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("VarChar")>]
          PasswordHash: string
          [<SqlHydra.ProviderDbType("VarChar")>]
          PasswordSalt: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Password = SqlHydra.Query.Table.table<Password>

    [<CLIMutable>]
    type Person =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("NChar")>]
          PersonType: string
          [<SqlHydra.ProviderDbType("Bit")>]
          NameStyle: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Title: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          FirstName: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          MiddleName: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          LastName: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Suffix: string
          [<SqlHydra.ProviderDbType("Int")>]
          EmailPromotion: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Person = SqlHydra.Query.Table.table<Person>

    [<CLIMutable>]
    type PersonPhone =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          PhoneNumber: string
          [<SqlHydra.ProviderDbType("Int")>]
          PhoneNumberTypeID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let PersonPhone = SqlHydra.Query.Table.table<PersonPhone>

    [<CLIMutable>]
    type PhoneNumberType =
        { [<SqlHydra.ProviderDbType("Int")>]
          PhoneNumberTypeID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let PhoneNumberType = SqlHydra.Query.Table.table<PhoneNumberType>

    [<CLIMutable>]
    type StateProvince =
        { [<SqlHydra.ProviderDbType("Int")>]
          StateProvinceID: int
          [<SqlHydra.ProviderDbType("NChar")>]
          StateProvinceCode: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          CountryRegionCode: string
          [<SqlHydra.ProviderDbType("Bit")>]
          IsOnlyStateProvinceFlag: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let StateProvince = SqlHydra.Query.Table.table<StateProvince>

    module Readers =
        type AddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
            member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
            member __.AddressLine2 = NullableObjectColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
            member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
            member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
            member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Address.AddressID = __.AddressID.Read()
                  AddressLine1 = __.AddressLine1.Read()
                  AddressLine2 = __.AddressLine2.Read()
                  City = __.City.Read()
                  StateProvinceID = __.StateProvinceID.Read()
                  PostalCode = __.PostalCode.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.AddressID.IsNull() then None else Some(__.Read())

        type AddressTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { AddressType.AddressTypeID = __.AddressTypeID.Read()
                  Name = __.Name.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.AddressTypeID.IsNull() then None else Some(__.Read())

        type BusinessEntityReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { BusinessEntity.BusinessEntityID = __.BusinessEntityID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type BusinessEntityAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
            member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { BusinessEntityAddress.BusinessEntityID = __.BusinessEntityID.Read()
                  AddressID = __.AddressID.Read()
                  AddressTypeID = __.AddressTypeID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type BusinessEntityContactReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.PersonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
            member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { BusinessEntityContact.BusinessEntityID = __.BusinessEntityID.Read()
                  PersonID = __.PersonID.Read()
                  ContactTypeID = __.ContactTypeID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type ContactTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ContactType.ContactTypeID = __.ContactTypeID.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ContactTypeID.IsNull() then None else Some(__.Read())

        type CountryRegionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { CountryRegion.CountryRegionCode = __.CountryRegionCode.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CountryRegionCode.IsNull() then None else Some(__.Read())

        type EmailAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.EmailAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailAddressID")
            member __.EmailAddress = NullableObjectColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { EmailAddress.BusinessEntityID = __.BusinessEntityID.Read()
                  EmailAddressID = __.EmailAddressID.Read()
                  EmailAddress = __.EmailAddress.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type PasswordReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
            member __.PasswordSalt = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordSalt")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Password.BusinessEntityID = __.BusinessEntityID.Read()
                  PasswordHash = __.PasswordHash.Read()
                  PasswordSalt = __.PasswordSalt.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type PersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.PersonType = RequiredColumn(reader, getOrdinal, reader.GetString, "PersonType")
            member __.NameStyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "NameStyle")
            member __.Title = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Title")
            member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
            member __.MiddleName = NullableObjectColumn(reader, getOrdinal, reader.GetString, "MiddleName")
            member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
            member __.Suffix = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Suffix")
            member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Person.BusinessEntityID = __.BusinessEntityID.Read()
                  PersonType = __.PersonType.Read()
                  NameStyle = __.NameStyle.Read()
                  Title = __.Title.Read()
                  FirstName = __.FirstName.Read()
                  MiddleName = __.MiddleName.Read()
                  LastName = __.LastName.Read()
                  Suffix = __.Suffix.Read()
                  EmailPromotion = __.EmailPromotion.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type PersonPhoneReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.PhoneNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
            member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { PersonPhone.BusinessEntityID = __.BusinessEntityID.Read()
                  PhoneNumber = __.PhoneNumber.Read()
                  PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type PhoneNumberTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { PhoneNumberType.PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.PhoneNumberTypeID.IsNull() then None else Some(__.Read())

        type StateProvinceReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
            member __.StateProvinceCode = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceCode")
            member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
            member __.IsOnlyStateProvinceFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsOnlyStateProvinceFlag")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { StateProvince.StateProvinceID = __.StateProvinceID.Read()
                  StateProvinceCode = __.StateProvinceCode.Read()
                  CountryRegionCode = __.CountryRegionCode.Read()
                  IsOnlyStateProvinceFlag = __.IsOnlyStateProvinceFlag.Read()
                  Name = __.Name.Read()
                  TerritoryID = __.TerritoryID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.StateProvinceID.IsNull() then None else Some(__.Read())

module Production =
    [<CLIMutable>]
    type BillOfMaterials =
        { [<SqlHydra.ProviderDbType("Int")>]
          BillOfMaterialsID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductAssemblyID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          ComponentID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("NChar")>]
          UnitMeasureCode: string
          [<SqlHydra.ProviderDbType("SmallInt")>]
          BOMLevel: int16
          [<SqlHydra.ProviderDbType("Decimal")>]
          PerAssemblyQty: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let BillOfMaterials = SqlHydra.Query.Table.table<BillOfMaterials>

    [<CLIMutable>]
    type Culture =
        { [<SqlHydra.ProviderDbType("NChar")>]
          CultureID: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Culture = SqlHydra.Query.Table.table<Culture>

    [<CLIMutable>]
    type Document =
        { [<SqlHydra.ProviderDbType("SmallInt")>]
          DocumentLevel: System.Nullable<int16>
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Title: string
          [<SqlHydra.ProviderDbType("Int")>]
          Owner: int
          [<SqlHydra.ProviderDbType("Bit")>]
          FolderFlag: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          FileName: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          FileExtension: string
          [<SqlHydra.ProviderDbType("NChar")>]
          Revision: string
          [<SqlHydra.ProviderDbType("Int")>]
          ChangeNumber: int
          [<SqlHydra.ProviderDbType("TinyInt")>]
          Status: byte
          [<SqlHydra.ProviderDbType("NVarChar")>]
          DocumentSummary: string
          [<SqlHydra.ProviderDbType("VarBinary")>]
          Document: byte []
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Document = SqlHydra.Query.Table.table<Document>

    [<CLIMutable>]
    type Illustration =
        { [<SqlHydra.ProviderDbType("Int")>]
          IllustrationID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Illustration = SqlHydra.Query.Table.table<Illustration>

    [<CLIMutable>]
    type Location =
        { [<SqlHydra.ProviderDbType("SmallInt")>]
          LocationID: int16
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("SmallMoney")>]
          CostRate: decimal
          [<SqlHydra.ProviderDbType("Decimal")>]
          Availability: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Location = SqlHydra.Query.Table.table<Location>

    [<CLIMutable>]
    type Product =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ProductNumber: string
          [<SqlHydra.ProviderDbType("Bit")>]
          MakeFlag: bool
          [<SqlHydra.ProviderDbType("Bit")>]
          FinishedGoodsFlag: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Color: string
          [<SqlHydra.ProviderDbType("SmallInt")>]
          SafetyStockLevel: int16
          [<SqlHydra.ProviderDbType("SmallInt")>]
          ReorderPoint: int16
          [<SqlHydra.ProviderDbType("Money")>]
          StandardCost: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          ListPrice: decimal
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Size: string
          [<SqlHydra.ProviderDbType("NChar")>]
          SizeUnitMeasureCode: string
          [<SqlHydra.ProviderDbType("NChar")>]
          WeightUnitMeasureCode: string
          [<SqlHydra.ProviderDbType("Decimal")>]
          Weight: System.Nullable<decimal>
          [<SqlHydra.ProviderDbType("Int")>]
          DaysToManufacture: int
          [<SqlHydra.ProviderDbType("NChar")>]
          ProductLine: string
          [<SqlHydra.ProviderDbType("NChar")>]
          Class: string
          [<SqlHydra.ProviderDbType("NChar")>]
          Style: string
          [<SqlHydra.ProviderDbType("Int")>]
          ProductSubcategoryID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          ProductModelID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SellStartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          SellEndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DiscontinuedDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Product = SqlHydra.Query.Table.table<Product>

    [<CLIMutable>]
    type ProductCategory =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductCategoryID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductCategory = SqlHydra.Query.Table.table<ProductCategory>

    [<CLIMutable>]
    type ProductCostHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("Money")>]
          StandardCost: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductCostHistory = SqlHydra.Query.Table.table<ProductCostHistory>

    [<CLIMutable>]
    type ProductDescription =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductDescriptionID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Description: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductDescription = SqlHydra.Query.Table.table<ProductDescription>

    [<CLIMutable>]
    type ProductDocument =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductDocument = SqlHydra.Query.Table.table<ProductDocument>

    [<CLIMutable>]
    type ProductInventory =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("SmallInt")>]
          LocationID: int16
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Shelf: string
          [<SqlHydra.ProviderDbType("TinyInt")>]
          Bin: byte
          [<SqlHydra.ProviderDbType("SmallInt")>]
          Quantity: int16
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductInventory = SqlHydra.Query.Table.table<ProductInventory>

    [<CLIMutable>]
    type ProductListPriceHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("Money")>]
          ListPrice: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductListPriceHistory = SqlHydra.Query.Table.table<ProductListPriceHistory>

    [<CLIMutable>]
    type ProductModel =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductModelID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductModel = SqlHydra.Query.Table.table<ProductModel>

    [<CLIMutable>]
    type ProductModelIllustration =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductModelID: int
          [<SqlHydra.ProviderDbType("Int")>]
          IllustrationID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductModelIllustration = SqlHydra.Query.Table.table<ProductModelIllustration>

    [<CLIMutable>]
    type ProductModelProductDescriptionCulture =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductModelID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductDescriptionID: int
          [<SqlHydra.ProviderDbType("NChar")>]
          CultureID: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductModelProductDescriptionCulture = SqlHydra.Query.Table.table<ProductModelProductDescriptionCulture>

    [<CLIMutable>]
    type ProductPhoto =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductPhotoID: int
          [<SqlHydra.ProviderDbType("VarBinary")>]
          ThumbNailPhoto: byte []
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ThumbnailPhotoFileName: string
          [<SqlHydra.ProviderDbType("VarBinary")>]
          LargePhoto: byte []
          [<SqlHydra.ProviderDbType("NVarChar")>]
          LargePhotoFileName: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductPhoto = SqlHydra.Query.Table.table<ProductPhoto>

    [<CLIMutable>]
    type ProductProductPhoto =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductPhotoID: int
          [<SqlHydra.ProviderDbType("Bit")>]
          Primary: bool
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductProductPhoto = SqlHydra.Query.Table.table<ProductProductPhoto>

    [<CLIMutable>]
    type ProductReview =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductReviewID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ReviewerName: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ReviewDate: System.DateTime
          [<SqlHydra.ProviderDbType("NVarChar")>]
          EmailAddress: string
          [<SqlHydra.ProviderDbType("Int")>]
          Rating: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Comments: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductReview = SqlHydra.Query.Table.table<ProductReview>

    [<CLIMutable>]
    type ProductSubcategory =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductSubcategoryID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductCategoryID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductSubcategory = SqlHydra.Query.Table.table<ProductSubcategory>

    [<CLIMutable>]
    type ScrapReason =
        { [<SqlHydra.ProviderDbType("SmallInt")>]
          ScrapReasonID: int16
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ScrapReason = SqlHydra.Query.Table.table<ScrapReason>

    [<CLIMutable>]
    type TransactionHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          TransactionID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ReferenceOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ReferenceOrderLineID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          TransactionDate: System.DateTime
          [<SqlHydra.ProviderDbType("NChar")>]
          TransactionType: string
          [<SqlHydra.ProviderDbType("Int")>]
          Quantity: int
          [<SqlHydra.ProviderDbType("Money")>]
          ActualCost: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let TransactionHistory = SqlHydra.Query.Table.table<TransactionHistory>

    [<CLIMutable>]
    type TransactionHistoryArchive =
        { [<SqlHydra.ProviderDbType("Int")>]
          TransactionID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ReferenceOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ReferenceOrderLineID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          TransactionDate: System.DateTime
          [<SqlHydra.ProviderDbType("NChar")>]
          TransactionType: string
          [<SqlHydra.ProviderDbType("Int")>]
          Quantity: int
          [<SqlHydra.ProviderDbType("Money")>]
          ActualCost: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let TransactionHistoryArchive = SqlHydra.Query.Table.table<TransactionHistoryArchive>

    [<CLIMutable>]
    type UnitMeasure =
        { [<SqlHydra.ProviderDbType("NChar")>]
          UnitMeasureCode: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let UnitMeasure = SqlHydra.Query.Table.table<UnitMeasure>

    [<CLIMutable>]
    type WorkOrder =
        { [<SqlHydra.ProviderDbType("Int")>]
          WorkOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          OrderQty: int
          [<SqlHydra.ProviderDbType("Int")>]
          StockedQty: int
          [<SqlHydra.ProviderDbType("SmallInt")>]
          ScrappedQty: int16
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DueDate: System.DateTime
          [<SqlHydra.ProviderDbType("SmallInt")>]
          ScrapReasonID: System.Nullable<int16>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let WorkOrder = SqlHydra.Query.Table.table<WorkOrder>

    [<CLIMutable>]
    type WorkOrderRouting =
        { [<SqlHydra.ProviderDbType("Int")>]
          WorkOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("SmallInt")>]
          OperationSequence: int16
          [<SqlHydra.ProviderDbType("SmallInt")>]
          LocationID: int16
          [<SqlHydra.ProviderDbType("DateTime")>]
          ScheduledStartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ScheduledEndDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ActualStartDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ActualEndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("Decimal")>]
          ActualResourceHrs: System.Nullable<decimal>
          [<SqlHydra.ProviderDbType("Money")>]
          PlannedCost: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          ActualCost: System.Nullable<decimal>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let WorkOrderRouting = SqlHydra.Query.Table.table<WorkOrderRouting>

    module Readers =
        type BillOfMaterialsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BillOfMaterialsID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillOfMaterialsID")
            member __.ProductAssemblyID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ProductAssemblyID")
            member __.ComponentID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ComponentID")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
            member __.BOMLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "BOMLevel")
            member __.PerAssemblyQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PerAssemblyQty")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { BillOfMaterials.BillOfMaterialsID = __.BillOfMaterialsID.Read()
                  ProductAssemblyID = __.ProductAssemblyID.Read()
                  ComponentID = __.ComponentID.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  UnitMeasureCode = __.UnitMeasureCode.Read()
                  BOMLevel = __.BOMLevel.Read()
                  PerAssemblyQty = __.PerAssemblyQty.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BillOfMaterialsID.IsNull() then None else Some(__.Read())

        type CultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Culture.CultureID = __.CultureID.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CultureID.IsNull() then None else Some(__.Read())

        type DocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.DocumentLevel = NullableValueColumn(reader, getOrdinal, reader.GetInt16, "DocumentLevel")
            member __.Title = RequiredColumn(reader, getOrdinal, reader.GetString, "Title")
            member __.Owner = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Owner")
            member __.FolderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FolderFlag")
            member __.FileName = RequiredColumn(reader, getOrdinal, reader.GetString, "FileName")
            member __.FileExtension = RequiredColumn(reader, getOrdinal, reader.GetString, "FileExtension")
            member __.Revision = RequiredColumn(reader, getOrdinal, reader.GetString, "Revision")
            member __.ChangeNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ChangeNumber")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
            member __.DocumentSummary = NullableObjectColumn(reader, getOrdinal, reader.GetString, "DocumentSummary")
            member __.Document = NullableObjectColumn(reader, getOrdinal, reader.GetFieldValue, "Document")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Document.DocumentLevel = __.DocumentLevel.Read()
                  Title = __.Title.Read()
                  Owner = __.Owner.Read()
                  FolderFlag = __.FolderFlag.Read()
                  FileName = __.FileName.Read()
                  FileExtension = __.FileExtension.Read()
                  Revision = __.Revision.Read()
                  ChangeNumber = __.ChangeNumber.Read()
                  Status = __.Status.Read()
                  DocumentSummary = __.DocumentSummary.Read()
                  Document = __.Document.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.Title.IsNull() then None else Some(__.Read())

        type IllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Illustration.IllustrationID = __.IllustrationID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.IllustrationID.IsNull() then None else Some(__.Read())

        type LocationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.CostRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostRate")
            member __.Availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Availability")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Location.LocationID = __.LocationID.Read()
                  Name = __.Name.Read()
                  CostRate = __.CostRate.Read()
                  Availability = __.Availability.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.LocationID.IsNull() then None else Some(__.Read())

        type ProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ProductNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductNumber")
            member __.MakeFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "MakeFlag")
            member __.FinishedGoodsFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FinishedGoodsFlag")
            member __.Color = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Color")
            member __.SafetyStockLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SafetyStockLevel")
            member __.ReorderPoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ReorderPoint")
            member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
            member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
            member __.Size = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Size")
            member __.SizeUnitMeasureCode = NullableObjectColumn(reader, getOrdinal, reader.GetString, "SizeUnitMeasureCode")
            member __.WeightUnitMeasureCode = NullableObjectColumn(reader, getOrdinal, reader.GetString, "WeightUnitMeasureCode")
            member __.Weight = NullableValueColumn(reader, getOrdinal, reader.GetDecimal, "Weight")
            member __.DaysToManufacture = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DaysToManufacture")
            member __.ProductLine = NullableObjectColumn(reader, getOrdinal, reader.GetString, "ProductLine")
            member __.Class = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Class")
            member __.Style = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Style")
            member __.ProductSubcategoryID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
            member __.ProductModelID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
            member __.SellStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "SellStartDate")
            member __.SellEndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "SellEndDate")
            member __.DiscontinuedDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "DiscontinuedDate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Product.ProductID = __.ProductID.Read()
                  Name = __.Name.Read()
                  ProductNumber = __.ProductNumber.Read()
                  MakeFlag = __.MakeFlag.Read()
                  FinishedGoodsFlag = __.FinishedGoodsFlag.Read()
                  Color = __.Color.Read()
                  SafetyStockLevel = __.SafetyStockLevel.Read()
                  ReorderPoint = __.ReorderPoint.Read()
                  StandardCost = __.StandardCost.Read()
                  ListPrice = __.ListPrice.Read()
                  Size = __.Size.Read()
                  SizeUnitMeasureCode = __.SizeUnitMeasureCode.Read()
                  WeightUnitMeasureCode = __.WeightUnitMeasureCode.Read()
                  Weight = __.Weight.Read()
                  DaysToManufacture = __.DaysToManufacture.Read()
                  ProductLine = __.ProductLine.Read()
                  Class = __.Class.Read()
                  Style = __.Style.Read()
                  ProductSubcategoryID = __.ProductSubcategoryID.Read()
                  ProductModelID = __.ProductModelID.Read()
                  SellStartDate = __.SellStartDate.Read()
                  SellEndDate = __.SellEndDate.Read()
                  DiscontinuedDate = __.DiscontinuedDate.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductCategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductCategory.ProductCategoryID = __.ProductCategoryID.Read()
                  Name = __.Name.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductCategoryID.IsNull() then None else Some(__.Read())

        type ProductCostHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductCostHistory.ProductID = __.ProductID.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  StandardCost = __.StandardCost.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
            member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductDescription.ProductDescriptionID = __.ProductDescriptionID.Read()
                  Description = __.Description.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductDescriptionID.IsNull() then None else Some(__.Read())

        type ProductDocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductDocument.ProductID = __.ProductID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductInventoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
            member __.Shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "Shelf")
            member __.Bin = RequiredColumn(reader, getOrdinal, reader.GetByte, "Bin")
            member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "Quantity")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductInventory.ProductID = __.ProductID.Read()
                  LocationID = __.LocationID.Read()
                  Shelf = __.Shelf.Read()
                  Bin = __.Bin.Read()
                  Quantity = __.Quantity.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductListPriceHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductListPriceHistory.ProductID = __.ProductID.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  ListPrice = __.ListPrice.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductModelReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductModel.ProductModelID = __.ProductModelID.Read()
                  Name = __.Name.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductModelID.IsNull() then None else Some(__.Read())

        type ProductModelIllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
            member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductModelIllustration.ProductModelID = __.ProductModelID.Read()
                  IllustrationID = __.IllustrationID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductModelID.IsNull() then None else Some(__.Read())

        type ProductModelProductDescriptionCultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
            member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
            member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductModelProductDescriptionCulture.ProductModelID = __.ProductModelID.Read()
                  ProductDescriptionID = __.ProductDescriptionID.Read()
                  CultureID = __.CultureID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductModelID.IsNull() then None else Some(__.Read())

        type ProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
            member __.ThumbNailPhoto = NullableObjectColumn(reader, getOrdinal, reader.GetFieldValue, "ThumbNailPhoto")
            member __.ThumbnailPhotoFileName = NullableObjectColumn(reader, getOrdinal, reader.GetString, "ThumbnailPhotoFileName")
            member __.LargePhoto = NullableObjectColumn(reader, getOrdinal, reader.GetFieldValue, "LargePhoto")
            member __.LargePhotoFileName = NullableObjectColumn(reader, getOrdinal, reader.GetString, "LargePhotoFileName")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductPhoto.ProductPhotoID = __.ProductPhotoID.Read()
                  ThumbNailPhoto = __.ThumbNailPhoto.Read()
                  ThumbnailPhotoFileName = __.ThumbnailPhotoFileName.Read()
                  LargePhoto = __.LargePhoto.Read()
                  LargePhotoFileName = __.LargePhotoFileName.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductPhotoID.IsNull() then None else Some(__.Read())

        type ProductProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
            member __.Primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Primary")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductProductPhoto.ProductID = __.ProductID.Read()
                  ProductPhotoID = __.ProductPhotoID.Read()
                  Primary = __.Primary.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type ProductReviewReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductReviewID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductReviewID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.ReviewerName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReviewerName")
            member __.ReviewDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ReviewDate")
            member __.EmailAddress = RequiredColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
            member __.Rating = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Rating")
            member __.Comments = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Comments")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductReview.ProductReviewID = __.ProductReviewID.Read()
                  ProductID = __.ProductID.Read()
                  ReviewerName = __.ReviewerName.Read()
                  ReviewDate = __.ReviewDate.Read()
                  EmailAddress = __.EmailAddress.Read()
                  Rating = __.Rating.Read()
                  Comments = __.Comments.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductReviewID.IsNull() then None else Some(__.Read())

        type ProductSubcategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductSubcategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
            member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductSubcategory.ProductSubcategoryID = __.ProductSubcategoryID.Read()
                  ProductCategoryID = __.ProductCategoryID.Read()
                  Name = __.Name.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductSubcategoryID.IsNull() then None else Some(__.Read())

        type ScrapReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ScrapReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ScrapReason.ScrapReasonID = __.ScrapReasonID.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ScrapReasonID.IsNull() then None else Some(__.Read())

        type TransactionHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
            member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
            member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
            member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
            member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
            member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { TransactionHistory.TransactionID = __.TransactionID.Read()
                  ProductID = __.ProductID.Read()
                  ReferenceOrderID = __.ReferenceOrderID.Read()
                  ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
                  TransactionDate = __.TransactionDate.Read()
                  TransactionType = __.TransactionType.Read()
                  Quantity = __.Quantity.Read()
                  ActualCost = __.ActualCost.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.TransactionID.IsNull() then None else Some(__.Read())

        type TransactionHistoryArchiveReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
            member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
            member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
            member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
            member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
            member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { TransactionHistoryArchive.TransactionID = __.TransactionID.Read()
                  ProductID = __.ProductID.Read()
                  ReferenceOrderID = __.ReferenceOrderID.Read()
                  ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
                  TransactionDate = __.TransactionDate.Read()
                  TransactionType = __.TransactionType.Read()
                  Quantity = __.Quantity.Read()
                  ActualCost = __.ActualCost.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.TransactionID.IsNull() then None else Some(__.Read())

        type UnitMeasureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { UnitMeasure.UnitMeasureCode = __.UnitMeasureCode.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.UnitMeasureCode.IsNull() then None else Some(__.Read())

        type WorkOrderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "OrderQty")
            member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StockedQty")
            member __.ScrappedQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrappedQty")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
            member __.ScrapReasonID = NullableValueColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { WorkOrder.WorkOrderID = __.WorkOrderID.Read()
                  ProductID = __.ProductID.Read()
                  OrderQty = __.OrderQty.Read()
                  StockedQty = __.StockedQty.Read()
                  ScrappedQty = __.ScrappedQty.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  DueDate = __.DueDate.Read()
                  ScrapReasonID = __.ScrapReasonID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.WorkOrderID.IsNull() then None else Some(__.Read())

        type WorkOrderRoutingReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.OperationSequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OperationSequence")
            member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
            member __.ScheduledStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledStartDate")
            member __.ScheduledEndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledEndDate")
            member __.ActualStartDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "ActualStartDate")
            member __.ActualEndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "ActualEndDate")
            member __.ActualResourceHrs = NullableValueColumn(reader, getOrdinal, reader.GetDecimal, "ActualResourceHrs")
            member __.PlannedCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PlannedCost")
            member __.ActualCost = NullableValueColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { WorkOrderRouting.WorkOrderID = __.WorkOrderID.Read()
                  ProductID = __.ProductID.Read()
                  OperationSequence = __.OperationSequence.Read()
                  LocationID = __.LocationID.Read()
                  ScheduledStartDate = __.ScheduledStartDate.Read()
                  ScheduledEndDate = __.ScheduledEndDate.Read()
                  ActualStartDate = __.ActualStartDate.Read()
                  ActualEndDate = __.ActualEndDate.Read()
                  ActualResourceHrs = __.ActualResourceHrs.Read()
                  PlannedCost = __.PlannedCost.Read()
                  ActualCost = __.ActualCost.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.WorkOrderID.IsNull() then None else Some(__.Read())

module Purchasing =
    [<CLIMutable>]
    type ProductVendor =
        { [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          AverageLeadTime: int
          [<SqlHydra.ProviderDbType("Money")>]
          StandardPrice: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          LastReceiptCost: System.Nullable<decimal>
          [<SqlHydra.ProviderDbType("DateTime")>]
          LastReceiptDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("Int")>]
          MinOrderQty: int
          [<SqlHydra.ProviderDbType("Int")>]
          MaxOrderQty: int
          [<SqlHydra.ProviderDbType("Int")>]
          OnOrderQty: System.Nullable<int>
          [<SqlHydra.ProviderDbType("NChar")>]
          UnitMeasureCode: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ProductVendor = SqlHydra.Query.Table.table<ProductVendor>

    [<CLIMutable>]
    type PurchaseOrderDetail =
        { [<SqlHydra.ProviderDbType("Int")>]
          PurchaseOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          PurchaseOrderDetailID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          DueDate: System.DateTime
          [<SqlHydra.ProviderDbType("SmallInt")>]
          OrderQty: int16
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Money")>]
          UnitPrice: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          LineTotal: decimal
          [<SqlHydra.ProviderDbType("Decimal")>]
          ReceivedQty: decimal
          [<SqlHydra.ProviderDbType("Decimal")>]
          RejectedQty: decimal
          [<SqlHydra.ProviderDbType("Decimal")>]
          StockedQty: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let PurchaseOrderDetail = SqlHydra.Query.Table.table<PurchaseOrderDetail>

    [<CLIMutable>]
    type PurchaseOrderHeader =
        { [<SqlHydra.ProviderDbType("Int")>]
          PurchaseOrderID: int
          [<SqlHydra.ProviderDbType("TinyInt")>]
          RevisionNumber: byte
          [<SqlHydra.ProviderDbType("TinyInt")>]
          Status: byte
          [<SqlHydra.ProviderDbType("Int")>]
          EmployeeID: int
          [<SqlHydra.ProviderDbType("Int")>]
          VendorID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ShipMethodID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          OrderDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ShipDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("Money")>]
          SubTotal: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          TaxAmt: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          Freight: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          TotalDue: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let PurchaseOrderHeader = SqlHydra.Query.Table.table<PurchaseOrderHeader>

    [<CLIMutable>]
    type ShipMethod =
        { [<SqlHydra.ProviderDbType("Int")>]
          ShipMethodID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("Money")>]
          ShipBase: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          ShipRate: decimal
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ShipMethod = SqlHydra.Query.Table.table<ShipMethod>

    [<CLIMutable>]
    type Vendor =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          AccountNumber: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("TinyInt")>]
          CreditRating: byte
          [<SqlHydra.ProviderDbType("Bit")>]
          PreferredVendorStatus: bool
          [<SqlHydra.ProviderDbType("Bit")>]
          ActiveFlag: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          PurchasingWebServiceURL: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Vendor = SqlHydra.Query.Table.table<Vendor>

    module Readers =
        type ProductVendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.AverageLeadTime = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AverageLeadTime")
            member __.StandardPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardPrice")
            member __.LastReceiptCost = NullableValueColumn(reader, getOrdinal, reader.GetDecimal, "LastReceiptCost")
            member __.LastReceiptDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "LastReceiptDate")
            member __.MinOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinOrderQty")
            member __.MaxOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MaxOrderQty")
            member __.OnOrderQty = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "OnOrderQty")
            member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ProductVendor.ProductID = __.ProductID.Read()
                  BusinessEntityID = __.BusinessEntityID.Read()
                  AverageLeadTime = __.AverageLeadTime.Read()
                  StandardPrice = __.StandardPrice.Read()
                  LastReceiptCost = __.LastReceiptCost.Read()
                  LastReceiptDate = __.LastReceiptDate.Read()
                  MinOrderQty = __.MinOrderQty.Read()
                  MaxOrderQty = __.MaxOrderQty.Read()
                  OnOrderQty = __.OnOrderQty.Read()
                  UnitMeasureCode = __.UnitMeasureCode.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ProductID.IsNull() then None else Some(__.Read())

        type PurchaseOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
            member __.PurchaseOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderDetailID")
            member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
            member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
            member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
            member __.ReceivedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ReceivedQty")
            member __.RejectedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "RejectedQty")
            member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StockedQty")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { PurchaseOrderDetail.PurchaseOrderID = __.PurchaseOrderID.Read()
                  PurchaseOrderDetailID = __.PurchaseOrderDetailID.Read()
                  DueDate = __.DueDate.Read()
                  OrderQty = __.OrderQty.Read()
                  ProductID = __.ProductID.Read()
                  UnitPrice = __.UnitPrice.Read()
                  LineTotal = __.LineTotal.Read()
                  ReceivedQty = __.ReceivedQty.Read()
                  RejectedQty = __.RejectedQty.Read()
                  StockedQty = __.StockedQty.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

        type PurchaseOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
            member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
            member __.EmployeeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmployeeID")
            member __.VendorID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "VendorID")
            member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
            member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
            member __.ShipDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
            member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
            member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
            member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
            member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { PurchaseOrderHeader.PurchaseOrderID = __.PurchaseOrderID.Read()
                  RevisionNumber = __.RevisionNumber.Read()
                  Status = __.Status.Read()
                  EmployeeID = __.EmployeeID.Read()
                  VendorID = __.VendorID.Read()
                  ShipMethodID = __.ShipMethodID.Read()
                  OrderDate = __.OrderDate.Read()
                  ShipDate = __.ShipDate.Read()
                  SubTotal = __.SubTotal.Read()
                  TaxAmt = __.TaxAmt.Read()
                  Freight = __.Freight.Read()
                  TotalDue = __.TotalDue.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

        type ShipMethodReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ShipBase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipBase")
            member __.ShipRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipRate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ShipMethod.ShipMethodID = __.ShipMethodID.Read()
                  Name = __.Name.Read()
                  ShipBase = __.ShipBase.Read()
                  ShipRate = __.ShipRate.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ShipMethodID.IsNull() then None else Some(__.Read())

        type VendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.CreditRating = RequiredColumn(reader, getOrdinal, reader.GetByte, "CreditRating")
            member __.PreferredVendorStatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "PreferredVendorStatus")
            member __.ActiveFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "ActiveFlag")
            member __.PurchasingWebServiceURL = NullableObjectColumn(reader, getOrdinal, reader.GetString, "PurchasingWebServiceURL")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Vendor.BusinessEntityID = __.BusinessEntityID.Read()
                  AccountNumber = __.AccountNumber.Read()
                  Name = __.Name.Read()
                  CreditRating = __.CreditRating.Read()
                  PreferredVendorStatus = __.PreferredVendorStatus.Read()
                  ActiveFlag = __.ActiveFlag.Read()
                  PurchasingWebServiceURL = __.PurchasingWebServiceURL.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module Sales =
    [<CLIMutable>]
    type CountryRegionCurrency =
        { [<SqlHydra.ProviderDbType("NVarChar")>]
          CountryRegionCode: string
          [<SqlHydra.ProviderDbType("NChar")>]
          CurrencyCode: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let CountryRegionCurrency = SqlHydra.Query.Table.table<CountryRegionCurrency>

    [<CLIMutable>]
    type CreditCard =
        { [<SqlHydra.ProviderDbType("Int")>]
          CreditCardID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          CardType: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          CardNumber: string
          [<SqlHydra.ProviderDbType("TinyInt")>]
          ExpMonth: byte
          [<SqlHydra.ProviderDbType("SmallInt")>]
          ExpYear: int16
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let CreditCard = SqlHydra.Query.Table.table<CreditCard>

    [<CLIMutable>]
    type Currency =
        { [<SqlHydra.ProviderDbType("NChar")>]
          CurrencyCode: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Currency = SqlHydra.Query.Table.table<Currency>

    [<CLIMutable>]
    type CurrencyRate =
        { [<SqlHydra.ProviderDbType("Int")>]
          CurrencyRateID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          CurrencyRateDate: System.DateTime
          [<SqlHydra.ProviderDbType("NChar")>]
          FromCurrencyCode: string
          [<SqlHydra.ProviderDbType("NChar")>]
          ToCurrencyCode: string
          [<SqlHydra.ProviderDbType("Money")>]
          AverageRate: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          EndOfDayRate: decimal
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let CurrencyRate = SqlHydra.Query.Table.table<CurrencyRate>

    [<CLIMutable>]
    type Customer =
        { [<SqlHydra.ProviderDbType("Int")>]
          CustomerID: int
          [<SqlHydra.ProviderDbType("Int")>]
          PersonID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          StoreID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("VarChar")>]
          AccountNumber: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Customer = SqlHydra.Query.Table.table<Customer>

    [<CLIMutable>]
    type PersonCreditCard =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          CreditCardID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let PersonCreditCard = SqlHydra.Query.Table.table<PersonCreditCard>

    [<CLIMutable>]
    type SalesOrderDetail =
        { [<SqlHydra.ProviderDbType("Int")>]
          SalesOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          SalesOrderDetailID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          CarrierTrackingNumber: string
          [<SqlHydra.ProviderDbType("SmallInt")>]
          OrderQty: int16
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("Int")>]
          SpecialOfferID: int
          [<SqlHydra.ProviderDbType("Money")>]
          UnitPrice: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          UnitPriceDiscount: decimal
          [<SqlHydra.ProviderDbType("Decimal")>]
          LineTotal: decimal
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesOrderDetail = SqlHydra.Query.Table.table<SalesOrderDetail>

    [<CLIMutable>]
    type SalesOrderHeader =
        { [<SqlHydra.ProviderDbType("Int")>]
          SalesOrderID: int
          [<SqlHydra.ProviderDbType("TinyInt")>]
          RevisionNumber: byte
          [<SqlHydra.ProviderDbType("DateTime")>]
          OrderDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          DueDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ShipDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("TinyInt")>]
          Status: byte
          [<SqlHydra.ProviderDbType("Bit")>]
          OnlineOrderFlag: bool
          [<SqlHydra.ProviderDbType("NVarChar")>]
          SalesOrderNumber: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          PurchaseOrderNumber: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          AccountNumber: string
          [<SqlHydra.ProviderDbType("Int")>]
          CustomerID: int
          [<SqlHydra.ProviderDbType("Int")>]
          SalesPersonID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          BillToAddressID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ShipToAddressID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ShipMethodID: int
          [<SqlHydra.ProviderDbType("Int")>]
          CreditCardID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("VarChar")>]
          CreditCardApprovalCode: string
          [<SqlHydra.ProviderDbType("Int")>]
          CurrencyRateID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Money")>]
          SubTotal: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          TaxAmt: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          Freight: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          TotalDue: decimal
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Comment: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesOrderHeader = SqlHydra.Query.Table.table<SalesOrderHeader>

    [<CLIMutable>]
    type SalesOrderHeaderSalesReason =
        { [<SqlHydra.ProviderDbType("Int")>]
          SalesOrderID: int
          [<SqlHydra.ProviderDbType("Int")>]
          SalesReasonID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesOrderHeaderSalesReason = SqlHydra.Query.Table.table<SalesOrderHeaderSalesReason>

    [<CLIMutable>]
    type SalesPerson =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Money")>]
          SalesQuota: System.Nullable<decimal>
          [<SqlHydra.ProviderDbType("Money")>]
          Bonus: decimal
          [<SqlHydra.ProviderDbType("SmallMoney")>]
          CommissionPct: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          SalesYTD: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          SalesLastYear: decimal
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesPerson = SqlHydra.Query.Table.table<SalesPerson>

    [<CLIMutable>]
    type SalesPersonQuotaHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          QuotaDate: System.DateTime
          [<SqlHydra.ProviderDbType("Money")>]
          SalesQuota: decimal
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesPersonQuotaHistory = SqlHydra.Query.Table.table<SalesPersonQuotaHistory>

    [<CLIMutable>]
    type SalesReason =
        { [<SqlHydra.ProviderDbType("Int")>]
          SalesReasonID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ReasonType: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesReason = SqlHydra.Query.Table.table<SalesReason>

    [<CLIMutable>]
    type SalesTaxRate =
        { [<SqlHydra.ProviderDbType("Int")>]
          SalesTaxRateID: int
          [<SqlHydra.ProviderDbType("Int")>]
          StateProvinceID: int
          [<SqlHydra.ProviderDbType("TinyInt")>]
          TaxType: byte
          [<SqlHydra.ProviderDbType("SmallMoney")>]
          TaxRate: decimal
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesTaxRate = SqlHydra.Query.Table.table<SalesTaxRate>

    [<CLIMutable>]
    type SalesTerritory =
        { [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          CountryRegionCode: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Group: string
          [<SqlHydra.ProviderDbType("Money")>]
          SalesYTD: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          SalesLastYear: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          CostYTD: decimal
          [<SqlHydra.ProviderDbType("Money")>]
          CostLastYear: decimal
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesTerritory = SqlHydra.Query.Table.table<SalesTerritory>

    [<CLIMutable>]
    type SalesTerritoryHistory =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("Int")>]
          TerritoryID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.Nullable<System.DateTime>
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SalesTerritoryHistory = SqlHydra.Query.Table.table<SalesTerritoryHistory>

    [<CLIMutable>]
    type ShoppingCartItem =
        { [<SqlHydra.ProviderDbType("Int")>]
          ShoppingCartItemID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ShoppingCartID: string
          [<SqlHydra.ProviderDbType("Int")>]
          Quantity: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateCreated: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let ShoppingCartItem = SqlHydra.Query.Table.table<ShoppingCartItem>

    [<CLIMutable>]
    type SpecialOffer =
        { [<SqlHydra.ProviderDbType("Int")>]
          SpecialOfferID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Description: string
          [<SqlHydra.ProviderDbType("SmallMoney")>]
          DiscountPct: decimal
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Type: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Category: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          EndDate: System.DateTime
          [<SqlHydra.ProviderDbType("Int")>]
          MinQty: int
          [<SqlHydra.ProviderDbType("Int")>]
          MaxQty: System.Nullable<int>
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SpecialOffer = SqlHydra.Query.Table.table<SpecialOffer>

    [<CLIMutable>]
    type SpecialOfferProduct =
        { [<SqlHydra.ProviderDbType("Int")>]
          SpecialOfferID: int
          [<SqlHydra.ProviderDbType("Int")>]
          ProductID: int
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let SpecialOfferProduct = SqlHydra.Query.Table.table<SpecialOfferProduct>

    [<CLIMutable>]
    type Store =
        { [<SqlHydra.ProviderDbType("Int")>]
          BusinessEntityID: int
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Name: string
          [<SqlHydra.ProviderDbType("Int")>]
          SalesPersonID: System.Nullable<int>
          [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let Store = SqlHydra.Query.Table.table<Store>

    module Readers =
        type CountryRegionCurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
            member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { CountryRegionCurrency.CountryRegionCode = __.CountryRegionCode.Read()
                  CurrencyCode = __.CurrencyCode.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CountryRegionCode.IsNull() then None else Some(__.Read())

        type CreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
            member __.CardType = RequiredColumn(reader, getOrdinal, reader.GetString, "CardType")
            member __.CardNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "CardNumber")
            member __.ExpMonth = RequiredColumn(reader, getOrdinal, reader.GetByte, "ExpMonth")
            member __.ExpYear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ExpYear")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { CreditCard.CreditCardID = __.CreditCardID.Read()
                  CardType = __.CardType.Read()
                  CardNumber = __.CardNumber.Read()
                  ExpMonth = __.ExpMonth.Read()
                  ExpYear = __.ExpYear.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CreditCardID.IsNull() then None else Some(__.Read())

        type CurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Currency.CurrencyCode = __.CurrencyCode.Read()
                  Name = __.Name.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CurrencyCode.IsNull() then None else Some(__.Read())

        type CurrencyRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CurrencyRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
            member __.CurrencyRateDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CurrencyRateDate")
            member __.FromCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "FromCurrencyCode")
            member __.ToCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "ToCurrencyCode")
            member __.AverageRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "AverageRate")
            member __.EndOfDayRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "EndOfDayRate")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { CurrencyRate.CurrencyRateID = __.CurrencyRateID.Read()
                  CurrencyRateDate = __.CurrencyRateDate.Read()
                  FromCurrencyCode = __.FromCurrencyCode.Read()
                  ToCurrencyCode = __.ToCurrencyCode.Read()
                  AverageRate = __.AverageRate.Read()
                  EndOfDayRate = __.EndOfDayRate.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CurrencyRateID.IsNull() then None else Some(__.Read())

        type CustomerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
            member __.PersonID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
            member __.StoreID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "StoreID")
            member __.TerritoryID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Customer.CustomerID = __.CustomerID.Read()
                  PersonID = __.PersonID.Read()
                  StoreID = __.StoreID.Read()
                  TerritoryID = __.TerritoryID.Read()
                  AccountNumber = __.AccountNumber.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.CustomerID.IsNull() then None else Some(__.Read())

        type PersonCreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { PersonCreditCard.BusinessEntityID = __.BusinessEntityID.Read()
                  CreditCardID = __.CreditCardID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type SalesOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
            member __.SalesOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderDetailID")
            member __.CarrierTrackingNumber = NullableObjectColumn(reader, getOrdinal, reader.GetString, "CarrierTrackingNumber")
            member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
            member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
            member __.UnitPriceDiscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPriceDiscount")
            member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesOrderDetail.SalesOrderID = __.SalesOrderID.Read()
                  SalesOrderDetailID = __.SalesOrderDetailID.Read()
                  CarrierTrackingNumber = __.CarrierTrackingNumber.Read()
                  OrderQty = __.OrderQty.Read()
                  ProductID = __.ProductID.Read()
                  SpecialOfferID = __.SpecialOfferID.Read()
                  UnitPrice = __.UnitPrice.Read()
                  UnitPriceDiscount = __.UnitPriceDiscount.Read()
                  LineTotal = __.LineTotal.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SalesOrderID.IsNull() then None else Some(__.Read())

        type SalesOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
            member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
            member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
            member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
            member __.ShipDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
            member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
            member __.OnlineOrderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "OnlineOrderFlag")
            member __.SalesOrderNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "SalesOrderNumber")
            member __.PurchaseOrderNumber = NullableObjectColumn(reader, getOrdinal, reader.GetString, "PurchaseOrderNumber")
            member __.AccountNumber = NullableObjectColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
            member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
            member __.SalesPersonID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
            member __.TerritoryID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.BillToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillToAddressID")
            member __.ShipToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipToAddressID")
            member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
            member __.CreditCardID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
            member __.CreditCardApprovalCode = NullableObjectColumn(reader, getOrdinal, reader.GetString, "CreditCardApprovalCode")
            member __.CurrencyRateID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
            member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
            member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
            member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
            member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
            member __.Comment = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Comment")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesOrderHeader.SalesOrderID = __.SalesOrderID.Read()
                  RevisionNumber = __.RevisionNumber.Read()
                  OrderDate = __.OrderDate.Read()
                  DueDate = __.DueDate.Read()
                  ShipDate = __.ShipDate.Read()
                  Status = __.Status.Read()
                  OnlineOrderFlag = __.OnlineOrderFlag.Read()
                  SalesOrderNumber = __.SalesOrderNumber.Read()
                  PurchaseOrderNumber = __.PurchaseOrderNumber.Read()
                  AccountNumber = __.AccountNumber.Read()
                  CustomerID = __.CustomerID.Read()
                  SalesPersonID = __.SalesPersonID.Read()
                  TerritoryID = __.TerritoryID.Read()
                  BillToAddressID = __.BillToAddressID.Read()
                  ShipToAddressID = __.ShipToAddressID.Read()
                  ShipMethodID = __.ShipMethodID.Read()
                  CreditCardID = __.CreditCardID.Read()
                  CreditCardApprovalCode = __.CreditCardApprovalCode.Read()
                  CurrencyRateID = __.CurrencyRateID.Read()
                  SubTotal = __.SubTotal.Read()
                  TaxAmt = __.TaxAmt.Read()
                  Freight = __.Freight.Read()
                  TotalDue = __.TotalDue.Read()
                  Comment = __.Comment.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SalesOrderID.IsNull() then None else Some(__.Read())

        type SalesOrderHeaderSalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
            member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesOrderHeaderSalesReason.SalesOrderID = __.SalesOrderID.Read()
                  SalesReasonID = __.SalesReasonID.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SalesOrderID.IsNull() then None else Some(__.Read())

        type SalesPersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.TerritoryID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.SalesQuota = NullableValueColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
            member __.Bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Bonus")
            member __.CommissionPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CommissionPct")
            member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
            member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesPerson.BusinessEntityID = __.BusinessEntityID.Read()
                  TerritoryID = __.TerritoryID.Read()
                  SalesQuota = __.SalesQuota.Read()
                  Bonus = __.Bonus.Read()
                  CommissionPct = __.CommissionPct.Read()
                  SalesYTD = __.SalesYTD.Read()
                  SalesLastYear = __.SalesLastYear.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type SalesPersonQuotaHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.QuotaDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "QuotaDate")
            member __.SalesQuota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesPersonQuotaHistory.BusinessEntityID = __.BusinessEntityID.Read()
                  QuotaDate = __.QuotaDate.Read()
                  SalesQuota = __.SalesQuota.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type SalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.ReasonType = RequiredColumn(reader, getOrdinal, reader.GetString, "ReasonType")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesReason.SalesReasonID = __.SalesReasonID.Read()
                  Name = __.Name.Read()
                  ReasonType = __.ReasonType.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SalesReasonID.IsNull() then None else Some(__.Read())

        type SalesTaxRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SalesTaxRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesTaxRateID")
            member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
            member __.TaxType = RequiredColumn(reader, getOrdinal, reader.GetByte, "TaxType")
            member __.TaxRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxRate")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesTaxRate.SalesTaxRateID = __.SalesTaxRateID.Read()
                  StateProvinceID = __.StateProvinceID.Read()
                  TaxType = __.TaxType.Read()
                  TaxRate = __.TaxRate.Read()
                  Name = __.Name.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SalesTaxRateID.IsNull() then None else Some(__.Read())

        type SalesTerritoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
            member __.Group = RequiredColumn(reader, getOrdinal, reader.GetString, "Group")
            member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
            member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
            member __.CostYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostYTD")
            member __.CostLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostLastYear")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesTerritory.TerritoryID = __.TerritoryID.Read()
                  Name = __.Name.Read()
                  CountryRegionCode = __.CountryRegionCode.Read()
                  Group = __.Group.Read()
                  SalesYTD = __.SalesYTD.Read()
                  SalesLastYear = __.SalesLastYear.Read()
                  CostYTD = __.CostYTD.Read()
                  CostLastYear = __.CostLastYear.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.TerritoryID.IsNull() then None else Some(__.Read())

        type SalesTerritoryHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = NullableValueColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SalesTerritoryHistory.BusinessEntityID = __.BusinessEntityID.Read()
                  TerritoryID = __.TerritoryID.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

        type ShoppingCartItemReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ShoppingCartItemID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShoppingCartItemID")
            member __.ShoppingCartID = RequiredColumn(reader, getOrdinal, reader.GetString, "ShoppingCartID")
            member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.DateCreated = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DateCreated")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { ShoppingCartItem.ShoppingCartItemID = __.ShoppingCartItemID.Read()
                  ShoppingCartID = __.ShoppingCartID.Read()
                  Quantity = __.Quantity.Read()
                  ProductID = __.ProductID.Read()
                  DateCreated = __.DateCreated.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.ShoppingCartItemID.IsNull() then None else Some(__.Read())

        type SpecialOfferReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
            member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
            member __.DiscountPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "DiscountPct")
            member __.Type = RequiredColumn(reader, getOrdinal, reader.GetString, "Type")
            member __.Category = RequiredColumn(reader, getOrdinal, reader.GetString, "Category")
            member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
            member __.EndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
            member __.MinQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinQty")
            member __.MaxQty = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "MaxQty")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SpecialOffer.SpecialOfferID = __.SpecialOfferID.Read()
                  Description = __.Description.Read()
                  DiscountPct = __.DiscountPct.Read()
                  Type = __.Type.Read()
                  Category = __.Category.Read()
                  StartDate = __.StartDate.Read()
                  EndDate = __.EndDate.Read()
                  MinQty = __.MinQty.Read()
                  MaxQty = __.MaxQty.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SpecialOfferID.IsNull() then None else Some(__.Read())

        type SpecialOfferProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
            member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { SpecialOfferProduct.SpecialOfferID = __.SpecialOfferID.Read()
                  ProductID = __.ProductID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SpecialOfferID.IsNull() then None else Some(__.Read())

        type StoreReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
            member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
            member __.SalesPersonID = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { Store.BusinessEntityID = __.BusinessEntityID.Read()
                  Name = __.Name.Read()
                  SalesPersonID = __.SalesPersonID.Read()
                  rowguid = __.rowguid.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module dbo =
    [<CLIMutable>]
    type AWBuildVersion =
        { [<SqlHydra.ProviderDbType("TinyInt")>]
          SystemInformationID: byte
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ``Database Version``: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          VersionDate: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedDate: System.DateTime }

    let AWBuildVersion = SqlHydra.Query.Table.table<AWBuildVersion>

    [<CLIMutable>]
    type DatabaseLog =
        { [<SqlHydra.ProviderDbType("Int")>]
          DatabaseLogID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          PostTime: System.DateTime
          [<SqlHydra.ProviderDbType("NVarChar")>]
          DatabaseUser: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Event: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Schema: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          Object: string
          [<SqlHydra.ProviderDbType("NVarChar")>]
          TSQL: string }

    let DatabaseLog = SqlHydra.Query.Table.table<DatabaseLog>

    [<CLIMutable>]
    type ErrorLog =
        { [<SqlHydra.ProviderDbType("Int")>]
          ErrorLogID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          ErrorTime: System.DateTime
          [<SqlHydra.ProviderDbType("NVarChar")>]
          UserName: string
          [<SqlHydra.ProviderDbType("Int")>]
          ErrorNumber: int
          [<SqlHydra.ProviderDbType("Int")>]
          ErrorSeverity: System.Nullable<int>
          [<SqlHydra.ProviderDbType("Int")>]
          ErrorState: System.Nullable<int>
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ErrorProcedure: string
          [<SqlHydra.ProviderDbType("Int")>]
          ErrorLine: System.Nullable<int>
          [<SqlHydra.ProviderDbType("NVarChar")>]
          ErrorMessage: string }

    let ErrorLog = SqlHydra.Query.Table.table<ErrorLog>

    module Readers =
        type AWBuildVersionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.SystemInformationID = RequiredColumn(reader, getOrdinal, reader.GetByte, "SystemInformationID")
            member __.``Database Version`` = RequiredColumn(reader, getOrdinal, reader.GetString, "Database Version")
            member __.VersionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "VersionDate")
            member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

            member __.Read() =
                { AWBuildVersion.SystemInformationID = __.SystemInformationID.Read()
                  ``Database Version`` = __.``Database Version``.Read()
                  VersionDate = __.VersionDate.Read()
                  ModifiedDate = __.ModifiedDate.Read() }

            member __.ReadIfNotNull() =
                if __.SystemInformationID.IsNull() then None else Some(__.Read())

        type DatabaseLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.DatabaseLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DatabaseLogID")
            member __.PostTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "PostTime")
            member __.DatabaseUser = RequiredColumn(reader, getOrdinal, reader.GetString, "DatabaseUser")
            member __.Event = RequiredColumn(reader, getOrdinal, reader.GetString, "Event")
            member __.Schema = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Schema")
            member __.Object = NullableObjectColumn(reader, getOrdinal, reader.GetString, "Object")
            member __.TSQL = RequiredColumn(reader, getOrdinal, reader.GetString, "TSQL")

            member __.Read() =
                { DatabaseLog.DatabaseLogID = __.DatabaseLogID.Read()
                  PostTime = __.PostTime.Read()
                  DatabaseUser = __.DatabaseUser.Read()
                  Event = __.Event.Read()
                  Schema = __.Schema.Read()
                  Object = __.Object.Read()
                  TSQL = __.TSQL.Read() }

            member __.ReadIfNotNull() =
                if __.DatabaseLogID.IsNull() then None else Some(__.Read())

        type ErrorLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ErrorLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorLogID")
            member __.ErrorTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ErrorTime")
            member __.UserName = RequiredColumn(reader, getOrdinal, reader.GetString, "UserName")
            member __.ErrorNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorNumber")
            member __.ErrorSeverity = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ErrorSeverity")
            member __.ErrorState = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ErrorState")
            member __.ErrorProcedure = NullableObjectColumn(reader, getOrdinal, reader.GetString, "ErrorProcedure")
            member __.ErrorLine = NullableValueColumn(reader, getOrdinal, reader.GetInt32, "ErrorLine")
            member __.ErrorMessage = RequiredColumn(reader, getOrdinal, reader.GetString, "ErrorMessage")

            member __.Read() =
                { ErrorLog.ErrorLogID = __.ErrorLogID.Read()
                  ErrorTime = __.ErrorTime.Read()
                  UserName = __.UserName.Read()
                  ErrorNumber = __.ErrorNumber.Read()
                  ErrorSeverity = __.ErrorSeverity.Read()
                  ErrorState = __.ErrorState.Read()
                  ErrorProcedure = __.ErrorProcedure.Read()
                  ErrorLine = __.ErrorLine.Read()
                  ErrorMessage = __.ErrorMessage.Read() }

            member __.ReadIfNotNull() =
                if __.ErrorLogID.IsNull() then None else Some(__.Read())

module ext =
    [<CLIMutable>]
    type DateTime2Support =
        { [<SqlHydra.ProviderDbType("Int")>]
          ID: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          LessPrecision: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime2")>]
          MorePrecision: System.DateTime }

    let DateTime2Support = SqlHydra.Query.Table.table<DateTime2Support>

    [<CLIMutable>]
    type GetIdGuidRepro =
        { [<SqlHydra.ProviderDbType("UniqueIdentifier")>]
          Id: System.Guid
          [<SqlHydra.ProviderDbType("NChar")>]
          EmailAddress: string }

    let GetIdGuidRepro = SqlHydra.Query.Table.table<GetIdGuidRepro>

    module Readers =
        type DateTime2SupportReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.ID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ID")
            member __.LessPrecision = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "LessPrecision")
            member __.MorePrecision = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "MorePrecision")

            member __.Read() =
                { DateTime2Support.ID = __.ID.Read()
                  LessPrecision = __.LessPrecision.Read()
                  MorePrecision = __.MorePrecision.Read() }

            member __.ReadIfNotNull() =
                if __.ID.IsNull() then None else Some(__.Read())

        type GetIdGuidReproReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
            member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
            member __.EmailAddress = RequiredColumn(reader, getOrdinal, reader.GetString, "EmailAddress")

            member __.Read() =
                { GetIdGuidRepro.Id = __.Id.Read()
                  EmailAddress = __.EmailAddress.Read() }

            member __.ReadIfNotNull() =
                if __.Id.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyHumanResourcesDepartment = lazy (HumanResources.Readers.DepartmentReader(reader, buildGetOrdinal 4))
    let lazyHumanResourcesEmployee = lazy (HumanResources.Readers.EmployeeReader(reader, buildGetOrdinal 16))
    let lazyHumanResourcesEmployeeDepartmentHistory = lazy (HumanResources.Readers.EmployeeDepartmentHistoryReader(reader, buildGetOrdinal 6))
    let lazyHumanResourcesEmployeePayHistory = lazy (HumanResources.Readers.EmployeePayHistoryReader(reader, buildGetOrdinal 5))
    let lazyHumanResourcesJobCandidate = lazy (HumanResources.Readers.JobCandidateReader(reader, buildGetOrdinal 4))
    let lazyHumanResourcesShift = lazy (HumanResources.Readers.ShiftReader(reader, buildGetOrdinal 5))
    let lazyPersonAddress = lazy (Person.Readers.AddressReader(reader, buildGetOrdinal 9))
    let lazyPersonAddressType = lazy (Person.Readers.AddressTypeReader(reader, buildGetOrdinal 4))
    let lazyPersonBusinessEntity = lazy (Person.Readers.BusinessEntityReader(reader, buildGetOrdinal 3))
    let lazyPersonBusinessEntityAddress = lazy (Person.Readers.BusinessEntityAddressReader(reader, buildGetOrdinal 5))
    let lazyPersonBusinessEntityContact = lazy (Person.Readers.BusinessEntityContactReader(reader, buildGetOrdinal 5))
    let lazyPersonContactType = lazy (Person.Readers.ContactTypeReader(reader, buildGetOrdinal 3))
    let lazyPersonCountryRegion = lazy (Person.Readers.CountryRegionReader(reader, buildGetOrdinal 3))
    let lazyPersonEmailAddress = lazy (Person.Readers.EmailAddressReader(reader, buildGetOrdinal 5))
    let lazyPersonPassword = lazy (Person.Readers.PasswordReader(reader, buildGetOrdinal 5))
    let lazyPersonPerson = lazy (Person.Readers.PersonReader(reader, buildGetOrdinal 13))
    let lazyPersonPersonPhone = lazy (Person.Readers.PersonPhoneReader(reader, buildGetOrdinal 4))
    let lazyPersonPhoneNumberType = lazy (Person.Readers.PhoneNumberTypeReader(reader, buildGetOrdinal 3))
    let lazyPersonStateProvince = lazy (Person.Readers.StateProvinceReader(reader, buildGetOrdinal 8))
    let lazyProductionBillOfMaterials = lazy (Production.Readers.BillOfMaterialsReader(reader, buildGetOrdinal 9))
    let lazyProductionCulture = lazy (Production.Readers.CultureReader(reader, buildGetOrdinal 3))
    let lazyProductionDocument = lazy (Production.Readers.DocumentReader(reader, buildGetOrdinal 14))
    let lazyProductionIllustration = lazy (Production.Readers.IllustrationReader(reader, buildGetOrdinal 3))
    let lazyProductionLocation = lazy (Production.Readers.LocationReader(reader, buildGetOrdinal 5))
    let lazyProductionProduct = lazy (Production.Readers.ProductReader(reader, buildGetOrdinal 25))
    let lazyProductionProductCategory = lazy (Production.Readers.ProductCategoryReader(reader, buildGetOrdinal 4))
    let lazyProductionProductCostHistory = lazy (Production.Readers.ProductCostHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductionProductDescription = lazy (Production.Readers.ProductDescriptionReader(reader, buildGetOrdinal 4))
    let lazyProductionProductDocument = lazy (Production.Readers.ProductDocumentReader(reader, buildGetOrdinal 3))
    let lazyProductionProductInventory = lazy (Production.Readers.ProductInventoryReader(reader, buildGetOrdinal 7))
    let lazyProductionProductListPriceHistory = lazy (Production.Readers.ProductListPriceHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductionProductModel = lazy (Production.Readers.ProductModelReader(reader, buildGetOrdinal 6))
    let lazyProductionProductModelIllustration = lazy (Production.Readers.ProductModelIllustrationReader(reader, buildGetOrdinal 3))
    let lazyProductionProductModelProductDescriptionCulture = lazy (Production.Readers.ProductModelProductDescriptionCultureReader(reader, buildGetOrdinal 4))
    let lazyProductionProductPhoto = lazy (Production.Readers.ProductPhotoReader(reader, buildGetOrdinal 6))
    let lazyProductionProductProductPhoto = lazy (Production.Readers.ProductProductPhotoReader(reader, buildGetOrdinal 4))
    let lazyProductionProductReview = lazy (Production.Readers.ProductReviewReader(reader, buildGetOrdinal 8))
    let lazyProductionProductSubcategory = lazy (Production.Readers.ProductSubcategoryReader(reader, buildGetOrdinal 5))
    let lazyProductionScrapReason = lazy (Production.Readers.ScrapReasonReader(reader, buildGetOrdinal 3))
    let lazyProductionTransactionHistory = lazy (Production.Readers.TransactionHistoryReader(reader, buildGetOrdinal 9))
    let lazyProductionTransactionHistoryArchive = lazy (Production.Readers.TransactionHistoryArchiveReader(reader, buildGetOrdinal 9))
    let lazyProductionUnitMeasure = lazy (Production.Readers.UnitMeasureReader(reader, buildGetOrdinal 3))
    let lazyProductionWorkOrder = lazy (Production.Readers.WorkOrderReader(reader, buildGetOrdinal 10))
    let lazyProductionWorkOrderRouting = lazy (Production.Readers.WorkOrderRoutingReader(reader, buildGetOrdinal 12))
    let lazyPurchasingProductVendor = lazy (Purchasing.Readers.ProductVendorReader(reader, buildGetOrdinal 11))
    let lazyPurchasingPurchaseOrderDetail = lazy (Purchasing.Readers.PurchaseOrderDetailReader(reader, buildGetOrdinal 11))
    let lazyPurchasingPurchaseOrderHeader = lazy (Purchasing.Readers.PurchaseOrderHeaderReader(reader, buildGetOrdinal 13))
    let lazyPurchasingShipMethod = lazy (Purchasing.Readers.ShipMethodReader(reader, buildGetOrdinal 6))
    let lazyPurchasingVendor = lazy (Purchasing.Readers.VendorReader(reader, buildGetOrdinal 8))
    let lazySalesCountryRegionCurrency = lazy (Sales.Readers.CountryRegionCurrencyReader(reader, buildGetOrdinal 3))
    let lazySalesCreditCard = lazy (Sales.Readers.CreditCardReader(reader, buildGetOrdinal 6))
    let lazySalesCurrency = lazy (Sales.Readers.CurrencyReader(reader, buildGetOrdinal 3))
    let lazySalesCurrencyRate = lazy (Sales.Readers.CurrencyRateReader(reader, buildGetOrdinal 7))
    let lazySalesCustomer = lazy (Sales.Readers.CustomerReader(reader, buildGetOrdinal 7))
    let lazySalesPersonCreditCard = lazy (Sales.Readers.PersonCreditCardReader(reader, buildGetOrdinal 3))
    let lazySalesSalesOrderDetail = lazy (Sales.Readers.SalesOrderDetailReader(reader, buildGetOrdinal 11))
    let lazySalesSalesOrderHeader = lazy (Sales.Readers.SalesOrderHeaderReader(reader, buildGetOrdinal 26))
    let lazySalesSalesOrderHeaderSalesReason = lazy (Sales.Readers.SalesOrderHeaderSalesReasonReader(reader, buildGetOrdinal 3))
    let lazySalesSalesPerson = lazy (Sales.Readers.SalesPersonReader(reader, buildGetOrdinal 9))
    let lazySalesSalesPersonQuotaHistory = lazy (Sales.Readers.SalesPersonQuotaHistoryReader(reader, buildGetOrdinal 5))
    let lazySalesSalesReason = lazy (Sales.Readers.SalesReasonReader(reader, buildGetOrdinal 4))
    let lazySalesSalesTaxRate = lazy (Sales.Readers.SalesTaxRateReader(reader, buildGetOrdinal 7))
    let lazySalesSalesTerritory = lazy (Sales.Readers.SalesTerritoryReader(reader, buildGetOrdinal 10))
    let lazySalesSalesTerritoryHistory = lazy (Sales.Readers.SalesTerritoryHistoryReader(reader, buildGetOrdinal 6))
    let lazySalesShoppingCartItem = lazy (Sales.Readers.ShoppingCartItemReader(reader, buildGetOrdinal 6))
    let lazySalesSpecialOffer = lazy (Sales.Readers.SpecialOfferReader(reader, buildGetOrdinal 11))
    let lazySalesSpecialOfferProduct = lazy (Sales.Readers.SpecialOfferProductReader(reader, buildGetOrdinal 4))
    let lazySalesStore = lazy (Sales.Readers.StoreReader(reader, buildGetOrdinal 6))
    let lazydboAWBuildVersion = lazy (dbo.Readers.AWBuildVersionReader(reader, buildGetOrdinal 4))
    let lazydboDatabaseLog = lazy (dbo.Readers.DatabaseLogReader(reader, buildGetOrdinal 8))
    let lazydboErrorLog = lazy (dbo.Readers.ErrorLogReader(reader, buildGetOrdinal 9))
    let lazyextDateTime2Support = lazy (ext.Readers.DateTime2SupportReader(reader, buildGetOrdinal 3))
    let lazyextGetIdGuidRepro = lazy (ext.Readers.GetIdGuidReproReader(reader, buildGetOrdinal 2))
    member __.``HumanResources.Department`` = lazyHumanResourcesDepartment.Value
    member __.``HumanResources.Employee`` = lazyHumanResourcesEmployee.Value
    member __.``HumanResources.EmployeeDepartmentHistory`` = lazyHumanResourcesEmployeeDepartmentHistory.Value
    member __.``HumanResources.EmployeePayHistory`` = lazyHumanResourcesEmployeePayHistory.Value
    member __.``HumanResources.JobCandidate`` = lazyHumanResourcesJobCandidate.Value
    member __.``HumanResources.Shift`` = lazyHumanResourcesShift.Value
    member __.``Person.Address`` = lazyPersonAddress.Value
    member __.``Person.AddressType`` = lazyPersonAddressType.Value
    member __.``Person.BusinessEntity`` = lazyPersonBusinessEntity.Value
    member __.``Person.BusinessEntityAddress`` = lazyPersonBusinessEntityAddress.Value
    member __.``Person.BusinessEntityContact`` = lazyPersonBusinessEntityContact.Value
    member __.``Person.ContactType`` = lazyPersonContactType.Value
    member __.``Person.CountryRegion`` = lazyPersonCountryRegion.Value
    member __.``Person.EmailAddress`` = lazyPersonEmailAddress.Value
    member __.``Person.Password`` = lazyPersonPassword.Value
    member __.``Person.Person`` = lazyPersonPerson.Value
    member __.``Person.PersonPhone`` = lazyPersonPersonPhone.Value
    member __.``Person.PhoneNumberType`` = lazyPersonPhoneNumberType.Value
    member __.``Person.StateProvince`` = lazyPersonStateProvince.Value
    member __.``Production.BillOfMaterials`` = lazyProductionBillOfMaterials.Value
    member __.``Production.Culture`` = lazyProductionCulture.Value
    member __.``Production.Document`` = lazyProductionDocument.Value
    member __.``Production.Illustration`` = lazyProductionIllustration.Value
    member __.``Production.Location`` = lazyProductionLocation.Value
    member __.``Production.Product`` = lazyProductionProduct.Value
    member __.``Production.ProductCategory`` = lazyProductionProductCategory.Value
    member __.``Production.ProductCostHistory`` = lazyProductionProductCostHistory.Value
    member __.``Production.ProductDescription`` = lazyProductionProductDescription.Value
    member __.``Production.ProductDocument`` = lazyProductionProductDocument.Value
    member __.``Production.ProductInventory`` = lazyProductionProductInventory.Value
    member __.``Production.ProductListPriceHistory`` = lazyProductionProductListPriceHistory.Value
    member __.``Production.ProductModel`` = lazyProductionProductModel.Value
    member __.``Production.ProductModelIllustration`` = lazyProductionProductModelIllustration.Value
    member __.``Production.ProductModelProductDescriptionCulture`` = lazyProductionProductModelProductDescriptionCulture.Value
    member __.``Production.ProductPhoto`` = lazyProductionProductPhoto.Value
    member __.``Production.ProductProductPhoto`` = lazyProductionProductProductPhoto.Value
    member __.``Production.ProductReview`` = lazyProductionProductReview.Value
    member __.``Production.ProductSubcategory`` = lazyProductionProductSubcategory.Value
    member __.``Production.ScrapReason`` = lazyProductionScrapReason.Value
    member __.``Production.TransactionHistory`` = lazyProductionTransactionHistory.Value
    member __.``Production.TransactionHistoryArchive`` = lazyProductionTransactionHistoryArchive.Value
    member __.``Production.UnitMeasure`` = lazyProductionUnitMeasure.Value
    member __.``Production.WorkOrder`` = lazyProductionWorkOrder.Value
    member __.``Production.WorkOrderRouting`` = lazyProductionWorkOrderRouting.Value
    member __.``Purchasing.ProductVendor`` = lazyPurchasingProductVendor.Value
    member __.``Purchasing.PurchaseOrderDetail`` = lazyPurchasingPurchaseOrderDetail.Value
    member __.``Purchasing.PurchaseOrderHeader`` = lazyPurchasingPurchaseOrderHeader.Value
    member __.``Purchasing.ShipMethod`` = lazyPurchasingShipMethod.Value
    member __.``Purchasing.Vendor`` = lazyPurchasingVendor.Value
    member __.``Sales.CountryRegionCurrency`` = lazySalesCountryRegionCurrency.Value
    member __.``Sales.CreditCard`` = lazySalesCreditCard.Value
    member __.``Sales.Currency`` = lazySalesCurrency.Value
    member __.``Sales.CurrencyRate`` = lazySalesCurrencyRate.Value
    member __.``Sales.Customer`` = lazySalesCustomer.Value
    member __.``Sales.PersonCreditCard`` = lazySalesPersonCreditCard.Value
    member __.``Sales.SalesOrderDetail`` = lazySalesSalesOrderDetail.Value
    member __.``Sales.SalesOrderHeader`` = lazySalesSalesOrderHeader.Value
    member __.``Sales.SalesOrderHeaderSalesReason`` = lazySalesSalesOrderHeaderSalesReason.Value
    member __.``Sales.SalesPerson`` = lazySalesSalesPerson.Value
    member __.``Sales.SalesPersonQuotaHistory`` = lazySalesSalesPersonQuotaHistory.Value
    member __.``Sales.SalesReason`` = lazySalesSalesReason.Value
    member __.``Sales.SalesTaxRate`` = lazySalesSalesTaxRate.Value
    member __.``Sales.SalesTerritory`` = lazySalesSalesTerritory.Value
    member __.``Sales.SalesTerritoryHistory`` = lazySalesSalesTerritoryHistory.Value
    member __.``Sales.ShoppingCartItem`` = lazySalesShoppingCartItem.Value
    member __.``Sales.SpecialOffer`` = lazySalesSpecialOffer.Value
    member __.``Sales.SpecialOfferProduct`` = lazySalesSpecialOfferProduct.Value
    member __.``Sales.Store`` = lazySalesStore.Value
    member __.``dbo.AWBuildVersion`` = lazydboAWBuildVersion.Value
    member __.``dbo.DatabaseLog`` = lazydboDatabaseLog.Value
    member __.``dbo.ErrorLog`` = lazydboErrorLog.Value
    member __.``ext.DateTime2Support`` = lazyextDateTime2Support.Value
    member __.``ext.GetIdGuidRepro`` = lazyextGetIdGuidRepro.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "HumanResources.Department", false -> __.``HumanResources.Department``.Read >> box
        | "HumanResources.Department", true -> __.``HumanResources.Department``.ReadIfNotNull >> box
        | "HumanResources.Employee", false -> __.``HumanResources.Employee``.Read >> box
        | "HumanResources.Employee", true -> __.``HumanResources.Employee``.ReadIfNotNull >> box
        | "HumanResources.EmployeeDepartmentHistory", false -> __.``HumanResources.EmployeeDepartmentHistory``.Read >> box
        | "HumanResources.EmployeeDepartmentHistory", true -> __.``HumanResources.EmployeeDepartmentHistory``.ReadIfNotNull >> box
        | "HumanResources.EmployeePayHistory", false -> __.``HumanResources.EmployeePayHistory``.Read >> box
        | "HumanResources.EmployeePayHistory", true -> __.``HumanResources.EmployeePayHistory``.ReadIfNotNull >> box
        | "HumanResources.JobCandidate", false -> __.``HumanResources.JobCandidate``.Read >> box
        | "HumanResources.JobCandidate", true -> __.``HumanResources.JobCandidate``.ReadIfNotNull >> box
        | "HumanResources.Shift", false -> __.``HumanResources.Shift``.Read >> box
        | "HumanResources.Shift", true -> __.``HumanResources.Shift``.ReadIfNotNull >> box
        | "Person.Address", false -> __.``Person.Address``.Read >> box
        | "Person.Address", true -> __.``Person.Address``.ReadIfNotNull >> box
        | "Person.AddressType", false -> __.``Person.AddressType``.Read >> box
        | "Person.AddressType", true -> __.``Person.AddressType``.ReadIfNotNull >> box
        | "Person.BusinessEntity", false -> __.``Person.BusinessEntity``.Read >> box
        | "Person.BusinessEntity", true -> __.``Person.BusinessEntity``.ReadIfNotNull >> box
        | "Person.BusinessEntityAddress", false -> __.``Person.BusinessEntityAddress``.Read >> box
        | "Person.BusinessEntityAddress", true -> __.``Person.BusinessEntityAddress``.ReadIfNotNull >> box
        | "Person.BusinessEntityContact", false -> __.``Person.BusinessEntityContact``.Read >> box
        | "Person.BusinessEntityContact", true -> __.``Person.BusinessEntityContact``.ReadIfNotNull >> box
        | "Person.ContactType", false -> __.``Person.ContactType``.Read >> box
        | "Person.ContactType", true -> __.``Person.ContactType``.ReadIfNotNull >> box
        | "Person.CountryRegion", false -> __.``Person.CountryRegion``.Read >> box
        | "Person.CountryRegion", true -> __.``Person.CountryRegion``.ReadIfNotNull >> box
        | "Person.EmailAddress", false -> __.``Person.EmailAddress``.Read >> box
        | "Person.EmailAddress", true -> __.``Person.EmailAddress``.ReadIfNotNull >> box
        | "Person.Password", false -> __.``Person.Password``.Read >> box
        | "Person.Password", true -> __.``Person.Password``.ReadIfNotNull >> box
        | "Person.Person", false -> __.``Person.Person``.Read >> box
        | "Person.Person", true -> __.``Person.Person``.ReadIfNotNull >> box
        | "Person.PersonPhone", false -> __.``Person.PersonPhone``.Read >> box
        | "Person.PersonPhone", true -> __.``Person.PersonPhone``.ReadIfNotNull >> box
        | "Person.PhoneNumberType", false -> __.``Person.PhoneNumberType``.Read >> box
        | "Person.PhoneNumberType", true -> __.``Person.PhoneNumberType``.ReadIfNotNull >> box
        | "Person.StateProvince", false -> __.``Person.StateProvince``.Read >> box
        | "Person.StateProvince", true -> __.``Person.StateProvince``.ReadIfNotNull >> box
        | "Production.BillOfMaterials", false -> __.``Production.BillOfMaterials``.Read >> box
        | "Production.BillOfMaterials", true -> __.``Production.BillOfMaterials``.ReadIfNotNull >> box
        | "Production.Culture", false -> __.``Production.Culture``.Read >> box
        | "Production.Culture", true -> __.``Production.Culture``.ReadIfNotNull >> box
        | "Production.Document", false -> __.``Production.Document``.Read >> box
        | "Production.Document", true -> __.``Production.Document``.ReadIfNotNull >> box
        | "Production.Illustration", false -> __.``Production.Illustration``.Read >> box
        | "Production.Illustration", true -> __.``Production.Illustration``.ReadIfNotNull >> box
        | "Production.Location", false -> __.``Production.Location``.Read >> box
        | "Production.Location", true -> __.``Production.Location``.ReadIfNotNull >> box
        | "Production.Product", false -> __.``Production.Product``.Read >> box
        | "Production.Product", true -> __.``Production.Product``.ReadIfNotNull >> box
        | "Production.ProductCategory", false -> __.``Production.ProductCategory``.Read >> box
        | "Production.ProductCategory", true -> __.``Production.ProductCategory``.ReadIfNotNull >> box
        | "Production.ProductCostHistory", false -> __.``Production.ProductCostHistory``.Read >> box
        | "Production.ProductCostHistory", true -> __.``Production.ProductCostHistory``.ReadIfNotNull >> box
        | "Production.ProductDescription", false -> __.``Production.ProductDescription``.Read >> box
        | "Production.ProductDescription", true -> __.``Production.ProductDescription``.ReadIfNotNull >> box
        | "Production.ProductDocument", false -> __.``Production.ProductDocument``.Read >> box
        | "Production.ProductDocument", true -> __.``Production.ProductDocument``.ReadIfNotNull >> box
        | "Production.ProductInventory", false -> __.``Production.ProductInventory``.Read >> box
        | "Production.ProductInventory", true -> __.``Production.ProductInventory``.ReadIfNotNull >> box
        | "Production.ProductListPriceHistory", false -> __.``Production.ProductListPriceHistory``.Read >> box
        | "Production.ProductListPriceHistory", true -> __.``Production.ProductListPriceHistory``.ReadIfNotNull >> box
        | "Production.ProductModel", false -> __.``Production.ProductModel``.Read >> box
        | "Production.ProductModel", true -> __.``Production.ProductModel``.ReadIfNotNull >> box
        | "Production.ProductModelIllustration", false -> __.``Production.ProductModelIllustration``.Read >> box
        | "Production.ProductModelIllustration", true -> __.``Production.ProductModelIllustration``.ReadIfNotNull >> box
        | "Production.ProductModelProductDescriptionCulture", false -> __.``Production.ProductModelProductDescriptionCulture``.Read >> box
        | "Production.ProductModelProductDescriptionCulture", true -> __.``Production.ProductModelProductDescriptionCulture``.ReadIfNotNull >> box
        | "Production.ProductPhoto", false -> __.``Production.ProductPhoto``.Read >> box
        | "Production.ProductPhoto", true -> __.``Production.ProductPhoto``.ReadIfNotNull >> box
        | "Production.ProductProductPhoto", false -> __.``Production.ProductProductPhoto``.Read >> box
        | "Production.ProductProductPhoto", true -> __.``Production.ProductProductPhoto``.ReadIfNotNull >> box
        | "Production.ProductReview", false -> __.``Production.ProductReview``.Read >> box
        | "Production.ProductReview", true -> __.``Production.ProductReview``.ReadIfNotNull >> box
        | "Production.ProductSubcategory", false -> __.``Production.ProductSubcategory``.Read >> box
        | "Production.ProductSubcategory", true -> __.``Production.ProductSubcategory``.ReadIfNotNull >> box
        | "Production.ScrapReason", false -> __.``Production.ScrapReason``.Read >> box
        | "Production.ScrapReason", true -> __.``Production.ScrapReason``.ReadIfNotNull >> box
        | "Production.TransactionHistory", false -> __.``Production.TransactionHistory``.Read >> box
        | "Production.TransactionHistory", true -> __.``Production.TransactionHistory``.ReadIfNotNull >> box
        | "Production.TransactionHistoryArchive", false -> __.``Production.TransactionHistoryArchive``.Read >> box
        | "Production.TransactionHistoryArchive", true -> __.``Production.TransactionHistoryArchive``.ReadIfNotNull >> box
        | "Production.UnitMeasure", false -> __.``Production.UnitMeasure``.Read >> box
        | "Production.UnitMeasure", true -> __.``Production.UnitMeasure``.ReadIfNotNull >> box
        | "Production.WorkOrder", false -> __.``Production.WorkOrder``.Read >> box
        | "Production.WorkOrder", true -> __.``Production.WorkOrder``.ReadIfNotNull >> box
        | "Production.WorkOrderRouting", false -> __.``Production.WorkOrderRouting``.Read >> box
        | "Production.WorkOrderRouting", true -> __.``Production.WorkOrderRouting``.ReadIfNotNull >> box
        | "Purchasing.ProductVendor", false -> __.``Purchasing.ProductVendor``.Read >> box
        | "Purchasing.ProductVendor", true -> __.``Purchasing.ProductVendor``.ReadIfNotNull >> box
        | "Purchasing.PurchaseOrderDetail", false -> __.``Purchasing.PurchaseOrderDetail``.Read >> box
        | "Purchasing.PurchaseOrderDetail", true -> __.``Purchasing.PurchaseOrderDetail``.ReadIfNotNull >> box
        | "Purchasing.PurchaseOrderHeader", false -> __.``Purchasing.PurchaseOrderHeader``.Read >> box
        | "Purchasing.PurchaseOrderHeader", true -> __.``Purchasing.PurchaseOrderHeader``.ReadIfNotNull >> box
        | "Purchasing.ShipMethod", false -> __.``Purchasing.ShipMethod``.Read >> box
        | "Purchasing.ShipMethod", true -> __.``Purchasing.ShipMethod``.ReadIfNotNull >> box
        | "Purchasing.Vendor", false -> __.``Purchasing.Vendor``.Read >> box
        | "Purchasing.Vendor", true -> __.``Purchasing.Vendor``.ReadIfNotNull >> box
        | "Sales.CountryRegionCurrency", false -> __.``Sales.CountryRegionCurrency``.Read >> box
        | "Sales.CountryRegionCurrency", true -> __.``Sales.CountryRegionCurrency``.ReadIfNotNull >> box
        | "Sales.CreditCard", false -> __.``Sales.CreditCard``.Read >> box
        | "Sales.CreditCard", true -> __.``Sales.CreditCard``.ReadIfNotNull >> box
        | "Sales.Currency", false -> __.``Sales.Currency``.Read >> box
        | "Sales.Currency", true -> __.``Sales.Currency``.ReadIfNotNull >> box
        | "Sales.CurrencyRate", false -> __.``Sales.CurrencyRate``.Read >> box
        | "Sales.CurrencyRate", true -> __.``Sales.CurrencyRate``.ReadIfNotNull >> box
        | "Sales.Customer", false -> __.``Sales.Customer``.Read >> box
        | "Sales.Customer", true -> __.``Sales.Customer``.ReadIfNotNull >> box
        | "Sales.PersonCreditCard", false -> __.``Sales.PersonCreditCard``.Read >> box
        | "Sales.PersonCreditCard", true -> __.``Sales.PersonCreditCard``.ReadIfNotNull >> box
        | "Sales.SalesOrderDetail", false -> __.``Sales.SalesOrderDetail``.Read >> box
        | "Sales.SalesOrderDetail", true -> __.``Sales.SalesOrderDetail``.ReadIfNotNull >> box
        | "Sales.SalesOrderHeader", false -> __.``Sales.SalesOrderHeader``.Read >> box
        | "Sales.SalesOrderHeader", true -> __.``Sales.SalesOrderHeader``.ReadIfNotNull >> box
        | "Sales.SalesOrderHeaderSalesReason", false -> __.``Sales.SalesOrderHeaderSalesReason``.Read >> box
        | "Sales.SalesOrderHeaderSalesReason", true -> __.``Sales.SalesOrderHeaderSalesReason``.ReadIfNotNull >> box
        | "Sales.SalesPerson", false -> __.``Sales.SalesPerson``.Read >> box
        | "Sales.SalesPerson", true -> __.``Sales.SalesPerson``.ReadIfNotNull >> box
        | "Sales.SalesPersonQuotaHistory", false -> __.``Sales.SalesPersonQuotaHistory``.Read >> box
        | "Sales.SalesPersonQuotaHistory", true -> __.``Sales.SalesPersonQuotaHistory``.ReadIfNotNull >> box
        | "Sales.SalesReason", false -> __.``Sales.SalesReason``.Read >> box
        | "Sales.SalesReason", true -> __.``Sales.SalesReason``.ReadIfNotNull >> box
        | "Sales.SalesTaxRate", false -> __.``Sales.SalesTaxRate``.Read >> box
        | "Sales.SalesTaxRate", true -> __.``Sales.SalesTaxRate``.ReadIfNotNull >> box
        | "Sales.SalesTerritory", false -> __.``Sales.SalesTerritory``.Read >> box
        | "Sales.SalesTerritory", true -> __.``Sales.SalesTerritory``.ReadIfNotNull >> box
        | "Sales.SalesTerritoryHistory", false -> __.``Sales.SalesTerritoryHistory``.Read >> box
        | "Sales.SalesTerritoryHistory", true -> __.``Sales.SalesTerritoryHistory``.ReadIfNotNull >> box
        | "Sales.ShoppingCartItem", false -> __.``Sales.ShoppingCartItem``.Read >> box
        | "Sales.ShoppingCartItem", true -> __.``Sales.ShoppingCartItem``.ReadIfNotNull >> box
        | "Sales.SpecialOffer", false -> __.``Sales.SpecialOffer``.Read >> box
        | "Sales.SpecialOffer", true -> __.``Sales.SpecialOffer``.ReadIfNotNull >> box
        | "Sales.SpecialOfferProduct", false -> __.``Sales.SpecialOfferProduct``.Read >> box
        | "Sales.SpecialOfferProduct", true -> __.``Sales.SpecialOfferProduct``.ReadIfNotNull >> box
        | "Sales.Store", false -> __.``Sales.Store``.Read >> box
        | "Sales.Store", true -> __.``Sales.Store``.ReadIfNotNull >> box
        | "dbo.AWBuildVersion", false -> __.``dbo.AWBuildVersion``.Read >> box
        | "dbo.AWBuildVersion", true -> __.``dbo.AWBuildVersion``.ReadIfNotNull >> box
        | "dbo.DatabaseLog", false -> __.``dbo.DatabaseLog``.Read >> box
        | "dbo.DatabaseLog", true -> __.``dbo.DatabaseLog``.ReadIfNotNull >> box
        | "dbo.ErrorLog", false -> __.``dbo.ErrorLog``.Read >> box
        | "dbo.ErrorLog", true -> __.``dbo.ErrorLog``.ReadIfNotNull >> box
        | "ext.DateTime2Support", false -> __.``ext.DateTime2Support``.Read >> box
        | "ext.DateTime2Support", true -> __.``ext.DateTime2Support``.ReadIfNotNull >> box
        | "ext.GetIdGuidRepro", false -> __.``ext.GetIdGuidRepro``.Read >> box
        | "ext.GetIdGuidRepro", true -> __.``ext.GetIdGuidRepro``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.SqlClient.SqlDataReader, isOpt: bool, isNullable: bool) =
        let wrapValue get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            elif isNullable then (if reader.IsDBNull ord then System.Nullable() else get ord |> System.Nullable) |> box
            else get ord |> box 

        let wrapRef get (ord: int) = 
            if isOpt then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box
        

        if t = typedefof<System.Guid> then Some(wrapValue reader.GetGuid)
        else if t = typedefof<bool> then Some(wrapValue reader.GetBoolean)
        else if t = typedefof<int> then Some(wrapValue reader.GetInt32)
        else if t = typedefof<int64> then Some(wrapValue reader.GetInt64)
        else if t = typedefof<int16> then Some(wrapValue reader.GetInt16)
        else if t = typedefof<byte> then Some(wrapValue reader.GetByte)
        else if t = typedefof<double> then Some(wrapValue reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrapValue reader.GetFloat)
        else if t = typedefof<decimal> then Some(wrapValue reader.GetDecimal)
        else if t = typedefof<string> then Some(wrapRef reader.GetString)
        else if t = typedefof<System.DateTimeOffset> then Some(wrapValue reader.GetDateTimeOffset)
        else if t = typedefof<System.DateOnly> then Some(wrapValue reader.GetDateOnly)
        else if t = typedefof<System.TimeOnly> then Some(wrapValue reader.GetTimeOnly)
        else if t = typedefof<System.DateTime> then Some(wrapValue reader.GetDateTime)
        else if t = typedefof<byte []> then Some(wrapRef reader.GetFieldValue<byte []>)
        else if t = typedefof<obj> then Some(wrapRef reader.GetFieldValue)
        else None

    static member Read(reader: Microsoft.Data.SqlClient.SqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt, isNullable = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> then t.GenericTypeArguments.[0], true, false
                elif t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<System.Nullable<_>> then t.GenericTypeArguments.[0], false, true
                else t, false, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt, isNullable) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
