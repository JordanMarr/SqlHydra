// This code was generated by `SqlHydra.SqlServer` -- v1.0.0.0.
namespace SqlServer.AdventureWorksNet6

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
[<AutoOpen>]        
module Utils =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
        
        

module HumanResources =
    [<CLIMutable>]
    type Department =
        { DepartmentID: int16
          Name: string
          GroupName: string
          ModifiedDate: System.DateTime }

    type DepartmentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.GroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "GroupName")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { DepartmentID = __.DepartmentID.Read()
              Name = __.Name.Read()
              GroupName = __.GroupName.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.DepartmentID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Employee =
        { BusinessEntityID: int
          NationalIDNumber: string
          LoginID: string
          OrganizationLevel: Option<int16>
          JobTitle: string
          BirthDate: System.DateOnly
          MaritalStatus: string
          Gender: string
          HireDate: System.DateOnly
          SalariedFlag: bool
          VacationHours: int16
          SickLeaveHours: int16
          CurrentFlag: bool
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type EmployeeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.NationalIDNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "NationalIDNumber")
        member __.LoginID = RequiredColumn(reader, getOrdinal, reader.GetString, "LoginID")
        member __.OrganizationLevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "OrganizationLevel")
        member __.JobTitle = RequiredColumn(reader, getOrdinal, reader.GetString, "JobTitle")
        member __.BirthDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "BirthDate")
        member __.MaritalStatus = RequiredColumn(reader, getOrdinal, reader.GetString, "MaritalStatus")
        member __.Gender = RequiredColumn(reader, getOrdinal, reader.GetString, "Gender")
        member __.HireDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "HireDate")
        member __.SalariedFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "SalariedFlag")
        member __.VacationHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "VacationHours")
        member __.SickLeaveHours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SickLeaveHours")
        member __.CurrentFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "CurrentFlag")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              NationalIDNumber = __.NationalIDNumber.Read()
              LoginID = __.LoginID.Read()
              OrganizationLevel = __.OrganizationLevel.Read()
              JobTitle = __.JobTitle.Read()
              BirthDate = __.BirthDate.Read()
              MaritalStatus = __.MaritalStatus.Read()
              Gender = __.Gender.Read()
              HireDate = __.HireDate.Read()
              SalariedFlag = __.SalariedFlag.Read()
              VacationHours = __.VacationHours.Read()
              SickLeaveHours = __.SickLeaveHours.Read()
              CurrentFlag = __.CurrentFlag.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type EmployeeDepartmentHistory =
        { BusinessEntityID: int
          DepartmentID: int16
          ShiftID: byte
          StartDate: System.DateOnly
          EndDate: Option<System.DateOnly>
          ModifiedDate: System.DateTime }

    type EmployeeDepartmentHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.DepartmentID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "DepartmentID")
        member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "EndDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              DepartmentID = __.DepartmentID.Read()
              ShiftID = __.ShiftID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type EmployeePayHistory =
        { BusinessEntityID: int
          RateChangeDate: System.DateTime
          Rate: decimal
          PayFrequency: byte
          ModifiedDate: System.DateTime }

    type EmployeePayHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.RateChangeDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "RateChangeDate")
        member __.Rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Rate")
        member __.PayFrequency = RequiredColumn(reader, getOrdinal, reader.GetByte, "PayFrequency")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              RateChangeDate = __.RateChangeDate.Read()
              Rate = __.Rate.Read()
              PayFrequency = __.PayFrequency.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type JobCandidate =
        { JobCandidateID: int
          BusinessEntityID: Option<int>
          ModifiedDate: System.DateTime }

    type JobCandidateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.JobCandidateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "JobCandidateID")
        member __.BusinessEntityID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { JobCandidateID = __.JobCandidateID.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.JobCandidateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Shift =
        { ShiftID: byte
          Name: string
          StartTime: System.TimeOnly
          EndTime: System.TimeOnly
          ModifiedDate: System.DateTime }

    type ShiftReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShiftID = RequiredColumn(reader, getOrdinal, reader.GetByte, "ShiftID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.StartTime = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "StartTime")
        member __.EndTime = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "EndTime")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ShiftID = __.ShiftID.Read()
              Name = __.Name.Read()
              StartTime = __.StartTime.Read()
              EndTime = __.EndTime.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShiftID.IsNull() then None else Some(__.Read())

module Person =
    [<CLIMutable>]
    type Address =
        { AddressID: int
          AddressLine1: string
          AddressLine2: Option<string>
          City: string
          StateProvinceID: int
          PostalCode: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type AddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
        member __.AddressLine1 = RequiredColumn(reader, getOrdinal, reader.GetString, "AddressLine1")
        member __.AddressLine2 = OptionalColumn(reader, getOrdinal, reader.GetString, "AddressLine2")
        member __.City = RequiredColumn(reader, getOrdinal, reader.GetString, "City")
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.PostalCode = RequiredColumn(reader, getOrdinal, reader.GetString, "PostalCode")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { AddressID = __.AddressID.Read()
              AddressLine1 = __.AddressLine1.Read()
              AddressLine2 = __.AddressLine2.Read()
              City = __.City.Read()
              StateProvinceID = __.StateProvinceID.Read()
              PostalCode = __.PostalCode.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.AddressID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AddressType =
        { AddressTypeID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type AddressTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { AddressTypeID = __.AddressTypeID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.AddressTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntity =
        { BusinessEntityID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntityAddress =
        { BusinessEntityID: int
          AddressID: int
          AddressTypeID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressID")
        member __.AddressTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AddressTypeID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              AddressID = __.AddressID.Read()
              AddressTypeID = __.AddressTypeID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type BusinessEntityContact =
        { BusinessEntityID: int
          PersonID: int
          ContactTypeID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type BusinessEntityContactReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PersonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
        member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PersonID = __.PersonID.Read()
              ContactTypeID = __.ContactTypeID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ContactType =
        { ContactTypeID: int
          Name: string
          ModifiedDate: System.DateTime }

    type ContactTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ContactTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ContactTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ContactTypeID = __.ContactTypeID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ContactTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CountryRegion =
        { CountryRegionCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type CountryRegionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CountryRegionCode = __.CountryRegionCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CountryRegionCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type EmailAddress =
        { BusinessEntityID: int
          EmailAddressID: int
          EmailAddress: Option<string>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type EmailAddressReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.EmailAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailAddressID")
        member __.EmailAddress = OptionalColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              EmailAddressID = __.EmailAddressID.Read()
              EmailAddress = __.EmailAddress.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Password =
        { BusinessEntityID: int
          PasswordHash: string
          PasswordSalt: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type PasswordReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PasswordHash = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordHash")
        member __.PasswordSalt = RequiredColumn(reader, getOrdinal, reader.GetString, "PasswordSalt")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PasswordHash = __.PasswordHash.Read()
              PasswordSalt = __.PasswordSalt.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Person =
        { BusinessEntityID: int
          PersonType: string
          NameStyle: bool
          Title: Option<string>
          FirstName: string
          MiddleName: Option<string>
          LastName: string
          Suffix: Option<string>
          EmailPromotion: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type PersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PersonType = RequiredColumn(reader, getOrdinal, reader.GetString, "PersonType")
        member __.NameStyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "NameStyle")
        member __.Title = OptionalColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.FirstName = RequiredColumn(reader, getOrdinal, reader.GetString, "FirstName")
        member __.MiddleName = OptionalColumn(reader, getOrdinal, reader.GetString, "MiddleName")
        member __.LastName = RequiredColumn(reader, getOrdinal, reader.GetString, "LastName")
        member __.Suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "Suffix")
        member __.EmailPromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmailPromotion")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PersonType = __.PersonType.Read()
              NameStyle = __.NameStyle.Read()
              Title = __.Title.Read()
              FirstName = __.FirstName.Read()
              MiddleName = __.MiddleName.Read()
              LastName = __.LastName.Read()
              Suffix = __.Suffix.Read()
              EmailPromotion = __.EmailPromotion.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PersonPhone =
        { BusinessEntityID: int
          PhoneNumber: string
          PhoneNumberTypeID: int
          ModifiedDate: System.DateTime }

    type PersonPhoneReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.PhoneNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "PhoneNumber")
        member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              PhoneNumber = __.PhoneNumber.Read()
              PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PhoneNumberType =
        { PhoneNumberTypeID: int
          Name: string
          ModifiedDate: System.DateTime }

    type PhoneNumberTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PhoneNumberTypeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PhoneNumberTypeID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { PhoneNumberTypeID = __.PhoneNumberTypeID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.PhoneNumberTypeID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type StateProvince =
        { StateProvinceID: int
          StateProvinceCode: string
          CountryRegionCode: string
          IsOnlyStateProvinceFlag: bool
          Name: string
          TerritoryID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type StateProvinceReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.StateProvinceCode = RequiredColumn(reader, getOrdinal, reader.GetString, "StateProvinceCode")
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.IsOnlyStateProvinceFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsOnlyStateProvinceFlag")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { StateProvinceID = __.StateProvinceID.Read()
              StateProvinceCode = __.StateProvinceCode.Read()
              CountryRegionCode = __.CountryRegionCode.Read()
              IsOnlyStateProvinceFlag = __.IsOnlyStateProvinceFlag.Read()
              Name = __.Name.Read()
              TerritoryID = __.TerritoryID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.StateProvinceID.IsNull() then None else Some(__.Read())

module Production =
    [<CLIMutable>]
    type BillOfMaterials =
        { BillOfMaterialsID: int
          ProductAssemblyID: Option<int>
          ComponentID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          UnitMeasureCode: string
          BOMLevel: int16
          PerAssemblyQty: decimal
          ModifiedDate: System.DateTime }

    type BillOfMaterialsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BillOfMaterialsID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillOfMaterialsID")
        member __.ProductAssemblyID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductAssemblyID")
        member __.ComponentID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ComponentID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.BOMLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "BOMLevel")
        member __.PerAssemblyQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PerAssemblyQty")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BillOfMaterialsID = __.BillOfMaterialsID.Read()
              ProductAssemblyID = __.ProductAssemblyID.Read()
              ComponentID = __.ComponentID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              UnitMeasureCode = __.UnitMeasureCode.Read()
              BOMLevel = __.BOMLevel.Read()
              PerAssemblyQty = __.PerAssemblyQty.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BillOfMaterialsID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Culture =
        { CultureID: string
          Name: string
          ModifiedDate: System.DateTime }

    type CultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CultureID = __.CultureID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CultureID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Document =
        { DocumentLevel: Option<int16>
          Title: string
          Owner: int
          FolderFlag: bool
          FileName: string
          FileExtension: string
          Revision: string
          ChangeNumber: int
          Status: byte
          DocumentSummary: Option<string>
          Document: Option<byte []>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type DocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DocumentLevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "DocumentLevel")
        member __.Title = RequiredColumn(reader, getOrdinal, reader.GetString, "Title")
        member __.Owner = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Owner")
        member __.FolderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FolderFlag")
        member __.FileName = RequiredColumn(reader, getOrdinal, reader.GetString, "FileName")
        member __.FileExtension = RequiredColumn(reader, getOrdinal, reader.GetString, "FileExtension")
        member __.Revision = RequiredColumn(reader, getOrdinal, reader.GetString, "Revision")
        member __.ChangeNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ChangeNumber")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.DocumentSummary = OptionalColumn(reader, getOrdinal, reader.GetString, "DocumentSummary")
        member __.Document = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "Document")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { DocumentLevel = __.DocumentLevel.Read()
              Title = __.Title.Read()
              Owner = __.Owner.Read()
              FolderFlag = __.FolderFlag.Read()
              FileName = __.FileName.Read()
              FileExtension = __.FileExtension.Read()
              Revision = __.Revision.Read()
              ChangeNumber = __.ChangeNumber.Read()
              Status = __.Status.Read()
              DocumentSummary = __.DocumentSummary.Read()
              Document = __.Document.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.Title.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Illustration =
        { IllustrationID: int
          ModifiedDate: System.DateTime }

    type IllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { IllustrationID = __.IllustrationID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.IllustrationID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Location =
        { LocationID: int16
          Name: string
          CostRate: decimal
          Availability: decimal
          ModifiedDate: System.DateTime }

    type LocationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CostRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostRate")
        member __.Availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Availability")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { LocationID = __.LocationID.Read()
              Name = __.Name.Read()
              CostRate = __.CostRate.Read()
              Availability = __.Availability.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.LocationID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Product =
        { ProductID: int
          Name: string
          ProductNumber: string
          MakeFlag: bool
          FinishedGoodsFlag: bool
          Color: Option<string>
          SafetyStockLevel: int16
          ReorderPoint: int16
          StandardCost: decimal
          ListPrice: decimal
          Size: Option<string>
          SizeUnitMeasureCode: Option<string>
          WeightUnitMeasureCode: Option<string>
          Weight: Option<decimal>
          DaysToManufacture: int
          ProductLine: Option<string>
          Class: Option<string>
          Style: Option<string>
          ProductSubcategoryID: Option<int>
          ProductModelID: Option<int>
          SellStartDate: System.DateTime
          SellEndDate: Option<System.DateTime>
          DiscontinuedDate: Option<System.DateTime>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ProductNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "ProductNumber")
        member __.MakeFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "MakeFlag")
        member __.FinishedGoodsFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "FinishedGoodsFlag")
        member __.Color = OptionalColumn(reader, getOrdinal, reader.GetString, "Color")
        member __.SafetyStockLevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "SafetyStockLevel")
        member __.ReorderPoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ReorderPoint")
        member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
        member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
        member __.Size = OptionalColumn(reader, getOrdinal, reader.GetString, "Size")
        member __.SizeUnitMeasureCode = OptionalColumn(reader, getOrdinal, reader.GetString, "SizeUnitMeasureCode")
        member __.WeightUnitMeasureCode = OptionalColumn(reader, getOrdinal, reader.GetString, "WeightUnitMeasureCode")
        member __.Weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "Weight")
        member __.DaysToManufacture = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DaysToManufacture")
        member __.ProductLine = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductLine")
        member __.Class = OptionalColumn(reader, getOrdinal, reader.GetString, "Class")
        member __.Style = OptionalColumn(reader, getOrdinal, reader.GetString, "Style")
        member __.ProductSubcategoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
        member __.ProductModelID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.SellStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "SellStartDate")
        member __.SellEndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SellEndDate")
        member __.DiscontinuedDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DiscontinuedDate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              Name = __.Name.Read()
              ProductNumber = __.ProductNumber.Read()
              MakeFlag = __.MakeFlag.Read()
              FinishedGoodsFlag = __.FinishedGoodsFlag.Read()
              Color = __.Color.Read()
              SafetyStockLevel = __.SafetyStockLevel.Read()
              ReorderPoint = __.ReorderPoint.Read()
              StandardCost = __.StandardCost.Read()
              ListPrice = __.ListPrice.Read()
              Size = __.Size.Read()
              SizeUnitMeasureCode = __.SizeUnitMeasureCode.Read()
              WeightUnitMeasureCode = __.WeightUnitMeasureCode.Read()
              Weight = __.Weight.Read()
              DaysToManufacture = __.DaysToManufacture.Read()
              ProductLine = __.ProductLine.Read()
              Class = __.Class.Read()
              Style = __.Style.Read()
              ProductSubcategoryID = __.ProductSubcategoryID.Read()
              ProductModelID = __.ProductModelID.Read()
              SellStartDate = __.SellStartDate.Read()
              SellEndDate = __.SellEndDate.Read()
              DiscontinuedDate = __.DiscontinuedDate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductCategory =
        { ProductCategoryID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductCategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductCategoryID = __.ProductCategoryID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductCategoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductCostHistory =
        { ProductID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          StandardCost: decimal
          ModifiedDate: System.DateTime }

    type ProductCostHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.StandardCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              StandardCost = __.StandardCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductDescription =
        { ProductDescriptionID: int
          Description: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductDescriptionID = __.ProductDescriptionID.Read()
              Description = __.Description.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductDescriptionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductDocument =
        { ProductID: int
          ModifiedDate: System.DateTime }

    type ProductDocumentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductInventory =
        { ProductID: int
          LocationID: int16
          Shelf: string
          Bin: byte
          Quantity: int16
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductInventoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.Shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "Shelf")
        member __.Bin = RequiredColumn(reader, getOrdinal, reader.GetByte, "Bin")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "Quantity")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              LocationID = __.LocationID.Read()
              Shelf = __.Shelf.Read()
              Bin = __.Bin.Read()
              Quantity = __.Quantity.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductListPriceHistory =
        { ProductID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          ListPrice: decimal
          ModifiedDate: System.DateTime }

    type ProductListPriceHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.ListPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ListPrice")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              ListPrice = __.ListPrice.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModel =
        { ProductModelID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductModelReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModelIllustration =
        { ProductModelID: int
          IllustrationID: int
          ModifiedDate: System.DateTime }

    type ProductModelIllustrationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.IllustrationID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "IllustrationID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              IllustrationID = __.IllustrationID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductModelProductDescriptionCulture =
        { ProductModelID: int
          ProductDescriptionID: int
          CultureID: string
          ModifiedDate: System.DateTime }

    type ProductModelProductDescriptionCultureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductModelID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductModelID")
        member __.ProductDescriptionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductDescriptionID")
        member __.CultureID = RequiredColumn(reader, getOrdinal, reader.GetString, "CultureID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductModelID = __.ProductModelID.Read()
              ProductDescriptionID = __.ProductDescriptionID.Read()
              CultureID = __.CultureID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductModelID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductPhoto =
        { ProductPhotoID: int
          ThumbNailPhoto: Option<byte []>
          ThumbnailPhotoFileName: Option<string>
          LargePhoto: Option<byte []>
          LargePhotoFileName: Option<string>
          ModifiedDate: System.DateTime }

    type ProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
        member __.ThumbNailPhoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "ThumbNailPhoto")
        member __.ThumbnailPhotoFileName = OptionalColumn(reader, getOrdinal, reader.GetString, "ThumbnailPhotoFileName")
        member __.LargePhoto = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "LargePhoto")
        member __.LargePhotoFileName = OptionalColumn(reader, getOrdinal, reader.GetString, "LargePhotoFileName")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductPhotoID = __.ProductPhotoID.Read()
              ThumbNailPhoto = __.ThumbNailPhoto.Read()
              ThumbnailPhotoFileName = __.ThumbnailPhotoFileName.Read()
              LargePhoto = __.LargePhoto.Read()
              LargePhotoFileName = __.LargePhotoFileName.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductPhotoID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductProductPhoto =
        { ProductID: int
          ProductPhotoID: int
          Primary: bool
          ModifiedDate: System.DateTime }

    type ProductProductPhotoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ProductPhotoID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductPhotoID")
        member __.Primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Primary")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              ProductPhotoID = __.ProductPhotoID.Read()
              Primary = __.Primary.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductReview =
        { ProductReviewID: int
          ProductID: int
          ReviewerName: string
          ReviewDate: System.DateTime
          EmailAddress: string
          Rating: int
          Comments: Option<string>
          ModifiedDate: System.DateTime }

    type ProductReviewReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductReviewID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductReviewID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReviewerName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReviewerName")
        member __.ReviewDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ReviewDate")
        member __.EmailAddress = RequiredColumn(reader, getOrdinal, reader.GetString, "EmailAddress")
        member __.Rating = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Rating")
        member __.Comments = OptionalColumn(reader, getOrdinal, reader.GetString, "Comments")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductReviewID = __.ProductReviewID.Read()
              ProductID = __.ProductID.Read()
              ReviewerName = __.ReviewerName.Read()
              ReviewDate = __.ReviewDate.Read()
              EmailAddress = __.EmailAddress.Read()
              Rating = __.Rating.Read()
              Comments = __.Comments.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductReviewID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ProductSubcategory =
        { ProductSubcategoryID: int
          ProductCategoryID: int
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ProductSubcategoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductSubcategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductSubcategoryID")
        member __.ProductCategoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductCategoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductSubcategoryID = __.ProductSubcategoryID.Read()
              ProductCategoryID = __.ProductCategoryID.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductSubcategoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScrapReason =
        { ScrapReasonID: int16
          Name: string
          ModifiedDate: System.DateTime }

    type ScrapReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ScrapReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ScrapReasonID = __.ScrapReasonID.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ScrapReasonID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type TransactionHistory =
        { TransactionID: int
          ProductID: int
          ReferenceOrderID: int
          ReferenceOrderLineID: int
          TransactionDate: System.DateTime
          TransactionType: string
          Quantity: int
          ActualCost: decimal
          ModifiedDate: System.DateTime }

    type TransactionHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
        member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
        member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
        member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { TransactionID = __.TransactionID.Read()
              ProductID = __.ProductID.Read()
              ReferenceOrderID = __.ReferenceOrderID.Read()
              ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
              TransactionDate = __.TransactionDate.Read()
              TransactionType = __.TransactionType.Read()
              Quantity = __.Quantity.Read()
              ActualCost = __.ActualCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TransactionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type TransactionHistoryArchive =
        { TransactionID: int
          ProductID: int
          ReferenceOrderID: int
          ReferenceOrderLineID: int
          TransactionDate: System.DateTime
          TransactionType: string
          Quantity: int
          ActualCost: decimal
          ModifiedDate: System.DateTime }

    type TransactionHistoryArchiveReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TransactionID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TransactionID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.ReferenceOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderID")
        member __.ReferenceOrderLineID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReferenceOrderLineID")
        member __.TransactionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "TransactionDate")
        member __.TransactionType = RequiredColumn(reader, getOrdinal, reader.GetString, "TransactionType")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ActualCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { TransactionID = __.TransactionID.Read()
              ProductID = __.ProductID.Read()
              ReferenceOrderID = __.ReferenceOrderID.Read()
              ReferenceOrderLineID = __.ReferenceOrderLineID.Read()
              TransactionDate = __.TransactionDate.Read()
              TransactionType = __.TransactionType.Read()
              Quantity = __.Quantity.Read()
              ActualCost = __.ActualCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TransactionID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type UnitMeasure =
        { UnitMeasureCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type UnitMeasureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { UnitMeasureCode = __.UnitMeasureCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.UnitMeasureCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type WorkOrder =
        { WorkOrderID: int
          ProductID: int
          OrderQty: int
          StockedQty: int
          ScrappedQty: int16
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          DueDate: System.DateTime
          ScrapReasonID: Option<int16>
          ModifiedDate: System.DateTime }

    type WorkOrderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "OrderQty")
        member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StockedQty")
        member __.ScrappedQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ScrappedQty")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.ScrapReasonID = OptionalColumn(reader, getOrdinal, reader.GetInt16, "ScrapReasonID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { WorkOrderID = __.WorkOrderID.Read()
              ProductID = __.ProductID.Read()
              OrderQty = __.OrderQty.Read()
              StockedQty = __.StockedQty.Read()
              ScrappedQty = __.ScrappedQty.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              DueDate = __.DueDate.Read()
              ScrapReasonID = __.ScrapReasonID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.WorkOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type WorkOrderRouting =
        { WorkOrderID: int
          ProductID: int
          OperationSequence: int16
          LocationID: int16
          ScheduledStartDate: System.DateTime
          ScheduledEndDate: System.DateTime
          ActualStartDate: Option<System.DateTime>
          ActualEndDate: Option<System.DateTime>
          ActualResourceHrs: Option<decimal>
          PlannedCost: decimal
          ActualCost: Option<decimal>
          ModifiedDate: System.DateTime }

    type WorkOrderRoutingReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.WorkOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "WorkOrderID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.OperationSequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OperationSequence")
        member __.LocationID = RequiredColumn(reader, getOrdinal, reader.GetInt16, "LocationID")
        member __.ScheduledStartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledStartDate")
        member __.ScheduledEndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ScheduledEndDate")
        member __.ActualStartDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ActualStartDate")
        member __.ActualEndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ActualEndDate")
        member __.ActualResourceHrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ActualResourceHrs")
        member __.PlannedCost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "PlannedCost")
        member __.ActualCost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "ActualCost")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { WorkOrderID = __.WorkOrderID.Read()
              ProductID = __.ProductID.Read()
              OperationSequence = __.OperationSequence.Read()
              LocationID = __.LocationID.Read()
              ScheduledStartDate = __.ScheduledStartDate.Read()
              ScheduledEndDate = __.ScheduledEndDate.Read()
              ActualStartDate = __.ActualStartDate.Read()
              ActualEndDate = __.ActualEndDate.Read()
              ActualResourceHrs = __.ActualResourceHrs.Read()
              PlannedCost = __.PlannedCost.Read()
              ActualCost = __.ActualCost.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.WorkOrderID.IsNull() then None else Some(__.Read())

module Purchasing =
    [<CLIMutable>]
    type ProductVendor =
        { ProductID: int
          BusinessEntityID: int
          AverageLeadTime: int
          StandardPrice: decimal
          LastReceiptCost: Option<decimal>
          LastReceiptDate: Option<System.DateTime>
          MinOrderQty: int
          MaxOrderQty: int
          OnOrderQty: Option<int>
          UnitMeasureCode: string
          ModifiedDate: System.DateTime }

    type ProductVendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AverageLeadTime = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AverageLeadTime")
        member __.StandardPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StandardPrice")
        member __.LastReceiptCost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "LastReceiptCost")
        member __.LastReceiptDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastReceiptDate")
        member __.MinOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinOrderQty")
        member __.MaxOrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MaxOrderQty")
        member __.OnOrderQty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "OnOrderQty")
        member __.UnitMeasureCode = RequiredColumn(reader, getOrdinal, reader.GetString, "UnitMeasureCode")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ProductID = __.ProductID.Read()
              BusinessEntityID = __.BusinessEntityID.Read()
              AverageLeadTime = __.AverageLeadTime.Read()
              StandardPrice = __.StandardPrice.Read()
              LastReceiptCost = __.LastReceiptCost.Read()
              LastReceiptDate = __.LastReceiptDate.Read()
              MinOrderQty = __.MinOrderQty.Read()
              MaxOrderQty = __.MaxOrderQty.Read()
              OnOrderQty = __.OnOrderQty.Read()
              UnitMeasureCode = __.UnitMeasureCode.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ProductID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PurchaseOrderDetail =
        { PurchaseOrderID: int
          PurchaseOrderDetailID: int
          DueDate: System.DateTime
          OrderQty: int16
          ProductID: int
          UnitPrice: decimal
          LineTotal: decimal
          ReceivedQty: decimal
          RejectedQty: decimal
          StockedQty: decimal
          ModifiedDate: System.DateTime }

    type PurchaseOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
        member __.PurchaseOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderDetailID")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
        member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
        member __.ReceivedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ReceivedQty")
        member __.RejectedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "RejectedQty")
        member __.StockedQty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "StockedQty")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { PurchaseOrderID = __.PurchaseOrderID.Read()
              PurchaseOrderDetailID = __.PurchaseOrderDetailID.Read()
              DueDate = __.DueDate.Read()
              OrderQty = __.OrderQty.Read()
              ProductID = __.ProductID.Read()
              UnitPrice = __.UnitPrice.Read()
              LineTotal = __.LineTotal.Read()
              ReceivedQty = __.ReceivedQty.Read()
              RejectedQty = __.RejectedQty.Read()
              StockedQty = __.StockedQty.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PurchaseOrderHeader =
        { PurchaseOrderID: int
          RevisionNumber: byte
          Status: byte
          EmployeeID: int
          VendorID: int
          ShipMethodID: int
          OrderDate: System.DateTime
          ShipDate: Option<System.DateTime>
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          ModifiedDate: System.DateTime }

    type PurchaseOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.PurchaseOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "PurchaseOrderID")
        member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.EmployeeID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EmployeeID")
        member __.VendorID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "VendorID")
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
        member __.ShipDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
        member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
        member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
        member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
        member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { PurchaseOrderID = __.PurchaseOrderID.Read()
              RevisionNumber = __.RevisionNumber.Read()
              Status = __.Status.Read()
              EmployeeID = __.EmployeeID.Read()
              VendorID = __.VendorID.Read()
              ShipMethodID = __.ShipMethodID.Read()
              OrderDate = __.OrderDate.Read()
              ShipDate = __.ShipDate.Read()
              SubTotal = __.SubTotal.Read()
              TaxAmt = __.TaxAmt.Read()
              Freight = __.Freight.Read()
              TotalDue = __.TotalDue.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.PurchaseOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ShipMethod =
        { ShipMethodID: int
          Name: string
          ShipBase: decimal
          ShipRate: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type ShipMethodReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ShipBase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipBase")
        member __.ShipRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "ShipRate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ShipMethodID = __.ShipMethodID.Read()
              Name = __.Name.Read()
              ShipBase = __.ShipBase.Read()
              ShipRate = __.ShipRate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShipMethodID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Vendor =
        { BusinessEntityID: int
          AccountNumber: string
          Name: string
          CreditRating: byte
          PreferredVendorStatus: bool
          ActiveFlag: bool
          PurchasingWebServiceURL: Option<string>
          ModifiedDate: System.DateTime }

    type VendorReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CreditRating = RequiredColumn(reader, getOrdinal, reader.GetByte, "CreditRating")
        member __.PreferredVendorStatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "PreferredVendorStatus")
        member __.ActiveFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "ActiveFlag")
        member __.PurchasingWebServiceURL = OptionalColumn(reader, getOrdinal, reader.GetString, "PurchasingWebServiceURL")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              AccountNumber = __.AccountNumber.Read()
              Name = __.Name.Read()
              CreditRating = __.CreditRating.Read()
              PreferredVendorStatus = __.PreferredVendorStatus.Read()
              ActiveFlag = __.ActiveFlag.Read()
              PurchasingWebServiceURL = __.PurchasingWebServiceURL.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module Sales =
    [<CLIMutable>]
    type CountryRegionCurrency =
        { CountryRegionCode: string
          CurrencyCode: string
          ModifiedDate: System.DateTime }

    type CountryRegionCurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CountryRegionCode = __.CountryRegionCode.Read()
              CurrencyCode = __.CurrencyCode.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CountryRegionCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CreditCard =
        { CreditCardID: int
          CardType: string
          CardNumber: string
          ExpMonth: byte
          ExpYear: int16
          ModifiedDate: System.DateTime }

    type CreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.CardType = RequiredColumn(reader, getOrdinal, reader.GetString, "CardType")
        member __.CardNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "CardNumber")
        member __.ExpMonth = RequiredColumn(reader, getOrdinal, reader.GetByte, "ExpMonth")
        member __.ExpYear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "ExpYear")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CreditCardID = __.CreditCardID.Read()
              CardType = __.CardType.Read()
              CardNumber = __.CardNumber.Read()
              ExpMonth = __.ExpMonth.Read()
              ExpYear = __.ExpYear.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CreditCardID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Currency =
        { CurrencyCode: string
          Name: string
          ModifiedDate: System.DateTime }

    type CurrencyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CurrencyCode")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CurrencyCode = __.CurrencyCode.Read()
              Name = __.Name.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CurrencyCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CurrencyRate =
        { CurrencyRateID: int
          CurrencyRateDate: System.DateTime
          FromCurrencyCode: string
          ToCurrencyCode: string
          AverageRate: decimal
          EndOfDayRate: decimal
          ModifiedDate: System.DateTime }

    type CurrencyRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CurrencyRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
        member __.CurrencyRateDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CurrencyRateDate")
        member __.FromCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "FromCurrencyCode")
        member __.ToCurrencyCode = RequiredColumn(reader, getOrdinal, reader.GetString, "ToCurrencyCode")
        member __.AverageRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "AverageRate")
        member __.EndOfDayRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "EndOfDayRate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CurrencyRateID = __.CurrencyRateID.Read()
              CurrencyRateDate = __.CurrencyRateDate.Read()
              FromCurrencyCode = __.FromCurrencyCode.Read()
              ToCurrencyCode = __.ToCurrencyCode.Read()
              AverageRate = __.AverageRate.Read()
              EndOfDayRate = __.EndOfDayRate.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CurrencyRateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Customer =
        { CustomerID: int
          PersonID: Option<int>
          StoreID: Option<int>
          TerritoryID: Option<int>
          AccountNumber: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type CustomerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
        member __.PersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "PersonID")
        member __.StoreID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "StoreID")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.AccountNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { CustomerID = __.CustomerID.Read()
              PersonID = __.PersonID.Read()
              StoreID = __.StoreID.Read()
              TerritoryID = __.TerritoryID.Read()
              AccountNumber = __.AccountNumber.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.CustomerID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PersonCreditCard =
        { BusinessEntityID: int
          CreditCardID: int
          ModifiedDate: System.DateTime }

    type PersonCreditCardReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.CreditCardID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              CreditCardID = __.CreditCardID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesOrderDetail =
        { SalesOrderID: int
          SalesOrderDetailID: int
          CarrierTrackingNumber: Option<string>
          OrderQty: int16
          ProductID: int
          SpecialOfferID: int
          UnitPrice: decimal
          UnitPriceDiscount: decimal
          LineTotal: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesOrderDetailReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.SalesOrderDetailID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderDetailID")
        member __.CarrierTrackingNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "CarrierTrackingNumber")
        member __.OrderQty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "OrderQty")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.UnitPrice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPrice")
        member __.UnitPriceDiscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "UnitPriceDiscount")
        member __.LineTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "LineTotal")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SalesOrderID = __.SalesOrderID.Read()
              SalesOrderDetailID = __.SalesOrderDetailID.Read()
              CarrierTrackingNumber = __.CarrierTrackingNumber.Read()
              OrderQty = __.OrderQty.Read()
              ProductID = __.ProductID.Read()
              SpecialOfferID = __.SpecialOfferID.Read()
              UnitPrice = __.UnitPrice.Read()
              UnitPriceDiscount = __.UnitPriceDiscount.Read()
              LineTotal = __.LineTotal.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesOrderHeader =
        { SalesOrderID: int
          RevisionNumber: byte
          OrderDate: System.DateTime
          DueDate: System.DateTime
          ShipDate: Option<System.DateTime>
          Status: byte
          OnlineOrderFlag: bool
          SalesOrderNumber: string
          PurchaseOrderNumber: Option<string>
          AccountNumber: Option<string>
          CustomerID: int
          SalesPersonID: Option<int>
          TerritoryID: Option<int>
          BillToAddressID: int
          ShipToAddressID: int
          ShipMethodID: int
          CreditCardID: Option<int>
          CreditCardApprovalCode: Option<string>
          CurrencyRateID: Option<int>
          SubTotal: decimal
          TaxAmt: decimal
          Freight: decimal
          TotalDue: decimal
          Comment: Option<string>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesOrderHeaderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.RevisionNumber = RequiredColumn(reader, getOrdinal, reader.GetByte, "RevisionNumber")
        member __.OrderDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "OrderDate")
        member __.DueDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DueDate")
        member __.ShipDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ShipDate")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetByte, "Status")
        member __.OnlineOrderFlag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "OnlineOrderFlag")
        member __.SalesOrderNumber = RequiredColumn(reader, getOrdinal, reader.GetString, "SalesOrderNumber")
        member __.PurchaseOrderNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "PurchaseOrderNumber")
        member __.AccountNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "AccountNumber")
        member __.CustomerID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CustomerID")
        member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.BillToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BillToAddressID")
        member __.ShipToAddressID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipToAddressID")
        member __.ShipMethodID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShipMethodID")
        member __.CreditCardID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "CreditCardID")
        member __.CreditCardApprovalCode = OptionalColumn(reader, getOrdinal, reader.GetString, "CreditCardApprovalCode")
        member __.CurrencyRateID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "CurrencyRateID")
        member __.SubTotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SubTotal")
        member __.TaxAmt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxAmt")
        member __.Freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Freight")
        member __.TotalDue = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TotalDue")
        member __.Comment = OptionalColumn(reader, getOrdinal, reader.GetString, "Comment")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SalesOrderID = __.SalesOrderID.Read()
              RevisionNumber = __.RevisionNumber.Read()
              OrderDate = __.OrderDate.Read()
              DueDate = __.DueDate.Read()
              ShipDate = __.ShipDate.Read()
              Status = __.Status.Read()
              OnlineOrderFlag = __.OnlineOrderFlag.Read()
              SalesOrderNumber = __.SalesOrderNumber.Read()
              PurchaseOrderNumber = __.PurchaseOrderNumber.Read()
              AccountNumber = __.AccountNumber.Read()
              CustomerID = __.CustomerID.Read()
              SalesPersonID = __.SalesPersonID.Read()
              TerritoryID = __.TerritoryID.Read()
              BillToAddressID = __.BillToAddressID.Read()
              ShipToAddressID = __.ShipToAddressID.Read()
              ShipMethodID = __.ShipMethodID.Read()
              CreditCardID = __.CreditCardID.Read()
              CreditCardApprovalCode = __.CreditCardApprovalCode.Read()
              CurrencyRateID = __.CurrencyRateID.Read()
              SubTotal = __.SubTotal.Read()
              TaxAmt = __.TaxAmt.Read()
              Freight = __.Freight.Read()
              TotalDue = __.TotalDue.Read()
              Comment = __.Comment.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesOrderHeaderSalesReason =
        { SalesOrderID: int
          SalesReasonID: int
          ModifiedDate: System.DateTime }

    type SalesOrderHeaderSalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesOrderID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesOrderID")
        member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SalesOrderID = __.SalesOrderID.Read()
              SalesReasonID = __.SalesReasonID.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesOrderID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesPerson =
        { BusinessEntityID: int
          TerritoryID: Option<int>
          SalesQuota: Option<decimal>
          Bonus: decimal
          CommissionPct: decimal
          SalesYTD: decimal
          SalesLastYear: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesPersonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.TerritoryID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.SalesQuota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
        member __.Bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "Bonus")
        member __.CommissionPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CommissionPct")
        member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
        member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              TerritoryID = __.TerritoryID.Read()
              SalesQuota = __.SalesQuota.Read()
              Bonus = __.Bonus.Read()
              CommissionPct = __.CommissionPct.Read()
              SalesYTD = __.SalesYTD.Read()
              SalesLastYear = __.SalesLastYear.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesPersonQuotaHistory =
        { BusinessEntityID: int
          QuotaDate: System.DateTime
          SalesQuota: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesPersonQuotaHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.QuotaDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "QuotaDate")
        member __.SalesQuota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesQuota")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              QuotaDate = __.QuotaDate.Read()
              SalesQuota = __.SalesQuota.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesReason =
        { SalesReasonID: int
          Name: string
          ReasonType: string
          ModifiedDate: System.DateTime }

    type SalesReasonReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesReasonID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesReasonID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ReasonType = RequiredColumn(reader, getOrdinal, reader.GetString, "ReasonType")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SalesReasonID = __.SalesReasonID.Read()
              Name = __.Name.Read()
              ReasonType = __.ReasonType.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesReasonID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTaxRate =
        { SalesTaxRateID: int
          StateProvinceID: int
          TaxType: byte
          TaxRate: decimal
          Name: string
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesTaxRateReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SalesTaxRateID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SalesTaxRateID")
        member __.StateProvinceID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "StateProvinceID")
        member __.TaxType = RequiredColumn(reader, getOrdinal, reader.GetByte, "TaxType")
        member __.TaxRate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "TaxRate")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SalesTaxRateID = __.SalesTaxRateID.Read()
              StateProvinceID = __.StateProvinceID.Read()
              TaxType = __.TaxType.Read()
              TaxRate = __.TaxRate.Read()
              Name = __.Name.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SalesTaxRateID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTerritory =
        { TerritoryID: int
          Name: string
          CountryRegionCode: string
          Group: string
          SalesYTD: decimal
          SalesLastYear: decimal
          CostYTD: decimal
          CostLastYear: decimal
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesTerritoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.CountryRegionCode = RequiredColumn(reader, getOrdinal, reader.GetString, "CountryRegionCode")
        member __.Group = RequiredColumn(reader, getOrdinal, reader.GetString, "Group")
        member __.SalesYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesYTD")
        member __.SalesLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "SalesLastYear")
        member __.CostYTD = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostYTD")
        member __.CostLastYear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "CostLastYear")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { TerritoryID = __.TerritoryID.Read()
              Name = __.Name.Read()
              CountryRegionCode = __.CountryRegionCode.Read()
              Group = __.Group.Read()
              SalesYTD = __.SalesYTD.Read()
              SalesLastYear = __.SalesLastYear.Read()
              CostYTD = __.CostYTD.Read()
              CostLastYear = __.CostLastYear.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.TerritoryID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SalesTerritoryHistory =
        { BusinessEntityID: int
          TerritoryID: int
          StartDate: System.DateTime
          EndDate: Option<System.DateTime>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SalesTerritoryHistoryReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.TerritoryID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TerritoryID")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              TerritoryID = __.TerritoryID.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ShoppingCartItem =
        { ShoppingCartItemID: int
          ShoppingCartID: string
          Quantity: int
          ProductID: int
          DateCreated: System.DateTime
          ModifiedDate: System.DateTime }

    type ShoppingCartItemReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ShoppingCartItemID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ShoppingCartItemID")
        member __.ShoppingCartID = RequiredColumn(reader, getOrdinal, reader.GetString, "ShoppingCartID")
        member __.Quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Quantity")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.DateCreated = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "DateCreated")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { ShoppingCartItemID = __.ShoppingCartItemID.Read()
              ShoppingCartID = __.ShoppingCartID.Read()
              Quantity = __.Quantity.Read()
              ProductID = __.ProductID.Read()
              DateCreated = __.DateCreated.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.ShoppingCartItemID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SpecialOffer =
        { SpecialOfferID: int
          Description: string
          DiscountPct: decimal
          Type: string
          Category: string
          StartDate: System.DateTime
          EndDate: System.DateTime
          MinQty: int
          MaxQty: Option<int>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SpecialOfferReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.DiscountPct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "DiscountPct")
        member __.Type = RequiredColumn(reader, getOrdinal, reader.GetString, "Type")
        member __.Category = RequiredColumn(reader, getOrdinal, reader.GetString, "Category")
        member __.StartDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "StartDate")
        member __.EndDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "EndDate")
        member __.MinQty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinQty")
        member __.MaxQty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "MaxQty")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SpecialOfferID = __.SpecialOfferID.Read()
              Description = __.Description.Read()
              DiscountPct = __.DiscountPct.Read()
              Type = __.Type.Read()
              Category = __.Category.Read()
              StartDate = __.StartDate.Read()
              EndDate = __.EndDate.Read()
              MinQty = __.MinQty.Read()
              MaxQty = __.MaxQty.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SpecialOfferID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SpecialOfferProduct =
        { SpecialOfferID: int
          ProductID: int
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type SpecialOfferProductReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SpecialOfferID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "SpecialOfferID")
        member __.ProductID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ProductID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SpecialOfferID = __.SpecialOfferID.Read()
              ProductID = __.ProductID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SpecialOfferID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Store =
        { BusinessEntityID: int
          Name: string
          SalesPersonID: Option<int>
          rowguid: System.Guid
          ModifiedDate: System.DateTime }

    type StoreReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.BusinessEntityID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BusinessEntityID")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
        member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { BusinessEntityID = __.BusinessEntityID.Read()
              Name = __.Name.Read()
              SalesPersonID = __.SalesPersonID.Read()
              rowguid = __.rowguid.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.BusinessEntityID.IsNull() then None else Some(__.Read())

module dbo =
    [<CLIMutable>]
    type AWBuildVersion =
        { SystemInformationID: byte
          ``Database Version``: string
          VersionDate: System.DateTime
          ModifiedDate: System.DateTime }

    type AWBuildVersionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SystemInformationID = RequiredColumn(reader, getOrdinal, reader.GetByte, "SystemInformationID")
        member __.``Database Version`` = RequiredColumn(reader, getOrdinal, reader.GetString, "Database Version")
        member __.VersionDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "VersionDate")
        member __.ModifiedDate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedDate")

        member __.Read() =
            { SystemInformationID = __.SystemInformationID.Read()
              ``Database Version`` = __.``Database Version``.Read()
              VersionDate = __.VersionDate.Read()
              ModifiedDate = __.ModifiedDate.Read() }

        member __.ReadIfNotNull() =
            if __.SystemInformationID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type DatabaseLog =
        { DatabaseLogID: int
          PostTime: System.DateTime
          DatabaseUser: string
          Event: string
          Schema: Option<string>
          Object: Option<string>
          TSQL: string }

    type DatabaseLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DatabaseLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DatabaseLogID")
        member __.PostTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "PostTime")
        member __.DatabaseUser = RequiredColumn(reader, getOrdinal, reader.GetString, "DatabaseUser")
        member __.Event = RequiredColumn(reader, getOrdinal, reader.GetString, "Event")
        member __.Schema = OptionalColumn(reader, getOrdinal, reader.GetString, "Schema")
        member __.Object = OptionalColumn(reader, getOrdinal, reader.GetString, "Object")
        member __.TSQL = RequiredColumn(reader, getOrdinal, reader.GetString, "TSQL")

        member __.Read() =
            { DatabaseLogID = __.DatabaseLogID.Read()
              PostTime = __.PostTime.Read()
              DatabaseUser = __.DatabaseUser.Read()
              Event = __.Event.Read()
              Schema = __.Schema.Read()
              Object = __.Object.Read()
              TSQL = __.TSQL.Read() }

        member __.ReadIfNotNull() =
            if __.DatabaseLogID.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ErrorLog =
        { ErrorLogID: int
          ErrorTime: System.DateTime
          UserName: string
          ErrorNumber: int
          ErrorSeverity: Option<int>
          ErrorState: Option<int>
          ErrorProcedure: Option<string>
          ErrorLine: Option<int>
          ErrorMessage: string }

    type ErrorLogReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ErrorLogID = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorLogID")
        member __.ErrorTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ErrorTime")
        member __.UserName = RequiredColumn(reader, getOrdinal, reader.GetString, "UserName")
        member __.ErrorNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ErrorNumber")
        member __.ErrorSeverity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorSeverity")
        member __.ErrorState = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorState")
        member __.ErrorProcedure = OptionalColumn(reader, getOrdinal, reader.GetString, "ErrorProcedure")
        member __.ErrorLine = OptionalColumn(reader, getOrdinal, reader.GetInt32, "ErrorLine")
        member __.ErrorMessage = RequiredColumn(reader, getOrdinal, reader.GetString, "ErrorMessage")

        member __.Read() =
            { ErrorLogID = __.ErrorLogID.Read()
              ErrorTime = __.ErrorTime.Read()
              UserName = __.UserName.Read()
              ErrorNumber = __.ErrorNumber.Read()
              ErrorSeverity = __.ErrorSeverity.Read()
              ErrorState = __.ErrorState.Read()
              ErrorProcedure = __.ErrorProcedure.Read()
              ErrorLine = __.ErrorLine.Read()
              ErrorMessage = __.ErrorMessage.Read() }

        member __.ReadIfNotNull() =
            if __.ErrorLogID.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyHumanResourcesDepartment = lazy (HumanResources.DepartmentReader(reader, buildGetOrdinal 4))
    let lazyHumanResourcesEmployee = lazy (HumanResources.EmployeeReader(reader, buildGetOrdinal 16))
    let lazyHumanResourcesEmployeeDepartmentHistory = lazy (HumanResources.EmployeeDepartmentHistoryReader(reader, buildGetOrdinal 6))
    let lazyHumanResourcesEmployeePayHistory = lazy (HumanResources.EmployeePayHistoryReader(reader, buildGetOrdinal 5))
    let lazyHumanResourcesJobCandidate = lazy (HumanResources.JobCandidateReader(reader, buildGetOrdinal 4))
    let lazyHumanResourcesShift = lazy (HumanResources.ShiftReader(reader, buildGetOrdinal 5))
    let lazyPersonAddress = lazy (Person.AddressReader(reader, buildGetOrdinal 9))
    let lazyPersonAddressType = lazy (Person.AddressTypeReader(reader, buildGetOrdinal 4))
    let lazyPersonBusinessEntity = lazy (Person.BusinessEntityReader(reader, buildGetOrdinal 3))
    let lazyPersonBusinessEntityAddress = lazy (Person.BusinessEntityAddressReader(reader, buildGetOrdinal 5))
    let lazyPersonBusinessEntityContact = lazy (Person.BusinessEntityContactReader(reader, buildGetOrdinal 5))
    let lazyPersonContactType = lazy (Person.ContactTypeReader(reader, buildGetOrdinal 3))
    let lazyPersonCountryRegion = lazy (Person.CountryRegionReader(reader, buildGetOrdinal 3))
    let lazyPersonEmailAddress = lazy (Person.EmailAddressReader(reader, buildGetOrdinal 5))
    let lazyPersonPassword = lazy (Person.PasswordReader(reader, buildGetOrdinal 5))
    let lazyPersonPerson = lazy (Person.PersonReader(reader, buildGetOrdinal 13))
    let lazyPersonPersonPhone = lazy (Person.PersonPhoneReader(reader, buildGetOrdinal 4))
    let lazyPersonPhoneNumberType = lazy (Person.PhoneNumberTypeReader(reader, buildGetOrdinal 3))
    let lazyPersonStateProvince = lazy (Person.StateProvinceReader(reader, buildGetOrdinal 8))
    let lazyProductionBillOfMaterials = lazy (Production.BillOfMaterialsReader(reader, buildGetOrdinal 9))
    let lazyProductionCulture = lazy (Production.CultureReader(reader, buildGetOrdinal 3))
    let lazyProductionDocument = lazy (Production.DocumentReader(reader, buildGetOrdinal 14))
    let lazyProductionIllustration = lazy (Production.IllustrationReader(reader, buildGetOrdinal 3))
    let lazyProductionLocation = lazy (Production.LocationReader(reader, buildGetOrdinal 5))
    let lazyProductionProduct = lazy (Production.ProductReader(reader, buildGetOrdinal 25))
    let lazyProductionProductCategory = lazy (Production.ProductCategoryReader(reader, buildGetOrdinal 4))
    let lazyProductionProductCostHistory = lazy (Production.ProductCostHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductionProductDescription = lazy (Production.ProductDescriptionReader(reader, buildGetOrdinal 4))
    let lazyProductionProductDocument = lazy (Production.ProductDocumentReader(reader, buildGetOrdinal 3))
    let lazyProductionProductInventory = lazy (Production.ProductInventoryReader(reader, buildGetOrdinal 7))
    let lazyProductionProductListPriceHistory = lazy (Production.ProductListPriceHistoryReader(reader, buildGetOrdinal 5))
    let lazyProductionProductModel = lazy (Production.ProductModelReader(reader, buildGetOrdinal 6))
    let lazyProductionProductModelIllustration = lazy (Production.ProductModelIllustrationReader(reader, buildGetOrdinal 3))
    let lazyProductionProductModelProductDescriptionCulture = lazy (Production.ProductModelProductDescriptionCultureReader(reader, buildGetOrdinal 4))
    let lazyProductionProductPhoto = lazy (Production.ProductPhotoReader(reader, buildGetOrdinal 6))
    let lazyProductionProductProductPhoto = lazy (Production.ProductProductPhotoReader(reader, buildGetOrdinal 4))
    let lazyProductionProductReview = lazy (Production.ProductReviewReader(reader, buildGetOrdinal 8))
    let lazyProductionProductSubcategory = lazy (Production.ProductSubcategoryReader(reader, buildGetOrdinal 5))
    let lazyProductionScrapReason = lazy (Production.ScrapReasonReader(reader, buildGetOrdinal 3))
    let lazyProductionTransactionHistory = lazy (Production.TransactionHistoryReader(reader, buildGetOrdinal 9))
    let lazyProductionTransactionHistoryArchive = lazy (Production.TransactionHistoryArchiveReader(reader, buildGetOrdinal 9))
    let lazyProductionUnitMeasure = lazy (Production.UnitMeasureReader(reader, buildGetOrdinal 3))
    let lazyProductionWorkOrder = lazy (Production.WorkOrderReader(reader, buildGetOrdinal 10))
    let lazyProductionWorkOrderRouting = lazy (Production.WorkOrderRoutingReader(reader, buildGetOrdinal 12))
    let lazyPurchasingProductVendor = lazy (Purchasing.ProductVendorReader(reader, buildGetOrdinal 11))
    let lazyPurchasingPurchaseOrderDetail = lazy (Purchasing.PurchaseOrderDetailReader(reader, buildGetOrdinal 11))
    let lazyPurchasingPurchaseOrderHeader = lazy (Purchasing.PurchaseOrderHeaderReader(reader, buildGetOrdinal 13))
    let lazyPurchasingShipMethod = lazy (Purchasing.ShipMethodReader(reader, buildGetOrdinal 6))
    let lazyPurchasingVendor = lazy (Purchasing.VendorReader(reader, buildGetOrdinal 8))
    let lazySalesCountryRegionCurrency = lazy (Sales.CountryRegionCurrencyReader(reader, buildGetOrdinal 3))
    let lazySalesCreditCard = lazy (Sales.CreditCardReader(reader, buildGetOrdinal 6))
    let lazySalesCurrency = lazy (Sales.CurrencyReader(reader, buildGetOrdinal 3))
    let lazySalesCurrencyRate = lazy (Sales.CurrencyRateReader(reader, buildGetOrdinal 7))
    let lazySalesCustomer = lazy (Sales.CustomerReader(reader, buildGetOrdinal 7))
    let lazySalesPersonCreditCard = lazy (Sales.PersonCreditCardReader(reader, buildGetOrdinal 3))
    let lazySalesSalesOrderDetail = lazy (Sales.SalesOrderDetailReader(reader, buildGetOrdinal 11))
    let lazySalesSalesOrderHeader = lazy (Sales.SalesOrderHeaderReader(reader, buildGetOrdinal 26))
    let lazySalesSalesOrderHeaderSalesReason = lazy (Sales.SalesOrderHeaderSalesReasonReader(reader, buildGetOrdinal 3))
    let lazySalesSalesPerson = lazy (Sales.SalesPersonReader(reader, buildGetOrdinal 9))
    let lazySalesSalesPersonQuotaHistory = lazy (Sales.SalesPersonQuotaHistoryReader(reader, buildGetOrdinal 5))
    let lazySalesSalesReason = lazy (Sales.SalesReasonReader(reader, buildGetOrdinal 4))
    let lazySalesSalesTaxRate = lazy (Sales.SalesTaxRateReader(reader, buildGetOrdinal 7))
    let lazySalesSalesTerritory = lazy (Sales.SalesTerritoryReader(reader, buildGetOrdinal 10))
    let lazySalesSalesTerritoryHistory = lazy (Sales.SalesTerritoryHistoryReader(reader, buildGetOrdinal 6))
    let lazySalesShoppingCartItem = lazy (Sales.ShoppingCartItemReader(reader, buildGetOrdinal 6))
    let lazySalesSpecialOffer = lazy (Sales.SpecialOfferReader(reader, buildGetOrdinal 11))
    let lazySalesSpecialOfferProduct = lazy (Sales.SpecialOfferProductReader(reader, buildGetOrdinal 4))
    let lazySalesStore = lazy (Sales.StoreReader(reader, buildGetOrdinal 6))
    let lazydboAWBuildVersion = lazy (dbo.AWBuildVersionReader(reader, buildGetOrdinal 4))
    let lazydboDatabaseLog = lazy (dbo.DatabaseLogReader(reader, buildGetOrdinal 8))
    let lazydboErrorLog = lazy (dbo.ErrorLogReader(reader, buildGetOrdinal 9))
    member __.``HumanResources.Department`` = lazyHumanResourcesDepartment.Value
    member __.``HumanResources.Employee`` = lazyHumanResourcesEmployee.Value
    member __.``HumanResources.EmployeeDepartmentHistory`` = lazyHumanResourcesEmployeeDepartmentHistory.Value
    member __.``HumanResources.EmployeePayHistory`` = lazyHumanResourcesEmployeePayHistory.Value
    member __.``HumanResources.JobCandidate`` = lazyHumanResourcesJobCandidate.Value
    member __.``HumanResources.Shift`` = lazyHumanResourcesShift.Value
    member __.``Person.Address`` = lazyPersonAddress.Value
    member __.``Person.AddressType`` = lazyPersonAddressType.Value
    member __.``Person.BusinessEntity`` = lazyPersonBusinessEntity.Value
    member __.``Person.BusinessEntityAddress`` = lazyPersonBusinessEntityAddress.Value
    member __.``Person.BusinessEntityContact`` = lazyPersonBusinessEntityContact.Value
    member __.``Person.ContactType`` = lazyPersonContactType.Value
    member __.``Person.CountryRegion`` = lazyPersonCountryRegion.Value
    member __.``Person.EmailAddress`` = lazyPersonEmailAddress.Value
    member __.``Person.Password`` = lazyPersonPassword.Value
    member __.``Person.Person`` = lazyPersonPerson.Value
    member __.``Person.PersonPhone`` = lazyPersonPersonPhone.Value
    member __.``Person.PhoneNumberType`` = lazyPersonPhoneNumberType.Value
    member __.``Person.StateProvince`` = lazyPersonStateProvince.Value
    member __.``Production.BillOfMaterials`` = lazyProductionBillOfMaterials.Value
    member __.``Production.Culture`` = lazyProductionCulture.Value
    member __.``Production.Document`` = lazyProductionDocument.Value
    member __.``Production.Illustration`` = lazyProductionIllustration.Value
    member __.``Production.Location`` = lazyProductionLocation.Value
    member __.``Production.Product`` = lazyProductionProduct.Value
    member __.``Production.ProductCategory`` = lazyProductionProductCategory.Value
    member __.``Production.ProductCostHistory`` = lazyProductionProductCostHistory.Value
    member __.``Production.ProductDescription`` = lazyProductionProductDescription.Value
    member __.``Production.ProductDocument`` = lazyProductionProductDocument.Value
    member __.``Production.ProductInventory`` = lazyProductionProductInventory.Value
    member __.``Production.ProductListPriceHistory`` = lazyProductionProductListPriceHistory.Value
    member __.``Production.ProductModel`` = lazyProductionProductModel.Value
    member __.``Production.ProductModelIllustration`` = lazyProductionProductModelIllustration.Value
    member __.``Production.ProductModelProductDescriptionCulture`` = lazyProductionProductModelProductDescriptionCulture.Value
    member __.``Production.ProductPhoto`` = lazyProductionProductPhoto.Value
    member __.``Production.ProductProductPhoto`` = lazyProductionProductProductPhoto.Value
    member __.``Production.ProductReview`` = lazyProductionProductReview.Value
    member __.``Production.ProductSubcategory`` = lazyProductionProductSubcategory.Value
    member __.``Production.ScrapReason`` = lazyProductionScrapReason.Value
    member __.``Production.TransactionHistory`` = lazyProductionTransactionHistory.Value
    member __.``Production.TransactionHistoryArchive`` = lazyProductionTransactionHistoryArchive.Value
    member __.``Production.UnitMeasure`` = lazyProductionUnitMeasure.Value
    member __.``Production.WorkOrder`` = lazyProductionWorkOrder.Value
    member __.``Production.WorkOrderRouting`` = lazyProductionWorkOrderRouting.Value
    member __.``Purchasing.ProductVendor`` = lazyPurchasingProductVendor.Value
    member __.``Purchasing.PurchaseOrderDetail`` = lazyPurchasingPurchaseOrderDetail.Value
    member __.``Purchasing.PurchaseOrderHeader`` = lazyPurchasingPurchaseOrderHeader.Value
    member __.``Purchasing.ShipMethod`` = lazyPurchasingShipMethod.Value
    member __.``Purchasing.Vendor`` = lazyPurchasingVendor.Value
    member __.``Sales.CountryRegionCurrency`` = lazySalesCountryRegionCurrency.Value
    member __.``Sales.CreditCard`` = lazySalesCreditCard.Value
    member __.``Sales.Currency`` = lazySalesCurrency.Value
    member __.``Sales.CurrencyRate`` = lazySalesCurrencyRate.Value
    member __.``Sales.Customer`` = lazySalesCustomer.Value
    member __.``Sales.PersonCreditCard`` = lazySalesPersonCreditCard.Value
    member __.``Sales.SalesOrderDetail`` = lazySalesSalesOrderDetail.Value
    member __.``Sales.SalesOrderHeader`` = lazySalesSalesOrderHeader.Value
    member __.``Sales.SalesOrderHeaderSalesReason`` = lazySalesSalesOrderHeaderSalesReason.Value
    member __.``Sales.SalesPerson`` = lazySalesSalesPerson.Value
    member __.``Sales.SalesPersonQuotaHistory`` = lazySalesSalesPersonQuotaHistory.Value
    member __.``Sales.SalesReason`` = lazySalesSalesReason.Value
    member __.``Sales.SalesTaxRate`` = lazySalesSalesTaxRate.Value
    member __.``Sales.SalesTerritory`` = lazySalesSalesTerritory.Value
    member __.``Sales.SalesTerritoryHistory`` = lazySalesSalesTerritoryHistory.Value
    member __.``Sales.ShoppingCartItem`` = lazySalesShoppingCartItem.Value
    member __.``Sales.SpecialOffer`` = lazySalesSpecialOffer.Value
    member __.``Sales.SpecialOfferProduct`` = lazySalesSpecialOfferProduct.Value
    member __.``Sales.Store`` = lazySalesStore.Value
    member __.``dbo.AWBuildVersion`` = lazydboAWBuildVersion.Value
    member __.``dbo.DatabaseLog`` = lazydboDatabaseLog.Value
    member __.``dbo.ErrorLog`` = lazydboErrorLog.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "HumanResources.Department", false -> __.``HumanResources.Department``.Read >> box
        | "HumanResources.Department", true -> __.``HumanResources.Department``.ReadIfNotNull >> box
        | "HumanResources.Employee", false -> __.``HumanResources.Employee``.Read >> box
        | "HumanResources.Employee", true -> __.``HumanResources.Employee``.ReadIfNotNull >> box
        | "HumanResources.EmployeeDepartmentHistory", false -> __.``HumanResources.EmployeeDepartmentHistory``.Read >> box
        | "HumanResources.EmployeeDepartmentHistory", true -> __.``HumanResources.EmployeeDepartmentHistory``.ReadIfNotNull >> box
        | "HumanResources.EmployeePayHistory", false -> __.``HumanResources.EmployeePayHistory``.Read >> box
        | "HumanResources.EmployeePayHistory", true -> __.``HumanResources.EmployeePayHistory``.ReadIfNotNull >> box
        | "HumanResources.JobCandidate", false -> __.``HumanResources.JobCandidate``.Read >> box
        | "HumanResources.JobCandidate", true -> __.``HumanResources.JobCandidate``.ReadIfNotNull >> box
        | "HumanResources.Shift", false -> __.``HumanResources.Shift``.Read >> box
        | "HumanResources.Shift", true -> __.``HumanResources.Shift``.ReadIfNotNull >> box
        | "Person.Address", false -> __.``Person.Address``.Read >> box
        | "Person.Address", true -> __.``Person.Address``.ReadIfNotNull >> box
        | "Person.AddressType", false -> __.``Person.AddressType``.Read >> box
        | "Person.AddressType", true -> __.``Person.AddressType``.ReadIfNotNull >> box
        | "Person.BusinessEntity", false -> __.``Person.BusinessEntity``.Read >> box
        | "Person.BusinessEntity", true -> __.``Person.BusinessEntity``.ReadIfNotNull >> box
        | "Person.BusinessEntityAddress", false -> __.``Person.BusinessEntityAddress``.Read >> box
        | "Person.BusinessEntityAddress", true -> __.``Person.BusinessEntityAddress``.ReadIfNotNull >> box
        | "Person.BusinessEntityContact", false -> __.``Person.BusinessEntityContact``.Read >> box
        | "Person.BusinessEntityContact", true -> __.``Person.BusinessEntityContact``.ReadIfNotNull >> box
        | "Person.ContactType", false -> __.``Person.ContactType``.Read >> box
        | "Person.ContactType", true -> __.``Person.ContactType``.ReadIfNotNull >> box
        | "Person.CountryRegion", false -> __.``Person.CountryRegion``.Read >> box
        | "Person.CountryRegion", true -> __.``Person.CountryRegion``.ReadIfNotNull >> box
        | "Person.EmailAddress", false -> __.``Person.EmailAddress``.Read >> box
        | "Person.EmailAddress", true -> __.``Person.EmailAddress``.ReadIfNotNull >> box
        | "Person.Password", false -> __.``Person.Password``.Read >> box
        | "Person.Password", true -> __.``Person.Password``.ReadIfNotNull >> box
        | "Person.Person", false -> __.``Person.Person``.Read >> box
        | "Person.Person", true -> __.``Person.Person``.ReadIfNotNull >> box
        | "Person.PersonPhone", false -> __.``Person.PersonPhone``.Read >> box
        | "Person.PersonPhone", true -> __.``Person.PersonPhone``.ReadIfNotNull >> box
        | "Person.PhoneNumberType", false -> __.``Person.PhoneNumberType``.Read >> box
        | "Person.PhoneNumberType", true -> __.``Person.PhoneNumberType``.ReadIfNotNull >> box
        | "Person.StateProvince", false -> __.``Person.StateProvince``.Read >> box
        | "Person.StateProvince", true -> __.``Person.StateProvince``.ReadIfNotNull >> box
        | "Production.BillOfMaterials", false -> __.``Production.BillOfMaterials``.Read >> box
        | "Production.BillOfMaterials", true -> __.``Production.BillOfMaterials``.ReadIfNotNull >> box
        | "Production.Culture", false -> __.``Production.Culture``.Read >> box
        | "Production.Culture", true -> __.``Production.Culture``.ReadIfNotNull >> box
        | "Production.Document", false -> __.``Production.Document``.Read >> box
        | "Production.Document", true -> __.``Production.Document``.ReadIfNotNull >> box
        | "Production.Illustration", false -> __.``Production.Illustration``.Read >> box
        | "Production.Illustration", true -> __.``Production.Illustration``.ReadIfNotNull >> box
        | "Production.Location", false -> __.``Production.Location``.Read >> box
        | "Production.Location", true -> __.``Production.Location``.ReadIfNotNull >> box
        | "Production.Product", false -> __.``Production.Product``.Read >> box
        | "Production.Product", true -> __.``Production.Product``.ReadIfNotNull >> box
        | "Production.ProductCategory", false -> __.``Production.ProductCategory``.Read >> box
        | "Production.ProductCategory", true -> __.``Production.ProductCategory``.ReadIfNotNull >> box
        | "Production.ProductCostHistory", false -> __.``Production.ProductCostHistory``.Read >> box
        | "Production.ProductCostHistory", true -> __.``Production.ProductCostHistory``.ReadIfNotNull >> box
        | "Production.ProductDescription", false -> __.``Production.ProductDescription``.Read >> box
        | "Production.ProductDescription", true -> __.``Production.ProductDescription``.ReadIfNotNull >> box
        | "Production.ProductDocument", false -> __.``Production.ProductDocument``.Read >> box
        | "Production.ProductDocument", true -> __.``Production.ProductDocument``.ReadIfNotNull >> box
        | "Production.ProductInventory", false -> __.``Production.ProductInventory``.Read >> box
        | "Production.ProductInventory", true -> __.``Production.ProductInventory``.ReadIfNotNull >> box
        | "Production.ProductListPriceHistory", false -> __.``Production.ProductListPriceHistory``.Read >> box
        | "Production.ProductListPriceHistory", true -> __.``Production.ProductListPriceHistory``.ReadIfNotNull >> box
        | "Production.ProductModel", false -> __.``Production.ProductModel``.Read >> box
        | "Production.ProductModel", true -> __.``Production.ProductModel``.ReadIfNotNull >> box
        | "Production.ProductModelIllustration", false -> __.``Production.ProductModelIllustration``.Read >> box
        | "Production.ProductModelIllustration", true -> __.``Production.ProductModelIllustration``.ReadIfNotNull >> box
        | "Production.ProductModelProductDescriptionCulture", false -> __.``Production.ProductModelProductDescriptionCulture``.Read >> box
        | "Production.ProductModelProductDescriptionCulture", true -> __.``Production.ProductModelProductDescriptionCulture``.ReadIfNotNull >> box
        | "Production.ProductPhoto", false -> __.``Production.ProductPhoto``.Read >> box
        | "Production.ProductPhoto", true -> __.``Production.ProductPhoto``.ReadIfNotNull >> box
        | "Production.ProductProductPhoto", false -> __.``Production.ProductProductPhoto``.Read >> box
        | "Production.ProductProductPhoto", true -> __.``Production.ProductProductPhoto``.ReadIfNotNull >> box
        | "Production.ProductReview", false -> __.``Production.ProductReview``.Read >> box
        | "Production.ProductReview", true -> __.``Production.ProductReview``.ReadIfNotNull >> box
        | "Production.ProductSubcategory", false -> __.``Production.ProductSubcategory``.Read >> box
        | "Production.ProductSubcategory", true -> __.``Production.ProductSubcategory``.ReadIfNotNull >> box
        | "Production.ScrapReason", false -> __.``Production.ScrapReason``.Read >> box
        | "Production.ScrapReason", true -> __.``Production.ScrapReason``.ReadIfNotNull >> box
        | "Production.TransactionHistory", false -> __.``Production.TransactionHistory``.Read >> box
        | "Production.TransactionHistory", true -> __.``Production.TransactionHistory``.ReadIfNotNull >> box
        | "Production.TransactionHistoryArchive", false -> __.``Production.TransactionHistoryArchive``.Read >> box
        | "Production.TransactionHistoryArchive", true -> __.``Production.TransactionHistoryArchive``.ReadIfNotNull >> box
        | "Production.UnitMeasure", false -> __.``Production.UnitMeasure``.Read >> box
        | "Production.UnitMeasure", true -> __.``Production.UnitMeasure``.ReadIfNotNull >> box
        | "Production.WorkOrder", false -> __.``Production.WorkOrder``.Read >> box
        | "Production.WorkOrder", true -> __.``Production.WorkOrder``.ReadIfNotNull >> box
        | "Production.WorkOrderRouting", false -> __.``Production.WorkOrderRouting``.Read >> box
        | "Production.WorkOrderRouting", true -> __.``Production.WorkOrderRouting``.ReadIfNotNull >> box
        | "Purchasing.ProductVendor", false -> __.``Purchasing.ProductVendor``.Read >> box
        | "Purchasing.ProductVendor", true -> __.``Purchasing.ProductVendor``.ReadIfNotNull >> box
        | "Purchasing.PurchaseOrderDetail", false -> __.``Purchasing.PurchaseOrderDetail``.Read >> box
        | "Purchasing.PurchaseOrderDetail", true -> __.``Purchasing.PurchaseOrderDetail``.ReadIfNotNull >> box
        | "Purchasing.PurchaseOrderHeader", false -> __.``Purchasing.PurchaseOrderHeader``.Read >> box
        | "Purchasing.PurchaseOrderHeader", true -> __.``Purchasing.PurchaseOrderHeader``.ReadIfNotNull >> box
        | "Purchasing.ShipMethod", false -> __.``Purchasing.ShipMethod``.Read >> box
        | "Purchasing.ShipMethod", true -> __.``Purchasing.ShipMethod``.ReadIfNotNull >> box
        | "Purchasing.Vendor", false -> __.``Purchasing.Vendor``.Read >> box
        | "Purchasing.Vendor", true -> __.``Purchasing.Vendor``.ReadIfNotNull >> box
        | "Sales.CountryRegionCurrency", false -> __.``Sales.CountryRegionCurrency``.Read >> box
        | "Sales.CountryRegionCurrency", true -> __.``Sales.CountryRegionCurrency``.ReadIfNotNull >> box
        | "Sales.CreditCard", false -> __.``Sales.CreditCard``.Read >> box
        | "Sales.CreditCard", true -> __.``Sales.CreditCard``.ReadIfNotNull >> box
        | "Sales.Currency", false -> __.``Sales.Currency``.Read >> box
        | "Sales.Currency", true -> __.``Sales.Currency``.ReadIfNotNull >> box
        | "Sales.CurrencyRate", false -> __.``Sales.CurrencyRate``.Read >> box
        | "Sales.CurrencyRate", true -> __.``Sales.CurrencyRate``.ReadIfNotNull >> box
        | "Sales.Customer", false -> __.``Sales.Customer``.Read >> box
        | "Sales.Customer", true -> __.``Sales.Customer``.ReadIfNotNull >> box
        | "Sales.PersonCreditCard", false -> __.``Sales.PersonCreditCard``.Read >> box
        | "Sales.PersonCreditCard", true -> __.``Sales.PersonCreditCard``.ReadIfNotNull >> box
        | "Sales.SalesOrderDetail", false -> __.``Sales.SalesOrderDetail``.Read >> box
        | "Sales.SalesOrderDetail", true -> __.``Sales.SalesOrderDetail``.ReadIfNotNull >> box
        | "Sales.SalesOrderHeader", false -> __.``Sales.SalesOrderHeader``.Read >> box
        | "Sales.SalesOrderHeader", true -> __.``Sales.SalesOrderHeader``.ReadIfNotNull >> box
        | "Sales.SalesOrderHeaderSalesReason", false -> __.``Sales.SalesOrderHeaderSalesReason``.Read >> box
        | "Sales.SalesOrderHeaderSalesReason", true -> __.``Sales.SalesOrderHeaderSalesReason``.ReadIfNotNull >> box
        | "Sales.SalesPerson", false -> __.``Sales.SalesPerson``.Read >> box
        | "Sales.SalesPerson", true -> __.``Sales.SalesPerson``.ReadIfNotNull >> box
        | "Sales.SalesPersonQuotaHistory", false -> __.``Sales.SalesPersonQuotaHistory``.Read >> box
        | "Sales.SalesPersonQuotaHistory", true -> __.``Sales.SalesPersonQuotaHistory``.ReadIfNotNull >> box
        | "Sales.SalesReason", false -> __.``Sales.SalesReason``.Read >> box
        | "Sales.SalesReason", true -> __.``Sales.SalesReason``.ReadIfNotNull >> box
        | "Sales.SalesTaxRate", false -> __.``Sales.SalesTaxRate``.Read >> box
        | "Sales.SalesTaxRate", true -> __.``Sales.SalesTaxRate``.ReadIfNotNull >> box
        | "Sales.SalesTerritory", false -> __.``Sales.SalesTerritory``.Read >> box
        | "Sales.SalesTerritory", true -> __.``Sales.SalesTerritory``.ReadIfNotNull >> box
        | "Sales.SalesTerritoryHistory", false -> __.``Sales.SalesTerritoryHistory``.Read >> box
        | "Sales.SalesTerritoryHistory", true -> __.``Sales.SalesTerritoryHistory``.ReadIfNotNull >> box
        | "Sales.ShoppingCartItem", false -> __.``Sales.ShoppingCartItem``.Read >> box
        | "Sales.ShoppingCartItem", true -> __.``Sales.ShoppingCartItem``.ReadIfNotNull >> box
        | "Sales.SpecialOffer", false -> __.``Sales.SpecialOffer``.Read >> box
        | "Sales.SpecialOffer", true -> __.``Sales.SpecialOffer``.ReadIfNotNull >> box
        | "Sales.SpecialOfferProduct", false -> __.``Sales.SpecialOfferProduct``.Read >> box
        | "Sales.SpecialOfferProduct", true -> __.``Sales.SpecialOfferProduct``.ReadIfNotNull >> box
        | "Sales.Store", false -> __.``Sales.Store``.Read >> box
        | "Sales.Store", true -> __.``Sales.Store``.ReadIfNotNull >> box
        | "dbo.AWBuildVersion", false -> __.``dbo.AWBuildVersion``.Read >> box
        | "dbo.AWBuildVersion", true -> __.``dbo.AWBuildVersion``.ReadIfNotNull >> box
        | "dbo.DatabaseLog", false -> __.``dbo.DatabaseLog``.Read >> box
        | "dbo.DatabaseLog", true -> __.``dbo.DatabaseLog``.ReadIfNotNull >> box
        | "dbo.ErrorLog", false -> __.``dbo.ErrorLog``.Read >> box
        | "dbo.ErrorLog", true -> __.``dbo.ErrorLog``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.SqlClient.SqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<byte> then Some(wrap reader.GetByte)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrap reader.GetFloat)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTimeOffset)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetFieldValue)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<obj> then Some(wrap reader.GetValue)
        else None

    static member Read(reader: Microsoft.Data.SqlClient.SqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
