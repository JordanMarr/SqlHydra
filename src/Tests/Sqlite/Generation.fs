module Sqlite.Generation

open Swensen.Unquote
open VerifyTests
open VerifyNUnit
open SqlHydra.Sqlite
open SqlHydra
open SqlHydra.Domain
open NUnit.Framework

let connectionString = 
    let assembly = System.Reflection.Assembly.GetExecutingAssembly().Location |> System.IO.FileInfo
    let thisDir = assembly.Directory.Parent.Parent.Parent.FullName
    let relativeDbPath = System.IO.Path.Combine(thisDir, "TestData", "AdventureWorksLT.db")
    $"Data Source={relativeDbPath}"

let cfg = 
    {
        ConnectionString = connectionString
        OutputFile = ""
        Namespace = "TestNS"
        IsCLIMutable = true
        ProviderDbTypeAttributes = true
        TableDeclarations = false
        Readers = Some { ReadersConfig.ReaderType = "System.Data.Common.DbDataReader" } 
        Filters = Filters.Empty
    }

let lazySchema = lazy SqliteSchemaProvider.getSchema cfg

let getCode cfg = 
    lazySchema.Value
    |> SchemaGenerator.generateModule cfg AppInfo.info
    |> SchemaGenerator.toFormattedCode cfg AppInfo.info "---"

let inCode (str: string) cfg = 
    let code = getCode cfg
    code.Contains str =! true

let notInCode (str: string) cfg = 
    let code = getCode cfg
    code.Contains str =! false

[<Test>]
let ``Verify Generated Code`` () = task {
    let code = getCode cfg
    
    let settings = VerifySettings()
#if NET6_0
    settings.UseFileName("Generation.Verify Generated Code NET6")
#endif
#if NET8_0
    settings.UseFileName("Generation.Verify Generated Code NET8")
#endif
    settings.UseDirectory("./Verify")
    settings.ScrubLines(fun line -> line.StartsWith("// This code was generated by"))
    VerifierSettings.OmitContentFromException() // Cleans up FAKE build output
    let! _ = Verifier.Verify(code, settings)    
    ()
}

[<Test>]
let ``Code Should Have Reader`` () =
    cfg |> inCode "type HydraReader"

[<Test>]
let ``Code Should Not Have Reader`` () =
    { cfg with Readers = None } |> notInCode "type HydraReader"

[<Test>]
let ``Code Should Have CLIMutable`` () =
    { cfg with IsCLIMutable = true } |> inCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Not Have CLIMutable`` () =
    { cfg with IsCLIMutable = false } |> notInCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Have Namespace`` () =
    cfg |> inCode "namespace TestNS"


