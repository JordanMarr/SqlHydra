module Oracle.Generation

open VerifyTests
open VerifyExpecto
open SqlHydra
open SqlHydra.Oracle
open SqlHydra.Domain
open NUnit.Framework

let cfg = 
    {
        ConnectionString = DB.connectionString
        OutputFile = ""
        Namespace = "TestNS"
        IsCLIMutable = true
        ProviderDbTypeAttributes = true
        TableDeclarations = false
        Readers = Some { ReadersConfig.ReaderType = "Oracle.ManagedDataAccess.Client.OracleDataReader" } 
        Filters = { Includes = [ "OT/*" ]; Excludes = [ ]; Restrictions = Map.empty }
    }

let lazySchema = lazy OracleSchemaProvider.getSchema cfg

let getCode cfg = 
    lazySchema.Value
    |> SchemaGenerator.generateModule cfg AppInfo.info
    |> SchemaGenerator.toFormattedCode cfg AppInfo.info "---"

let inCode (str: string) cfg = 
    let code = getCode cfg
    Assert.IsTrue(code.Contains str)

let notInCode (str: string) cfg = 
    let code = getCode cfg
    Assert.IsFalse(code.Contains str)

[<Test; Ignore "Ignore">]
let ```Print Schema``() = 
    let schema = OracleSchemaProvider.getSchema cfg
    printfn "Schema: %A" schema

[<Test>]
let ``Verify Generated Code``() = task {
    let code = getCode cfg
    
    let settings = VerifySettings()
    settings.UseDirectory("./Verify")
    settings.ScrubLines(fun line -> line.StartsWith("// This code was generated by `SqlHydra.Oracle`"))
    VerifierSettings.OmitContentFromException() // Cleans up FAKE build output
#if NET6_0
    let! result = Verifier.Verify("Verify Generated Code NET6", code, settings)
#endif
#if NET7_0
    let! result = Verifier.Verify("Verify Generated Code NET7", code, settings)
#endif
    //if result.Exception <> null then raise result.Exception
    ()
}

[<Test>]
let ``Code Should Have Reader``() =
    cfg |> inCode "type HydraReader"

[<Test>]
let ``Code Should Not Have Reader``() =
    { cfg with Readers = None } |> notInCode "type HydraReader"

[<Test>]
let ``Code Should Have CLIMutable``() =
    { cfg with IsCLIMutable = true } |> inCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Not Have CLIMutable``() =
    { cfg with IsCLIMutable = false } |> notInCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Have Namespace``() =
    cfg |> inCode "namespace TestNS"