namespace TestNS


[<AutoOpen>]
module ColumnReaders =
    type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
            member __.Name = column
            member __.IsNull() = getOrdinal column |> reader.IsDBNull
            override __.ToString() = __.Name

    type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

    type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
            inherit Column(reader, getOrdinal, column)
            member __.Read(?alias) = 
                match alias |> Option.defaultValue __.Name |> getOrdinal with
                | o when reader.IsDBNull o -> None
                | o -> Some (getter o)

[<AutoOpen>]
module private DataReaderExtensions =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        

module ext =
    type mood =
        | sad = 1
        | ok = 2
        | happy = 3

    [<CLIMutable>]
    type arrays =
        { [<SqlHydra.ProviderDbType("Text")>]
          id: string
          [<SqlHydra.ProviderDbType("Text,Array")>]
          text_array: string []
          [<SqlHydra.ProviderDbType("Integer,Array")>]
          integer_array: int [] }

    [<CLIMutable>]
    type jsonsupport =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: int
          [<SqlHydra.ProviderDbType("Json")>]
          json_field: string
          [<SqlHydra.ProviderDbType("Jsonb")>]
          jsonb_field: string }

    [<CLIMutable>]
    type person =
        { [<SqlHydra.ProviderDbType("Text")>]
          name: string
          currentmood: mood }

    module Readers =
        type arraysReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetString, "id")
            member __.text_array = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "text_array")
            member __.integer_array = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "integer_array")

            member __.Read() =
                { arrays.id = __.id.Read()
                  text_array = __.text_array.Read()
                  integer_array = __.integer_array.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type jsonsupportReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = RequiredColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.json_field = RequiredColumn(reader, getOrdinal, reader.GetString, "json_field")
            member __.jsonb_field = RequiredColumn(reader, getOrdinal, reader.GetString, "jsonb_field")

            member __.Read() =
                { jsonsupport.id = __.id.Read()
                  json_field = __.json_field.Read()
                  jsonb_field = __.jsonb_field.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type personReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.currentmood = RequiredColumn(reader, getOrdinal, reader.GetFieldValue, "currentmood")

            member __.Read() =
                { person.name = __.name.Read()
                  currentmood = __.currentmood.Read() }

            member __.ReadIfNotNull() =
                if __.name.IsNull() then None else Some(__.Read())

module hr =
    [<CLIMutable>]
    type d =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          departmentid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          groupname: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type e =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          nationalidnumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          loginid: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: Option<string>
          [<SqlHydra.ProviderDbType("Date")>]
          birthdate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Char")>]
          maritalstatus: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          gender: Option<string>
          [<SqlHydra.ProviderDbType("Date")>]
          hiredate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Boolean")>]
          salariedflag: bool
          [<SqlHydra.ProviderDbType("Smallint")>]
          vacationhours: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          sickleavehours: Option<int16>
          [<SqlHydra.ProviderDbType("Boolean")>]
          currentflag: bool
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Varchar")>]
          organizationnode: Option<string> }

    [<CLIMutable>]
    type edh =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          departmentid: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          shiftid: Option<int16>
          [<SqlHydra.ProviderDbType("Date")>]
          startdate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Date")>]
          enddate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type eph =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          ratechangedate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          rate: Option<decimal>
          [<SqlHydra.ProviderDbType("Smallint")>]
          payfrequency: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type jc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          jobcandidateid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          resume: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type s =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shiftid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Time")>]
          starttime: Option<System.TimeOnly>
          [<SqlHydra.ProviderDbType("Time")>]
          endtime: Option<System.TimeOnly>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    module Readers =
        type dReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.departmentid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "departmentid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.groupname = OptionalColumn(reader, getOrdinal, reader.GetString, "groupname")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { d.id = __.id.Read()
                  departmentid = __.departmentid.Read()
                  name = __.name.Read()
                  groupname = __.groupname.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type eReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.nationalidnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "nationalidnumber")
            member __.loginid = OptionalColumn(reader, getOrdinal, reader.GetString, "loginid")
            member __.jobtitle = OptionalColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.birthdate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "birthdate")
            member __.maritalstatus = OptionalColumn(reader, getOrdinal, reader.GetString, "maritalstatus")
            member __.gender = OptionalColumn(reader, getOrdinal, reader.GetString, "gender")
            member __.hiredate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "hiredate")
            member __.salariedflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "salariedflag")
            member __.vacationhours = OptionalColumn(reader, getOrdinal, reader.GetInt16, "vacationhours")
            member __.sickleavehours = OptionalColumn(reader, getOrdinal, reader.GetInt16, "sickleavehours")
            member __.currentflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "currentflag")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.organizationnode = OptionalColumn(reader, getOrdinal, reader.GetString, "organizationnode")

            member __.Read() =
                { e.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  nationalidnumber = __.nationalidnumber.Read()
                  loginid = __.loginid.Read()
                  jobtitle = __.jobtitle.Read()
                  birthdate = __.birthdate.Read()
                  maritalstatus = __.maritalstatus.Read()
                  gender = __.gender.Read()
                  hiredate = __.hiredate.Read()
                  salariedflag = __.salariedflag.Read()
                  vacationhours = __.vacationhours.Read()
                  sickleavehours = __.sickleavehours.Read()
                  currentflag = __.currentflag.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read()
                  organizationnode = __.organizationnode.Read() }

            member __.ReadIfNotNull() =
                if __.salariedflag.IsNull() then None else Some(__.Read())

        type edhReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.departmentid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "departmentid")
            member __.shiftid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "shiftid")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "enddate")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { edh.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  departmentid = __.departmentid.Read()
                  shiftid = __.shiftid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type ephReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.ratechangedate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ratechangedate")
            member __.rate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "rate")
            member __.payfrequency = OptionalColumn(reader, getOrdinal, reader.GetInt16, "payfrequency")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { eph.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  ratechangedate = __.ratechangedate.Read()
                  rate = __.rate.Read()
                  payfrequency = __.payfrequency.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type jcReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.jobcandidateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.resume = OptionalColumn(reader, getOrdinal, reader.GetString, "resume")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { jc.id = __.id.Read()
                  jobcandidateid = __.jobcandidateid.Read()
                  businessentityid = __.businessentityid.Read()
                  resume = __.resume.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.shiftid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shiftid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.starttime = OptionalColumn(reader, getOrdinal, reader.GetTimeOnly, "starttime")
            member __.endtime = OptionalColumn(reader, getOrdinal, reader.GetTimeOnly, "endtime")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { s.id = __.id.Read()
                  shiftid = __.shiftid.Read()
                  name = __.name.Read()
                  starttime = __.starttime.Read()
                  endtime = __.endtime.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

module humanresources =
    [<CLIMutable>]
    type department =
        { [<SqlHydra.ProviderDbType("Integer")>]
          departmentid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          groupname: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type employee =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          nationalidnumber: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          loginid: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: string
          [<SqlHydra.ProviderDbType("Date")>]
          birthdate: System.DateOnly
          [<SqlHydra.ProviderDbType("Char")>]
          maritalstatus: string
          [<SqlHydra.ProviderDbType("Char")>]
          gender: string
          [<SqlHydra.ProviderDbType("Date")>]
          hiredate: System.DateOnly
          [<SqlHydra.ProviderDbType("Boolean")>]
          salariedflag: bool
          [<SqlHydra.ProviderDbType("Smallint")>]
          vacationhours: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          sickleavehours: int16
          [<SqlHydra.ProviderDbType("Boolean")>]
          currentflag: bool
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime
          [<SqlHydra.ProviderDbType("Varchar")>]
          organizationnode: Option<string> }

    [<CLIMutable>]
    type employeedepartmenthistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          departmentid: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          shiftid: int16
          [<SqlHydra.ProviderDbType("Date")>]
          startdate: System.DateOnly
          [<SqlHydra.ProviderDbType("Date")>]
          enddate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type employeepayhistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          ratechangedate: System.DateTime
          [<SqlHydra.ProviderDbType("Numeric")>]
          rate: decimal
          [<SqlHydra.ProviderDbType("Smallint")>]
          payfrequency: int16
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type jobcandidate =
        { [<SqlHydra.ProviderDbType("Integer")>]
          jobcandidateid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          resume: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type shift =
        { [<SqlHydra.ProviderDbType("Integer")>]
          shiftid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Time")>]
          starttime: System.TimeOnly
          [<SqlHydra.ProviderDbType("Time")>]
          endtime: System.TimeOnly
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vemployee =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumbertype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregionname: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          additionalcontactinfo: Option<string> }

    [<CLIMutable>]
    type vemployeedepartment =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          department: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          groupname: Option<string>
          [<SqlHydra.ProviderDbType("Date")>]
          startdate: Option<System.DateOnly> }

    [<CLIMutable>]
    type vemployeedepartmenthistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          shift: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          department: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          groupname: Option<string>
          [<SqlHydra.ProviderDbType("Date")>]
          startdate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Date")>]
          enddate: Option<System.DateOnly> }

    [<CLIMutable>]
    type vjobcandidate =
        { [<SqlHydra.ProviderDbType("Integer")>]
          jobcandidateid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Name.Prefix``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Name.First``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Name.Middle``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Name.Last``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Name.Suffix``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Skills: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Addr.Type``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Addr.Loc.CountryRegion``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Addr.Loc.State``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Addr.Loc.City``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Addr.PostalCode``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          EMail: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          WebSite: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type vjobcandidateeducation =
        { [<SqlHydra.ProviderDbType("Integer")>]
          jobcandidateid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Level``: Option<string>
          [<SqlHydra.ProviderDbType("Date")>]
          ``Edu.StartDate``: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Date")>]
          ``Edu.EndDate``: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Degree``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Major``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Minor``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.GPA``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.GPAScale``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.School``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Loc.CountryRegion``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Loc.State``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Edu.Loc.City``: Option<string> }

    [<CLIMutable>]
    type vjobcandidateemployment =
        { [<SqlHydra.ProviderDbType("Integer")>]
          jobcandidateid: Option<int>
          [<SqlHydra.ProviderDbType("Date")>]
          ``Emp.StartDate``: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Date")>]
          ``Emp.EndDate``: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.OrgName``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.JobTitle``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.Responsibility``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.FunctionCategory``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.IndustryCategory``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.Loc.CountryRegion``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.Loc.State``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``Emp.Loc.City``: Option<string> }

    module Readers =
        type departmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "departmentid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.groupname = RequiredColumn(reader, getOrdinal, reader.GetString, "groupname")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { department.departmentid = __.departmentid.Read()
                  name = __.name.Read()
                  groupname = __.groupname.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.departmentid.IsNull() then None else Some(__.Read())

        type employeeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.nationalidnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "nationalidnumber")
            member __.loginid = RequiredColumn(reader, getOrdinal, reader.GetString, "loginid")
            member __.jobtitle = RequiredColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.birthdate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "birthdate")
            member __.maritalstatus = RequiredColumn(reader, getOrdinal, reader.GetString, "maritalstatus")
            member __.gender = RequiredColumn(reader, getOrdinal, reader.GetString, "gender")
            member __.hiredate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "hiredate")
            member __.salariedflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "salariedflag")
            member __.vacationhours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "vacationhours")
            member __.sickleavehours = RequiredColumn(reader, getOrdinal, reader.GetInt16, "sickleavehours")
            member __.currentflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "currentflag")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.organizationnode = OptionalColumn(reader, getOrdinal, reader.GetString, "organizationnode")

            member __.Read() =
                { employee.businessentityid = __.businessentityid.Read()
                  nationalidnumber = __.nationalidnumber.Read()
                  loginid = __.loginid.Read()
                  jobtitle = __.jobtitle.Read()
                  birthdate = __.birthdate.Read()
                  maritalstatus = __.maritalstatus.Read()
                  gender = __.gender.Read()
                  hiredate = __.hiredate.Read()
                  salariedflag = __.salariedflag.Read()
                  vacationhours = __.vacationhours.Read()
                  sickleavehours = __.sickleavehours.Read()
                  currentflag = __.currentflag.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read()
                  organizationnode = __.organizationnode.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type employeedepartmenthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.departmentid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "departmentid")
            member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "shiftid")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateOnly, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "enddate")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { employeedepartmenthistory.businessentityid = __.businessentityid.Read()
                  departmentid = __.departmentid.Read()
                  shiftid = __.shiftid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type employeepayhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.ratechangedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ratechangedate")
            member __.rate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rate")
            member __.payfrequency = RequiredColumn(reader, getOrdinal, reader.GetInt16, "payfrequency")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { employeepayhistory.businessentityid = __.businessentityid.Read()
                  ratechangedate = __.ratechangedate.Read()
                  rate = __.rate.Read()
                  payfrequency = __.payfrequency.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type jobcandidateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.jobcandidateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.resume = OptionalColumn(reader, getOrdinal, reader.GetString, "resume")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { jobcandidate.jobcandidateid = __.jobcandidateid.Read()
                  businessentityid = __.businessentityid.Read()
                  resume = __.resume.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.jobcandidateid.IsNull() then None else Some(__.Read())

        type shiftReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.shiftid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shiftid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.starttime = RequiredColumn(reader, getOrdinal, reader.GetTimeOnly, "starttime")
            member __.endtime = RequiredColumn(reader, getOrdinal, reader.GetTimeOnly, "endtime")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { shift.shiftid = __.shiftid.Read()
                  name = __.name.Read()
                  starttime = __.starttime.Read()
                  endtime = __.endtime.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.shiftid.IsNull() then None else Some(__.Read())

        type vemployeeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.jobtitle = OptionalColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertype = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumbertype")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")
            member __.additionalcontactinfo = OptionalColumn(reader, getOrdinal, reader.GetString, "additionalcontactinfo")

            member __.Read() =
                { vemployee.businessentityid = __.businessentityid.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  jobtitle = __.jobtitle.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertype = __.phonenumbertype.Read()
                  emailaddress = __.emailaddress.Read()
                  emailpromotion = __.emailpromotion.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovincename = __.stateprovincename.Read()
                  postalcode = __.postalcode.Read()
                  countryregionname = __.countryregionname.Read()
                  additionalcontactinfo = __.additionalcontactinfo.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vemployeedepartmentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.jobtitle = OptionalColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.department = OptionalColumn(reader, getOrdinal, reader.GetString, "department")
            member __.groupname = OptionalColumn(reader, getOrdinal, reader.GetString, "groupname")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "startdate")

            member __.Read() =
                { vemployeedepartment.businessentityid = __.businessentityid.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  jobtitle = __.jobtitle.Read()
                  department = __.department.Read()
                  groupname = __.groupname.Read()
                  startdate = __.startdate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vemployeedepartmenthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.shift = OptionalColumn(reader, getOrdinal, reader.GetString, "shift")
            member __.department = OptionalColumn(reader, getOrdinal, reader.GetString, "department")
            member __.groupname = OptionalColumn(reader, getOrdinal, reader.GetString, "groupname")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "enddate")

            member __.Read() =
                { vemployeedepartmenthistory.businessentityid = __.businessentityid.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  shift = __.shift.Read()
                  department = __.department.Read()
                  groupname = __.groupname.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vjobcandidateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.jobcandidateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.``Name.Prefix`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Prefix")
            member __.``Name.First`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.First")
            member __.``Name.Middle`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Middle")
            member __.``Name.Last`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Last")
            member __.``Name.Suffix`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Name.Suffix")
            member __.Skills = OptionalColumn(reader, getOrdinal, reader.GetString, "Skills")
            member __.``Addr.Type`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Type")
            member __.``Addr.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.CountryRegion")
            member __.``Addr.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.State")
            member __.``Addr.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.Loc.City")
            member __.``Addr.PostalCode`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Addr.PostalCode")
            member __.EMail = OptionalColumn(reader, getOrdinal, reader.GetString, "EMail")
            member __.WebSite = OptionalColumn(reader, getOrdinal, reader.GetString, "WebSite")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { vjobcandidate.jobcandidateid = __.jobcandidateid.Read()
                  businessentityid = __.businessentityid.Read()
                  ``Name.Prefix`` = __.``Name.Prefix``.Read()
                  ``Name.First`` = __.``Name.First``.Read()
                  ``Name.Middle`` = __.``Name.Middle``.Read()
                  ``Name.Last`` = __.``Name.Last``.Read()
                  ``Name.Suffix`` = __.``Name.Suffix``.Read()
                  Skills = __.Skills.Read()
                  ``Addr.Type`` = __.``Addr.Type``.Read()
                  ``Addr.Loc.CountryRegion`` = __.``Addr.Loc.CountryRegion``.Read()
                  ``Addr.Loc.State`` = __.``Addr.Loc.State``.Read()
                  ``Addr.Loc.City`` = __.``Addr.Loc.City``.Read()
                  ``Addr.PostalCode`` = __.``Addr.PostalCode``.Read()
                  EMail = __.EMail.Read()
                  WebSite = __.WebSite.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.jobcandidateid.IsNull() then None else Some(__.Read())

        type vjobcandidateeducationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.jobcandidateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
            member __.``Edu.Level`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Level")
            member __.``Edu.StartDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "Edu.StartDate")
            member __.``Edu.EndDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "Edu.EndDate")
            member __.``Edu.Degree`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Degree")
            member __.``Edu.Major`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Major")
            member __.``Edu.Minor`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Minor")
            member __.``Edu.GPA`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.GPA")
            member __.``Edu.GPAScale`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.GPAScale")
            member __.``Edu.School`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.School")
            member __.``Edu.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.CountryRegion")
            member __.``Edu.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.State")
            member __.``Edu.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Edu.Loc.City")

            member __.Read() =
                { vjobcandidateeducation.jobcandidateid = __.jobcandidateid.Read()
                  ``Edu.Level`` = __.``Edu.Level``.Read()
                  ``Edu.StartDate`` = __.``Edu.StartDate``.Read()
                  ``Edu.EndDate`` = __.``Edu.EndDate``.Read()
                  ``Edu.Degree`` = __.``Edu.Degree``.Read()
                  ``Edu.Major`` = __.``Edu.Major``.Read()
                  ``Edu.Minor`` = __.``Edu.Minor``.Read()
                  ``Edu.GPA`` = __.``Edu.GPA``.Read()
                  ``Edu.GPAScale`` = __.``Edu.GPAScale``.Read()
                  ``Edu.School`` = __.``Edu.School``.Read()
                  ``Edu.Loc.CountryRegion`` = __.``Edu.Loc.CountryRegion``.Read()
                  ``Edu.Loc.State`` = __.``Edu.Loc.State``.Read()
                  ``Edu.Loc.City`` = __.``Edu.Loc.City``.Read() }

            member __.ReadIfNotNull() =
                if __.jobcandidateid.IsNull() then None else Some(__.Read())

        type vjobcandidateemploymentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.jobcandidateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "jobcandidateid")
            member __.``Emp.StartDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "Emp.StartDate")
            member __.``Emp.EndDate`` = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "Emp.EndDate")
            member __.``Emp.OrgName`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.OrgName")
            member __.``Emp.JobTitle`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.JobTitle")
            member __.``Emp.Responsibility`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Responsibility")
            member __.``Emp.FunctionCategory`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.FunctionCategory")
            member __.``Emp.IndustryCategory`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.IndustryCategory")
            member __.``Emp.Loc.CountryRegion`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.CountryRegion")
            member __.``Emp.Loc.State`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.State")
            member __.``Emp.Loc.City`` = OptionalColumn(reader, getOrdinal, reader.GetString, "Emp.Loc.City")

            member __.Read() =
                { vjobcandidateemployment.jobcandidateid = __.jobcandidateid.Read()
                  ``Emp.StartDate`` = __.``Emp.StartDate``.Read()
                  ``Emp.EndDate`` = __.``Emp.EndDate``.Read()
                  ``Emp.OrgName`` = __.``Emp.OrgName``.Read()
                  ``Emp.JobTitle`` = __.``Emp.JobTitle``.Read()
                  ``Emp.Responsibility`` = __.``Emp.Responsibility``.Read()
                  ``Emp.FunctionCategory`` = __.``Emp.FunctionCategory``.Read()
                  ``Emp.IndustryCategory`` = __.``Emp.IndustryCategory``.Read()
                  ``Emp.Loc.CountryRegion`` = __.``Emp.Loc.CountryRegion``.Read()
                  ``Emp.Loc.State`` = __.``Emp.Loc.State``.Read()
                  ``Emp.Loc.City`` = __.``Emp.Loc.City``.Read() }

            member __.ReadIfNotNull() =
                if __.jobcandidateid.IsNull() then None else Some(__.Read())

module pe =
    [<CLIMutable>]
    type a =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          addressid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          spatiallocation: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type at =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          addresstypeid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type be =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type bea =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          addressid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          addresstypeid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type bec =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          personid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          contacttypeid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type cr =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type ct =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          contacttypeid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type e =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailaddressid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type p =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          persontype: Option<string>
          [<SqlHydra.ProviderDbType("Boolean")>]
          namestyle: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          additionalcontactinfo: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          demographics: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pa =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          passwordhash: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          passwordsalt: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pnt =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          phonenumbertypeid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pp =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          phonenumbertypeid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sp =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          stateprovincecode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: Option<string>
          [<SqlHydra.ProviderDbType("Boolean")>]
          isonlystateprovinceflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    module Readers =
        type aReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.addressid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "addressid")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovinceid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.spatiallocation = OptionalColumn(reader, getOrdinal, reader.GetString, "spatiallocation")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { a.id = __.id.Read()
                  addressid = __.addressid.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovinceid = __.stateprovinceid.Read()
                  postalcode = __.postalcode.Read()
                  spatiallocation = __.spatiallocation.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type atReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.addresstypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { at.id = __.id.Read()
                  addresstypeid = __.addresstypeid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type beReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { be.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type beaReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.addressid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "addressid")
            member __.addresstypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { bea.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  addressid = __.addressid.Read()
                  addresstypeid = __.addresstypeid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type becReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.personid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "personid")
            member __.contacttypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { bec.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  personid = __.personid.Read()
                  contacttypeid = __.contacttypeid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type crReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.countryregioncode = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { cr.countryregioncode = __.countryregioncode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.countryregioncode.IsNull() then None else Some(__.Read())

        type ctReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.contacttypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { ct.id = __.id.Read()
                  contacttypeid = __.contacttypeid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type eReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.emailaddressid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailaddressid")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { e.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  emailaddressid = __.emailaddressid.Read()
                  emailaddress = __.emailaddress.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.persontype = OptionalColumn(reader, getOrdinal, reader.GetString, "persontype")
            member __.namestyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "namestyle")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
            member __.additionalcontactinfo = OptionalColumn(reader, getOrdinal, reader.GetString, "additionalcontactinfo")
            member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { p.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  persontype = __.persontype.Read()
                  namestyle = __.namestyle.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  emailpromotion = __.emailpromotion.Read()
                  additionalcontactinfo = __.additionalcontactinfo.Read()
                  demographics = __.demographics.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.namestyle.IsNull() then None else Some(__.Read())

        type paReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.passwordhash = OptionalColumn(reader, getOrdinal, reader.GetString, "passwordhash")
            member __.passwordsalt = OptionalColumn(reader, getOrdinal, reader.GetString, "passwordsalt")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pa.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  passwordhash = __.passwordhash.Read()
                  passwordsalt = __.passwordsalt.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pntReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.phonenumbertypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pnt.id = __.id.Read()
                  phonenumbertypeid = __.phonenumbertypeid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type ppReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertypeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pp.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertypeid = __.phonenumbertypeid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type spReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.stateprovinceid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.stateprovincecode = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincecode")
            member __.countryregioncode = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.isonlystateprovinceflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "isonlystateprovinceflag")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sp.id = __.id.Read()
                  stateprovinceid = __.stateprovinceid.Read()
                  stateprovincecode = __.stateprovincecode.Read()
                  countryregioncode = __.countryregioncode.Read()
                  isonlystateprovinceflag = __.isonlystateprovinceflag.Read()
                  name = __.name.Read()
                  territoryid = __.territoryid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.isonlystateprovinceflag.IsNull() then None else Some(__.Read())

module person =
    [<CLIMutable>]
    type address =
        { [<SqlHydra.ProviderDbType("Integer")>]
          addressid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: string
          [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          spatiallocation: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type addresstype =
        { [<SqlHydra.ProviderDbType("Integer")>]
          addresstypeid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type businessentity =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type businessentityaddress =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          addressid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          addresstypeid: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type businessentitycontact =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          personid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          contacttypeid: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type contacttype =
        { [<SqlHydra.ProviderDbType("Integer")>]
          contacttypeid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type countryregion =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type emailaddress =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          emailaddressid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type password =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          passwordhash: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          passwordsalt: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type person =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Char")>]
          persontype: string
          [<SqlHydra.ProviderDbType("Boolean")>]
          namestyle: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: int
          [<SqlHydra.ProviderDbType("Xml")>]
          additionalcontactinfo: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          demographics: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type personphone =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: string
          [<SqlHydra.ProviderDbType("Integer")>]
          phonenumbertypeid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type phonenumbertype =
        { [<SqlHydra.ProviderDbType("Integer")>]
          phonenumbertypeid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type stateprovince =
        { [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: int
          [<SqlHydra.ProviderDbType("Char")>]
          stateprovincecode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: string
          [<SqlHydra.ProviderDbType("Boolean")>]
          isonlystateprovinceflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vadditionalcontactinfo =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          telephonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Text")>]
          telephonespecialinstructions: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          street: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          stateprovince: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          countryregion: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          homeaddressspecialinstructions: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Text")>]
          emailspecialinstructions: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          emailtelephonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type vstateprovincecountryregion =
        { [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: Option<int>
          [<SqlHydra.ProviderDbType("Name")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: Option<string>
          [<SqlHydra.ProviderDbType("Name")>]
          countryregionname: Option<string> }

    module Readers =
        type addressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addressid")
            member __.addressline1 = RequiredColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = RequiredColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.postalcode = RequiredColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.spatiallocation = OptionalColumn(reader, getOrdinal, reader.GetString, "spatiallocation")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { address.addressid = __.addressid.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovinceid = __.stateprovinceid.Read()
                  postalcode = __.postalcode.Read()
                  spatiallocation = __.spatiallocation.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.addressid.IsNull() then None else Some(__.Read())

        type addresstypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { addresstype.addresstypeid = __.addresstypeid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.addresstypeid.IsNull() then None else Some(__.Read())

        type businessentityReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { businessentity.businessentityid = __.businessentityid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type businessentityaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.addressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addressid")
            member __.addresstypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "addresstypeid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { businessentityaddress.businessentityid = __.businessentityid.Read()
                  addressid = __.addressid.Read()
                  addresstypeid = __.addresstypeid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type businessentitycontactReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.personid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "personid")
            member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { businessentitycontact.businessentityid = __.businessentityid.Read()
                  personid = __.personid.Read()
                  contacttypeid = __.contacttypeid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type contacttypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.contacttypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "contacttypeid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { contacttype.contacttypeid = __.contacttypeid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.contacttypeid.IsNull() then None else Some(__.Read())

        type countryregionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { countryregion.countryregioncode = __.countryregioncode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.countryregioncode.IsNull() then None else Some(__.Read())

        type emailaddressReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.emailaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "emailaddressid")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { emailaddress.businessentityid = __.businessentityid.Read()
                  emailaddressid = __.emailaddressid.Read()
                  emailaddress = __.emailaddress.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type passwordReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.passwordhash = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordhash")
            member __.passwordsalt = RequiredColumn(reader, getOrdinal, reader.GetString, "passwordsalt")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { password.businessentityid = __.businessentityid.Read()
                  passwordhash = __.passwordhash.Read()
                  passwordsalt = __.passwordsalt.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type personReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.persontype = RequiredColumn(reader, getOrdinal, reader.GetString, "persontype")
            member __.namestyle = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "namestyle")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = RequiredColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = RequiredColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.emailpromotion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
            member __.additionalcontactinfo = OptionalColumn(reader, getOrdinal, reader.GetString, "additionalcontactinfo")
            member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { person.businessentityid = __.businessentityid.Read()
                  persontype = __.persontype.Read()
                  namestyle = __.namestyle.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  emailpromotion = __.emailpromotion.Read()
                  additionalcontactinfo = __.additionalcontactinfo.Read()
                  demographics = __.demographics.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type personphoneReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.phonenumber = RequiredColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { personphone.businessentityid = __.businessentityid.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertypeid = __.phonenumbertypeid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type phonenumbertypeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.phonenumbertypeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "phonenumbertypeid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { phonenumbertype.phonenumbertypeid = __.phonenumbertypeid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.phonenumbertypeid.IsNull() then None else Some(__.Read())

        type stateprovinceReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.stateprovincecode = RequiredColumn(reader, getOrdinal, reader.GetString, "stateprovincecode")
            member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.isonlystateprovinceflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "isonlystateprovinceflag")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { stateprovince.stateprovinceid = __.stateprovinceid.Read()
                  stateprovincecode = __.stateprovincecode.Read()
                  countryregioncode = __.countryregioncode.Read()
                  isonlystateprovinceflag = __.isonlystateprovinceflag.Read()
                  name = __.name.Read()
                  territoryid = __.territoryid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.stateprovinceid.IsNull() then None else Some(__.Read())

        type vadditionalcontactinfoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.telephonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "telephonenumber")
            member __.telephonespecialinstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "telephonespecialinstructions")
            member __.street = OptionalColumn(reader, getOrdinal, reader.GetString, "street")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovince = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovince")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregion = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregion")
            member __.homeaddressspecialinstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "homeaddressspecialinstructions")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailspecialinstructions = OptionalColumn(reader, getOrdinal, reader.GetString, "emailspecialinstructions")
            member __.emailtelephonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "emailtelephonenumber")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { vadditionalcontactinfo.businessentityid = __.businessentityid.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  telephonenumber = __.telephonenumber.Read()
                  telephonespecialinstructions = __.telephonespecialinstructions.Read()
                  street = __.street.Read()
                  city = __.city.Read()
                  stateprovince = __.stateprovince.Read()
                  postalcode = __.postalcode.Read()
                  countryregion = __.countryregion.Read()
                  homeaddressspecialinstructions = __.homeaddressspecialinstructions.Read()
                  emailaddress = __.emailaddress.Read()
                  emailspecialinstructions = __.emailspecialinstructions.Read()
                  emailtelephonenumber = __.emailtelephonenumber.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vstateprovincecountryregionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.stateprovinceid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.countryregioncode = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")

            member __.Read() =
                { vstateprovincecountryregion.stateprovinceid = __.stateprovinceid.Read()
                  stateprovincename = __.stateprovincename.Read()
                  territoryid = __.territoryid.Read()
                  countryregioncode = __.countryregioncode.Read()
                  countryregionname = __.countryregionname.Read() }

            member __.ReadIfNotNull() =
                if __.stateprovinceid.IsNull() then None else Some(__.Read())

module pr =
    [<CLIMutable>]
    type bom =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          billofmaterialsid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productassemblyid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          componentid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          bomlevel: Option<int16>
          [<SqlHydra.ProviderDbType("Numeric")>]
          perassemblyqty: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type c =
        { [<SqlHydra.ProviderDbType("Char")>]
          id: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          cultureid: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type d =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          owner: Option<int>
          [<SqlHydra.ProviderDbType("Boolean")>]
          folderflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          filename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          fileextension: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          revision: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          changenumber: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: Option<int16>
          [<SqlHydra.ProviderDbType("Text")>]
          documentsummary: Option<string>
          [<SqlHydra.ProviderDbType("Bytea")>]
          document: Option<byte []>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Varchar")>]
          documentnode: Option<string> }

    [<CLIMutable>]
    type i =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          illustrationid: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          diagram: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type l =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          locationid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          costrate: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          availability: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type p =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          productnumber: Option<string>
          [<SqlHydra.ProviderDbType("Boolean")>]
          makeflag: bool
          [<SqlHydra.ProviderDbType("Boolean")>]
          finishedgoodsflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          color: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          safetystocklevel: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          reorderpoint: Option<int16>
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          listprice: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          size: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          sizeunitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          weightunitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          weight: Option<decimal>
          [<SqlHydra.ProviderDbType("Integer")>]
          daystomanufacture: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          productline: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          ``class``: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          style: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          productsubcategoryid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          sellstartdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          sellenddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          discontinueddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productcategoryid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pch =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pd =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productdescriptionid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          description: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pdoc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Varchar")>]
          documentnode: Option<string> }

    [<CLIMutable>]
    type pi =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          locationid: Option<int16>
          [<SqlHydra.ProviderDbType("Varchar")>]
          shelf: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          bin: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          quantity: Option<int16>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type plph =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          listprice: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pm =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          catalogdescription: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          instructions: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pmi =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          illustrationid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pmpdc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productdescriptionid: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          cultureid: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pp =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productphotoid: Option<int>
          [<SqlHydra.ProviderDbType("Bytea")>]
          thumbnailphoto: Option<byte []>
          [<SqlHydra.ProviderDbType("Varchar")>]
          thumbnailphotofilename: Option<string>
          [<SqlHydra.ProviderDbType("Bytea")>]
          largephoto: Option<byte []>
          [<SqlHydra.ProviderDbType("Varchar")>]
          largephotofilename: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type ppp =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productphotoid: Option<int>
          [<SqlHydra.ProviderDbType("Boolean")>]
          primary: bool
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productreviewid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          reviewername: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          reviewdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          rating: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          comments: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type psc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productsubcategoryid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productcategoryid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          scrapreasonid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type th =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          transactionid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderlineid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          transactiondate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Char")>]
          transactiontype: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type tha =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          transactionid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderlineid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          transactiondate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Char")>]
          transactiontype: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type um =
        { [<SqlHydra.ProviderDbType("Char")>]
          id: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type w =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          workorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          orderqty: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          scrappedqty: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Smallint")>]
          scrapreasonid: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type wr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          workorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          operationsequence: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          locationid: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          scheduledstartdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          scheduledenddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          actualstartdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          actualenddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualresourcehrs: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          plannedcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    module Readers =
        type bomReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.billofmaterialsid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "billofmaterialsid")
            member __.productassemblyid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productassemblyid")
            member __.componentid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "componentid")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.unitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.bomlevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "bomlevel")
            member __.perassemblyqty = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "perassemblyqty")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { bom.id = __.id.Read()
                  billofmaterialsid = __.billofmaterialsid.Read()
                  productassemblyid = __.productassemblyid.Read()
                  componentid = __.componentid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  unitmeasurecode = __.unitmeasurecode.Read()
                  bomlevel = __.bomlevel.Read()
                  perassemblyqty = __.perassemblyqty.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type cReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetString, "id")
            member __.cultureid = OptionalColumn(reader, getOrdinal, reader.GetString, "cultureid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { c.id = __.id.Read()
                  cultureid = __.cultureid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type dReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.owner = OptionalColumn(reader, getOrdinal, reader.GetInt32, "owner")
            member __.folderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "folderflag")
            member __.filename = OptionalColumn(reader, getOrdinal, reader.GetString, "filename")
            member __.fileextension = OptionalColumn(reader, getOrdinal, reader.GetString, "fileextension")
            member __.revision = OptionalColumn(reader, getOrdinal, reader.GetString, "revision")
            member __.changenumber = OptionalColumn(reader, getOrdinal, reader.GetInt32, "changenumber")
            member __.status = OptionalColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.documentsummary = OptionalColumn(reader, getOrdinal, reader.GetString, "documentsummary")
            member __.document = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "document")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.documentnode = OptionalColumn(reader, getOrdinal, reader.GetString, "documentnode")

            member __.Read() =
                { d.title = __.title.Read()
                  owner = __.owner.Read()
                  folderflag = __.folderflag.Read()
                  filename = __.filename.Read()
                  fileextension = __.fileextension.Read()
                  revision = __.revision.Read()
                  changenumber = __.changenumber.Read()
                  status = __.status.Read()
                  documentsummary = __.documentsummary.Read()
                  document = __.document.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read()
                  documentnode = __.documentnode.Read() }

            member __.ReadIfNotNull() =
                if __.folderflag.IsNull() then None else Some(__.Read())

        type iReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.illustrationid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
            member __.diagram = OptionalColumn(reader, getOrdinal, reader.GetString, "diagram")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { i.id = __.id.Read()
                  illustrationid = __.illustrationid.Read()
                  diagram = __.diagram.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type lReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.locationid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "locationid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.costrate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "costrate")
            member __.availability = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "availability")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { l.id = __.id.Read()
                  locationid = __.locationid.Read()
                  name = __.name.Read()
                  costrate = __.costrate.Read()
                  availability = __.availability.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.productnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "productnumber")
            member __.makeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "makeflag")
            member __.finishedgoodsflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "finishedgoodsflag")
            member __.color = OptionalColumn(reader, getOrdinal, reader.GetString, "color")
            member __.safetystocklevel = OptionalColumn(reader, getOrdinal, reader.GetInt16, "safetystocklevel")
            member __.reorderpoint = OptionalColumn(reader, getOrdinal, reader.GetInt16, "reorderpoint")
            member __.standardcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
            member __.listprice = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
            member __.size = OptionalColumn(reader, getOrdinal, reader.GetString, "size")
            member __.sizeunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "sizeunitmeasurecode")
            member __.weightunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "weightunitmeasurecode")
            member __.weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "weight")
            member __.daystomanufacture = OptionalColumn(reader, getOrdinal, reader.GetInt32, "daystomanufacture")
            member __.productline = OptionalColumn(reader, getOrdinal, reader.GetString, "productline")
            member __.``class`` = OptionalColumn(reader, getOrdinal, reader.GetString, "class")
            member __.style = OptionalColumn(reader, getOrdinal, reader.GetString, "style")
            member __.productsubcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.sellstartdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "sellstartdate")
            member __.sellenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "sellenddate")
            member __.discontinueddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "discontinueddate")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { p.id = __.id.Read()
                  productid = __.productid.Read()
                  name = __.name.Read()
                  productnumber = __.productnumber.Read()
                  makeflag = __.makeflag.Read()
                  finishedgoodsflag = __.finishedgoodsflag.Read()
                  color = __.color.Read()
                  safetystocklevel = __.safetystocklevel.Read()
                  reorderpoint = __.reorderpoint.Read()
                  standardcost = __.standardcost.Read()
                  listprice = __.listprice.Read()
                  size = __.size.Read()
                  sizeunitmeasurecode = __.sizeunitmeasurecode.Read()
                  weightunitmeasurecode = __.weightunitmeasurecode.Read()
                  weight = __.weight.Read()
                  daystomanufacture = __.daystomanufacture.Read()
                  productline = __.productline.Read()
                  ``class`` = __.``class``.Read()
                  style = __.style.Read()
                  productsubcategoryid = __.productsubcategoryid.Read()
                  productmodelid = __.productmodelid.Read()
                  sellstartdate = __.sellstartdate.Read()
                  sellenddate = __.sellenddate.Read()
                  discontinueddate = __.discontinueddate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.makeflag.IsNull() then None else Some(__.Read())

        type pcReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pc.id = __.id.Read()
                  productcategoryid = __.productcategoryid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pchReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.standardcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pch.id = __.id.Read()
                  productid = __.productid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  standardcost = __.standardcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pdReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productdescriptionid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
            member __.description = OptionalColumn(reader, getOrdinal, reader.GetString, "description")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pd.id = __.id.Read()
                  productdescriptionid = __.productdescriptionid.Read()
                  description = __.description.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pdocReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.documentnode = OptionalColumn(reader, getOrdinal, reader.GetString, "documentnode")

            member __.Read() =
                { pdoc.id = __.id.Read()
                  productid = __.productid.Read()
                  modifieddate = __.modifieddate.Read()
                  documentnode = __.documentnode.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type piReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.locationid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "locationid")
            member __.shelf = OptionalColumn(reader, getOrdinal, reader.GetString, "shelf")
            member __.bin = OptionalColumn(reader, getOrdinal, reader.GetInt16, "bin")
            member __.quantity = OptionalColumn(reader, getOrdinal, reader.GetInt16, "quantity")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pi.id = __.id.Read()
                  productid = __.productid.Read()
                  locationid = __.locationid.Read()
                  shelf = __.shelf.Read()
                  bin = __.bin.Read()
                  quantity = __.quantity.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type plphReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.listprice = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { plph.id = __.id.Read()
                  productid = __.productid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  listprice = __.listprice.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pmReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.catalogdescription = OptionalColumn(reader, getOrdinal, reader.GetString, "catalogdescription")
            member __.instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "instructions")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pm.id = __.id.Read()
                  productmodelid = __.productmodelid.Read()
                  name = __.name.Read()
                  catalogdescription = __.catalogdescription.Read()
                  instructions = __.instructions.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pmiReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.illustrationid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pmi.productmodelid = __.productmodelid.Read()
                  illustrationid = __.illustrationid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type pmpdcReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.productdescriptionid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
            member __.cultureid = OptionalColumn(reader, getOrdinal, reader.GetString, "cultureid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pmpdc.productmodelid = __.productmodelid.Read()
                  productdescriptionid = __.productdescriptionid.Read()
                  cultureid = __.cultureid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type ppReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productphotoid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
            member __.thumbnailphoto = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "thumbnailphoto")
            member __.thumbnailphotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "thumbnailphotofilename")
            member __.largephoto = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "largephoto")
            member __.largephotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "largephotofilename")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pp.id = __.id.Read()
                  productphotoid = __.productphotoid.Read()
                  thumbnailphoto = __.thumbnailphoto.Read()
                  thumbnailphotofilename = __.thumbnailphotofilename.Read()
                  largephoto = __.largephoto.Read()
                  largephotofilename = __.largephotofilename.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pppReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.productphotoid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
            member __.primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "primary")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { ppp.productid = __.productid.Read()
                  productphotoid = __.productphotoid.Read()
                  primary = __.primary.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.primary.IsNull() then None else Some(__.Read())

        type prReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productreviewid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productreviewid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.reviewername = OptionalColumn(reader, getOrdinal, reader.GetString, "reviewername")
            member __.reviewdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "reviewdate")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.rating = OptionalColumn(reader, getOrdinal, reader.GetInt32, "rating")
            member __.comments = OptionalColumn(reader, getOrdinal, reader.GetString, "comments")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pr.id = __.id.Read()
                  productreviewid = __.productreviewid.Read()
                  productid = __.productid.Read()
                  reviewername = __.reviewername.Read()
                  reviewdate = __.reviewdate.Read()
                  emailaddress = __.emailaddress.Read()
                  rating = __.rating.Read()
                  comments = __.comments.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pscReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productsubcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
            member __.productcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { psc.id = __.id.Read()
                  productsubcategoryid = __.productsubcategoryid.Read()
                  productcategoryid = __.productcategoryid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type srReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.scrapreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "scrapreasonid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sr.id = __.id.Read()
                  scrapreasonid = __.scrapreasonid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type thReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.transactionid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.referenceorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
            member __.referenceorderlineid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
            member __.transactiondate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
            member __.transactiontype = OptionalColumn(reader, getOrdinal, reader.GetString, "transactiontype")
            member __.quantity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { th.id = __.id.Read()
                  transactionid = __.transactionid.Read()
                  productid = __.productid.Read()
                  referenceorderid = __.referenceorderid.Read()
                  referenceorderlineid = __.referenceorderlineid.Read()
                  transactiondate = __.transactiondate.Read()
                  transactiontype = __.transactiontype.Read()
                  quantity = __.quantity.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type thaReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.transactionid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.referenceorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
            member __.referenceorderlineid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
            member __.transactiondate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
            member __.transactiontype = OptionalColumn(reader, getOrdinal, reader.GetString, "transactiontype")
            member __.quantity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { tha.id = __.id.Read()
                  transactionid = __.transactionid.Read()
                  productid = __.productid.Read()
                  referenceorderid = __.referenceorderid.Read()
                  referenceorderlineid = __.referenceorderlineid.Read()
                  transactiondate = __.transactiondate.Read()
                  transactiontype = __.transactiontype.Read()
                  quantity = __.quantity.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type umReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetString, "id")
            member __.unitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { um.id = __.id.Read()
                  unitmeasurecode = __.unitmeasurecode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type wReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.workorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.orderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "orderqty")
            member __.scrappedqty = OptionalColumn(reader, getOrdinal, reader.GetInt16, "scrappedqty")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.duedate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.scrapreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "scrapreasonid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { w.id = __.id.Read()
                  workorderid = __.workorderid.Read()
                  productid = __.productid.Read()
                  orderqty = __.orderqty.Read()
                  scrappedqty = __.scrappedqty.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  duedate = __.duedate.Read()
                  scrapreasonid = __.scrapreasonid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type wrReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.workorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.operationsequence = OptionalColumn(reader, getOrdinal, reader.GetInt16, "operationsequence")
            member __.locationid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "locationid")
            member __.scheduledstartdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "scheduledstartdate")
            member __.scheduledenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "scheduledenddate")
            member __.actualstartdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualstartdate")
            member __.actualenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualenddate")
            member __.actualresourcehrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualresourcehrs")
            member __.plannedcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "plannedcost")
            member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { wr.id = __.id.Read()
                  workorderid = __.workorderid.Read()
                  productid = __.productid.Read()
                  operationsequence = __.operationsequence.Read()
                  locationid = __.locationid.Read()
                  scheduledstartdate = __.scheduledstartdate.Read()
                  scheduledenddate = __.scheduledenddate.Read()
                  actualstartdate = __.actualstartdate.Read()
                  actualenddate = __.actualenddate.Read()
                  actualresourcehrs = __.actualresourcehrs.Read()
                  plannedcost = __.plannedcost.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

module production =
    [<CLIMutable>]
    type billofmaterials =
        { [<SqlHydra.ProviderDbType("Integer")>]
          billofmaterialsid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productassemblyid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          componentid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: string
          [<SqlHydra.ProviderDbType("Smallint")>]
          bomlevel: int16
          [<SqlHydra.ProviderDbType("Numeric")>]
          perassemblyqty: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type culture =
        { [<SqlHydra.ProviderDbType("Char")>]
          cultureid: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type document =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          title: string
          [<SqlHydra.ProviderDbType("Integer")>]
          owner: int
          [<SqlHydra.ProviderDbType("Boolean")>]
          folderflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          filename: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          fileextension: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          revision: string
          [<SqlHydra.ProviderDbType("Integer")>]
          changenumber: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: int16
          [<SqlHydra.ProviderDbType("Text")>]
          documentsummary: Option<string>
          [<SqlHydra.ProviderDbType("Bytea")>]
          document: Option<byte []>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime
          [<SqlHydra.ProviderDbType("Varchar")>]
          documentnode: string }

    [<CLIMutable>]
    type illustration =
        { [<SqlHydra.ProviderDbType("Integer")>]
          illustrationid: int
          [<SqlHydra.ProviderDbType("Xml")>]
          diagram: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type location =
        { [<SqlHydra.ProviderDbType("Integer")>]
          locationid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Numeric")>]
          costrate: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          availability: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type product =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          productnumber: string
          [<SqlHydra.ProviderDbType("Boolean")>]
          makeflag: bool
          [<SqlHydra.ProviderDbType("Boolean")>]
          finishedgoodsflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          color: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          safetystocklevel: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          reorderpoint: int16
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardcost: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          listprice: decimal
          [<SqlHydra.ProviderDbType("Varchar")>]
          size: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          sizeunitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          weightunitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          weight: Option<decimal>
          [<SqlHydra.ProviderDbType("Integer")>]
          daystomanufacture: int
          [<SqlHydra.ProviderDbType("Char")>]
          productline: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          ``class``: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          style: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          productsubcategoryid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          sellstartdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          sellenddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          discontinueddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productcategory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productcategoryid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productcosthistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardcost: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productdescription =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productdescriptionid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          description: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productdocument =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime
          [<SqlHydra.ProviderDbType("Varchar")>]
          documentnode: string }

    [<CLIMutable>]
    type productinventory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          locationid: int16
          [<SqlHydra.ProviderDbType("Varchar")>]
          shelf: string
          [<SqlHydra.ProviderDbType("Smallint")>]
          bin: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          quantity: int16
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productlistpricehistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          listprice: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productmodel =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Xml")>]
          catalogdescription: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          instructions: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productmodelillustration =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          illustrationid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productmodelproductdescriptionculture =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productdescriptionid: int
          [<SqlHydra.ProviderDbType("Char")>]
          cultureid: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productphoto =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productphotoid: int
          [<SqlHydra.ProviderDbType("Bytea")>]
          thumbnailphoto: Option<byte []>
          [<SqlHydra.ProviderDbType("Varchar")>]
          thumbnailphotofilename: Option<string>
          [<SqlHydra.ProviderDbType("Bytea")>]
          largephoto: Option<byte []>
          [<SqlHydra.ProviderDbType("Varchar")>]
          largephotofilename: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productproductphoto =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productphotoid: int
          [<SqlHydra.ProviderDbType("Boolean")>]
          primary: bool
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productreview =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productreviewid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          reviewername: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          reviewdate: System.DateTime
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: string
          [<SqlHydra.ProviderDbType("Integer")>]
          rating: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          comments: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type productsubcategory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productsubcategoryid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productcategoryid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type scrapreason =
        { [<SqlHydra.ProviderDbType("Integer")>]
          scrapreasonid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type transactionhistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          transactionid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderlineid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          transactiondate: System.DateTime
          [<SqlHydra.ProviderDbType("Char")>]
          transactiontype: string
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type transactionhistoryarchive =
        { [<SqlHydra.ProviderDbType("Integer")>]
          transactionid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          referenceorderlineid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          transactiondate: System.DateTime
          [<SqlHydra.ProviderDbType("Char")>]
          transactiontype: string
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type unitmeasure =
        { [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vproductanddescription =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Name")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Name")>]
          productmodel: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          description: Option<string> }

    [<CLIMutable>]
    type vproductmodelcatalogdescription =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Summary: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          manufacturer: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          copyright: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          producturl: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          warrantyperiod: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          warrantydescription: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          noofyears: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          maintenancedescription: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          wheel: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          saddle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          pedal: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          bikeframe: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          crankset: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          pictureangle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          picturesize: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          productphotoid: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          material: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          color: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          productline: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          style: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          riderexperience: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type vproductmodelinstructions =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productmodelid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          instructions: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          LocationID: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          SetupHours: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          MachineHours: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          LaborHours: Option<decimal>
          [<SqlHydra.ProviderDbType("Integer")>]
          LotSize: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Step: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type workorder =
        { [<SqlHydra.ProviderDbType("Integer")>]
          workorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          orderqty: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          scrappedqty: int16
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: System.DateTime
          [<SqlHydra.ProviderDbType("Smallint")>]
          scrapreasonid: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type workorderrouting =
        { [<SqlHydra.ProviderDbType("Integer")>]
          workorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          operationsequence: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          locationid: int16
          [<SqlHydra.ProviderDbType("Timestamp")>]
          scheduledstartdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          scheduledenddate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          actualstartdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          actualenddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualresourcehrs: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          plannedcost: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          actualcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    module Readers =
        type billofmaterialsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.billofmaterialsid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "billofmaterialsid")
            member __.productassemblyid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productassemblyid")
            member __.componentid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "componentid")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.bomlevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bomlevel")
            member __.perassemblyqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "perassemblyqty")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { billofmaterials.billofmaterialsid = __.billofmaterialsid.Read()
                  productassemblyid = __.productassemblyid.Read()
                  componentid = __.componentid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  unitmeasurecode = __.unitmeasurecode.Read()
                  bomlevel = __.bomlevel.Read()
                  perassemblyqty = __.perassemblyqty.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.billofmaterialsid.IsNull() then None else Some(__.Read())

        type cultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { culture.cultureid = __.cultureid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.cultureid.IsNull() then None else Some(__.Read())

        type documentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.title = RequiredColumn(reader, getOrdinal, reader.GetString, "title")
            member __.owner = RequiredColumn(reader, getOrdinal, reader.GetInt32, "owner")
            member __.folderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "folderflag")
            member __.filename = RequiredColumn(reader, getOrdinal, reader.GetString, "filename")
            member __.fileextension = OptionalColumn(reader, getOrdinal, reader.GetString, "fileextension")
            member __.revision = RequiredColumn(reader, getOrdinal, reader.GetString, "revision")
            member __.changenumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "changenumber")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.documentsummary = OptionalColumn(reader, getOrdinal, reader.GetString, "documentsummary")
            member __.document = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "document")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")

            member __.Read() =
                { document.title = __.title.Read()
                  owner = __.owner.Read()
                  folderflag = __.folderflag.Read()
                  filename = __.filename.Read()
                  fileextension = __.fileextension.Read()
                  revision = __.revision.Read()
                  changenumber = __.changenumber.Read()
                  status = __.status.Read()
                  documentsummary = __.documentsummary.Read()
                  document = __.document.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read()
                  documentnode = __.documentnode.Read() }

            member __.ReadIfNotNull() =
                if __.documentnode.IsNull() then None else Some(__.Read())

        type illustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
            member __.diagram = OptionalColumn(reader, getOrdinal, reader.GetString, "diagram")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { illustration.illustrationid = __.illustrationid.Read()
                  diagram = __.diagram.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.illustrationid.IsNull() then None else Some(__.Read())

        type locationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "locationid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.costrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costrate")
            member __.availability = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "availability")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { location.locationid = __.locationid.Read()
                  name = __.name.Read()
                  costrate = __.costrate.Read()
                  availability = __.availability.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.locationid.IsNull() then None else Some(__.Read())

        type productReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.productnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "productnumber")
            member __.makeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "makeflag")
            member __.finishedgoodsflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "finishedgoodsflag")
            member __.color = OptionalColumn(reader, getOrdinal, reader.GetString, "color")
            member __.safetystocklevel = RequiredColumn(reader, getOrdinal, reader.GetInt16, "safetystocklevel")
            member __.reorderpoint = RequiredColumn(reader, getOrdinal, reader.GetInt16, "reorderpoint")
            member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
            member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
            member __.size = OptionalColumn(reader, getOrdinal, reader.GetString, "size")
            member __.sizeunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "sizeunitmeasurecode")
            member __.weightunitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "weightunitmeasurecode")
            member __.weight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "weight")
            member __.daystomanufacture = RequiredColumn(reader, getOrdinal, reader.GetInt32, "daystomanufacture")
            member __.productline = OptionalColumn(reader, getOrdinal, reader.GetString, "productline")
            member __.``class`` = OptionalColumn(reader, getOrdinal, reader.GetString, "class")
            member __.style = OptionalColumn(reader, getOrdinal, reader.GetString, "style")
            member __.productsubcategoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.sellstartdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "sellstartdate")
            member __.sellenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "sellenddate")
            member __.discontinueddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "discontinueddate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { product.productid = __.productid.Read()
                  name = __.name.Read()
                  productnumber = __.productnumber.Read()
                  makeflag = __.makeflag.Read()
                  finishedgoodsflag = __.finishedgoodsflag.Read()
                  color = __.color.Read()
                  safetystocklevel = __.safetystocklevel.Read()
                  reorderpoint = __.reorderpoint.Read()
                  standardcost = __.standardcost.Read()
                  listprice = __.listprice.Read()
                  size = __.size.Read()
                  sizeunitmeasurecode = __.sizeunitmeasurecode.Read()
                  weightunitmeasurecode = __.weightunitmeasurecode.Read()
                  weight = __.weight.Read()
                  daystomanufacture = __.daystomanufacture.Read()
                  productline = __.productline.Read()
                  ``class`` = __.``class``.Read()
                  style = __.style.Read()
                  productsubcategoryid = __.productsubcategoryid.Read()
                  productmodelid = __.productmodelid.Read()
                  sellstartdate = __.sellstartdate.Read()
                  sellenddate = __.sellenddate.Read()
                  discontinueddate = __.discontinueddate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productcategory.productcategoryid = __.productcategoryid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productcategoryid.IsNull() then None else Some(__.Read())

        type productcosthistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.standardcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardcost")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productcosthistory.productid = __.productid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  standardcost = __.standardcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productdescriptionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
            member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productdescription.productdescriptionid = __.productdescriptionid.Read()
                  description = __.description.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productdescriptionid.IsNull() then None else Some(__.Read())

        type productdocumentReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")
            member __.documentnode = RequiredColumn(reader, getOrdinal, reader.GetString, "documentnode")

            member __.Read() =
                { productdocument.productid = __.productid.Read()
                  modifieddate = __.modifieddate.Read()
                  documentnode = __.documentnode.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productinventoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
            member __.shelf = RequiredColumn(reader, getOrdinal, reader.GetString, "shelf")
            member __.bin = RequiredColumn(reader, getOrdinal, reader.GetInt16, "bin")
            member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt16, "quantity")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productinventory.productid = __.productid.Read()
                  locationid = __.locationid.Read()
                  shelf = __.shelf.Read()
                  bin = __.bin.Read()
                  quantity = __.quantity.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productlistpricehistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.listprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "listprice")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productlistpricehistory.productid = __.productid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  listprice = __.listprice.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productmodelReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.catalogdescription = OptionalColumn(reader, getOrdinal, reader.GetString, "catalogdescription")
            member __.instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "instructions")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productmodel.productmodelid = __.productmodelid.Read()
                  name = __.name.Read()
                  catalogdescription = __.catalogdescription.Read()
                  instructions = __.instructions.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type productmodelillustrationReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.illustrationid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "illustrationid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productmodelillustration.productmodelid = __.productmodelid.Read()
                  illustrationid = __.illustrationid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type productmodelproductdescriptioncultureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.productdescriptionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productdescriptionid")
            member __.cultureid = RequiredColumn(reader, getOrdinal, reader.GetString, "cultureid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productmodelproductdescriptionculture.productmodelid = __.productmodelid.Read()
                  productdescriptionid = __.productdescriptionid.Read()
                  cultureid = __.cultureid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type productphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
            member __.thumbnailphoto = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "thumbnailphoto")
            member __.thumbnailphotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "thumbnailphotofilename")
            member __.largephoto = OptionalColumn(reader, getOrdinal, reader.GetFieldValue, "largephoto")
            member __.largephotofilename = OptionalColumn(reader, getOrdinal, reader.GetString, "largephotofilename")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productphoto.productphotoid = __.productphotoid.Read()
                  thumbnailphoto = __.thumbnailphoto.Read()
                  thumbnailphotofilename = __.thumbnailphotofilename.Read()
                  largephoto = __.largephoto.Read()
                  largephotofilename = __.largephotofilename.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productphotoid.IsNull() then None else Some(__.Read())

        type productproductphotoReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.productphotoid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productphotoid")
            member __.primary = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "primary")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productproductphoto.productid = __.productid.Read()
                  productphotoid = __.productphotoid.Read()
                  primary = __.primary.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type productreviewReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productreviewid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productreviewid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.reviewername = RequiredColumn(reader, getOrdinal, reader.GetString, "reviewername")
            member __.reviewdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "reviewdate")
            member __.emailaddress = RequiredColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.rating = RequiredColumn(reader, getOrdinal, reader.GetInt32, "rating")
            member __.comments = OptionalColumn(reader, getOrdinal, reader.GetString, "comments")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productreview.productreviewid = __.productreviewid.Read()
                  productid = __.productid.Read()
                  reviewername = __.reviewername.Read()
                  reviewdate = __.reviewdate.Read()
                  emailaddress = __.emailaddress.Read()
                  rating = __.rating.Read()
                  comments = __.comments.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productreviewid.IsNull() then None else Some(__.Read())

        type productsubcategoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productsubcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productsubcategoryid")
            member __.productcategoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productcategoryid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productsubcategory.productsubcategoryid = __.productsubcategoryid.Read()
                  productcategoryid = __.productcategoryid.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productsubcategoryid.IsNull() then None else Some(__.Read())

        type scrapreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.scrapreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "scrapreasonid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { scrapreason.scrapreasonid = __.scrapreasonid.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.scrapreasonid.IsNull() then None else Some(__.Read())

        type transactionhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
            member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
            member __.transactiondate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
            member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
            member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { transactionhistory.transactionid = __.transactionid.Read()
                  productid = __.productid.Read()
                  referenceorderid = __.referenceorderid.Read()
                  referenceorderlineid = __.referenceorderlineid.Read()
                  transactiondate = __.transactiondate.Read()
                  transactiontype = __.transactiontype.Read()
                  quantity = __.quantity.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.transactionid.IsNull() then None else Some(__.Read())

        type transactionhistoryarchiveReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.transactionid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "transactionid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.referenceorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderid")
            member __.referenceorderlineid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "referenceorderlineid")
            member __.transactiondate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "transactiondate")
            member __.transactiontype = RequiredColumn(reader, getOrdinal, reader.GetString, "transactiontype")
            member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.actualcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { transactionhistoryarchive.transactionid = __.transactionid.Read()
                  productid = __.productid.Read()
                  referenceorderid = __.referenceorderid.Read()
                  referenceorderlineid = __.referenceorderlineid.Read()
                  transactiondate = __.transactiondate.Read()
                  transactiontype = __.transactiontype.Read()
                  quantity = __.quantity.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.transactionid.IsNull() then None else Some(__.Read())

        type unitmeasureReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { unitmeasure.unitmeasurecode = __.unitmeasurecode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.unitmeasurecode.IsNull() then None else Some(__.Read())

        type vproductanddescriptionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.productmodel = OptionalColumn(reader, getOrdinal, reader.GetString, "productmodel")
            member __.description = OptionalColumn(reader, getOrdinal, reader.GetString, "description")

            member __.Read() =
                { vproductanddescription.productid = __.productid.Read()
                  name = __.name.Read()
                  productmodel = __.productmodel.Read()
                  description = __.description.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type vproductmodelcatalogdescriptionReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.Summary = OptionalColumn(reader, getOrdinal, reader.GetString, "Summary")
            member __.manufacturer = OptionalColumn(reader, getOrdinal, reader.GetString, "manufacturer")
            member __.copyright = OptionalColumn(reader, getOrdinal, reader.GetString, "copyright")
            member __.producturl = OptionalColumn(reader, getOrdinal, reader.GetString, "producturl")
            member __.warrantyperiod = OptionalColumn(reader, getOrdinal, reader.GetString, "warrantyperiod")
            member __.warrantydescription = OptionalColumn(reader, getOrdinal, reader.GetString, "warrantydescription")
            member __.noofyears = OptionalColumn(reader, getOrdinal, reader.GetString, "noofyears")
            member __.maintenancedescription = OptionalColumn(reader, getOrdinal, reader.GetString, "maintenancedescription")
            member __.wheel = OptionalColumn(reader, getOrdinal, reader.GetString, "wheel")
            member __.saddle = OptionalColumn(reader, getOrdinal, reader.GetString, "saddle")
            member __.pedal = OptionalColumn(reader, getOrdinal, reader.GetString, "pedal")
            member __.bikeframe = OptionalColumn(reader, getOrdinal, reader.GetString, "bikeframe")
            member __.crankset = OptionalColumn(reader, getOrdinal, reader.GetString, "crankset")
            member __.pictureangle = OptionalColumn(reader, getOrdinal, reader.GetString, "pictureangle")
            member __.picturesize = OptionalColumn(reader, getOrdinal, reader.GetString, "picturesize")
            member __.productphotoid = OptionalColumn(reader, getOrdinal, reader.GetString, "productphotoid")
            member __.material = OptionalColumn(reader, getOrdinal, reader.GetString, "material")
            member __.color = OptionalColumn(reader, getOrdinal, reader.GetString, "color")
            member __.productline = OptionalColumn(reader, getOrdinal, reader.GetString, "productline")
            member __.style = OptionalColumn(reader, getOrdinal, reader.GetString, "style")
            member __.riderexperience = OptionalColumn(reader, getOrdinal, reader.GetString, "riderexperience")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { vproductmodelcatalogdescription.productmodelid = __.productmodelid.Read()
                  name = __.name.Read()
                  Summary = __.Summary.Read()
                  manufacturer = __.manufacturer.Read()
                  copyright = __.copyright.Read()
                  producturl = __.producturl.Read()
                  warrantyperiod = __.warrantyperiod.Read()
                  warrantydescription = __.warrantydescription.Read()
                  noofyears = __.noofyears.Read()
                  maintenancedescription = __.maintenancedescription.Read()
                  wheel = __.wheel.Read()
                  saddle = __.saddle.Read()
                  pedal = __.pedal.Read()
                  bikeframe = __.bikeframe.Read()
                  crankset = __.crankset.Read()
                  pictureangle = __.pictureangle.Read()
                  picturesize = __.picturesize.Read()
                  productphotoid = __.productphotoid.Read()
                  material = __.material.Read()
                  color = __.color.Read()
                  productline = __.productline.Read()
                  style = __.style.Read()
                  riderexperience = __.riderexperience.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type vproductmodelinstructionsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productmodelid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productmodelid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.instructions = OptionalColumn(reader, getOrdinal, reader.GetString, "instructions")
            member __.LocationID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "LocationID")
            member __.SetupHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "SetupHours")
            member __.MachineHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "MachineHours")
            member __.LaborHours = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "LaborHours")
            member __.LotSize = OptionalColumn(reader, getOrdinal, reader.GetInt32, "LotSize")
            member __.Step = OptionalColumn(reader, getOrdinal, reader.GetString, "Step")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { vproductmodelinstructions.productmodelid = __.productmodelid.Read()
                  name = __.name.Read()
                  instructions = __.instructions.Read()
                  LocationID = __.LocationID.Read()
                  SetupHours = __.SetupHours.Read()
                  MachineHours = __.MachineHours.Read()
                  LaborHours = __.LaborHours.Read()
                  LotSize = __.LotSize.Read()
                  Step = __.Step.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productmodelid.IsNull() then None else Some(__.Read())

        type workorderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "orderqty")
            member __.scrappedqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "scrappedqty")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.scrapreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt16, "scrapreasonid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { workorder.workorderid = __.workorderid.Read()
                  productid = __.productid.Read()
                  orderqty = __.orderqty.Read()
                  scrappedqty = __.scrappedqty.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  duedate = __.duedate.Read()
                  scrapreasonid = __.scrapreasonid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.workorderid.IsNull() then None else Some(__.Read())

        type workorderroutingReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.workorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "workorderid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.operationsequence = RequiredColumn(reader, getOrdinal, reader.GetInt16, "operationsequence")
            member __.locationid = RequiredColumn(reader, getOrdinal, reader.GetInt16, "locationid")
            member __.scheduledstartdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "scheduledstartdate")
            member __.scheduledenddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "scheduledenddate")
            member __.actualstartdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualstartdate")
            member __.actualenddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "actualenddate")
            member __.actualresourcehrs = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualresourcehrs")
            member __.plannedcost = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "plannedcost")
            member __.actualcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "actualcost")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { workorderrouting.workorderid = __.workorderid.Read()
                  productid = __.productid.Read()
                  operationsequence = __.operationsequence.Read()
                  locationid = __.locationid.Read()
                  scheduledstartdate = __.scheduledstartdate.Read()
                  scheduledenddate = __.scheduledenddate.Read()
                  actualstartdate = __.actualstartdate.Read()
                  actualenddate = __.actualenddate.Read()
                  actualresourcehrs = __.actualresourcehrs.Read()
                  plannedcost = __.plannedcost.Read()
                  actualcost = __.actualcost.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.workorderid.IsNull() then None else Some(__.Read())

module pu =
    [<CLIMutable>]
    type pod =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderdetailid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Smallint")>]
          orderqty: Option<int16>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitprice: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          receivedqty: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          rejectedqty: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type poh =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          revisionnumber: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: Option<int16>
          [<SqlHydra.ProviderDbType("Integer")>]
          employeeid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          vendorid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          orderdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          shipdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          subtotal: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxamt: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          freight: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pv =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          averageleadtime: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardprice: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          lastreceiptcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          lastreceiptdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Integer")>]
          minorderqty: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          maxorderqty: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          onorderqty: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sm =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          shipbase: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          shiprate: Option<decimal>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type v =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          accountnumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          creditrating: Option<int16>
          [<SqlHydra.ProviderDbType("Boolean")>]
          preferredvendorstatus: bool
          [<SqlHydra.ProviderDbType("Boolean")>]
          activeflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          purchasingwebserviceurl: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    module Readers =
        type podReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.purchaseorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
            member __.purchaseorderdetailid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderdetailid")
            member __.duedate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.orderqty = OptionalColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.unitprice = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
            member __.receivedqty = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "receivedqty")
            member __.rejectedqty = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "rejectedqty")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pod.id = __.id.Read()
                  purchaseorderid = __.purchaseorderid.Read()
                  purchaseorderdetailid = __.purchaseorderdetailid.Read()
                  duedate = __.duedate.Read()
                  orderqty = __.orderqty.Read()
                  productid = __.productid.Read()
                  unitprice = __.unitprice.Read()
                  receivedqty = __.receivedqty.Read()
                  rejectedqty = __.rejectedqty.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pohReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.purchaseorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
            member __.revisionnumber = OptionalColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
            member __.status = OptionalColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.employeeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "employeeid")
            member __.vendorid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "vendorid")
            member __.shipmethodid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.orderdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
            member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
            member __.subtotal = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
            member __.taxamt = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
            member __.freight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "freight")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { poh.id = __.id.Read()
                  purchaseorderid = __.purchaseorderid.Read()
                  revisionnumber = __.revisionnumber.Read()
                  status = __.status.Read()
                  employeeid = __.employeeid.Read()
                  vendorid = __.vendorid.Read()
                  shipmethodid = __.shipmethodid.Read()
                  orderdate = __.orderdate.Read()
                  shipdate = __.shipdate.Read()
                  subtotal = __.subtotal.Read()
                  taxamt = __.taxamt.Read()
                  freight = __.freight.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pvReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.averageleadtime = OptionalColumn(reader, getOrdinal, reader.GetInt32, "averageleadtime")
            member __.standardprice = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "standardprice")
            member __.lastreceiptcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "lastreceiptcost")
            member __.lastreceiptdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "lastreceiptdate")
            member __.minorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "minorderqty")
            member __.maxorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "maxorderqty")
            member __.onorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "onorderqty")
            member __.unitmeasurecode = OptionalColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pv.id = __.id.Read()
                  productid = __.productid.Read()
                  businessentityid = __.businessentityid.Read()
                  averageleadtime = __.averageleadtime.Read()
                  standardprice = __.standardprice.Read()
                  lastreceiptcost = __.lastreceiptcost.Read()
                  lastreceiptdate = __.lastreceiptdate.Read()
                  minorderqty = __.minorderqty.Read()
                  maxorderqty = __.maxorderqty.Read()
                  onorderqty = __.onorderqty.Read()
                  unitmeasurecode = __.unitmeasurecode.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type smReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.shipmethodid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.shipbase = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "shipbase")
            member __.shiprate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "shiprate")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sm.id = __.id.Read()
                  shipmethodid = __.shipmethodid.Read()
                  name = __.name.Read()
                  shipbase = __.shipbase.Read()
                  shiprate = __.shiprate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type vReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.accountnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "accountnumber")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.creditrating = OptionalColumn(reader, getOrdinal, reader.GetInt16, "creditrating")
            member __.preferredvendorstatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "preferredvendorstatus")
            member __.activeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "activeflag")
            member __.purchasingwebserviceurl = OptionalColumn(reader, getOrdinal, reader.GetString, "purchasingwebserviceurl")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { v.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  accountnumber = __.accountnumber.Read()
                  name = __.name.Read()
                  creditrating = __.creditrating.Read()
                  preferredvendorstatus = __.preferredvendorstatus.Read()
                  activeflag = __.activeflag.Read()
                  purchasingwebserviceurl = __.purchasingwebserviceurl.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.preferredvendorstatus.IsNull() then None else Some(__.Read())

module purchasing =
    [<CLIMutable>]
    type productvendor =
        { [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          averageleadtime: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          standardprice: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          lastreceiptcost: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          lastreceiptdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Integer")>]
          minorderqty: int
          [<SqlHydra.ProviderDbType("Integer")>]
          maxorderqty: int
          [<SqlHydra.ProviderDbType("Integer")>]
          onorderqty: Option<int>
          [<SqlHydra.ProviderDbType("Char")>]
          unitmeasurecode: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type purchaseorderdetail =
        { [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderdetailid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: System.DateTime
          [<SqlHydra.ProviderDbType("Smallint")>]
          orderqty: int16
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitprice: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          receivedqty: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          rejectedqty: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type purchaseorderheader =
        { [<SqlHydra.ProviderDbType("Integer")>]
          purchaseorderid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          revisionnumber: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: int16
          [<SqlHydra.ProviderDbType("Integer")>]
          employeeid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          vendorid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          orderdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          shipdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          subtotal: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxamt: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          freight: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type shipmethod =
        { [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Numeric")>]
          shipbase: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          shiprate: decimal
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vendor =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          accountnumber: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Smallint")>]
          creditrating: int16
          [<SqlHydra.ProviderDbType("Boolean")>]
          preferredvendorstatus: bool
          [<SqlHydra.ProviderDbType("Boolean")>]
          activeflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          purchasingwebserviceurl: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vvendorwithaddresses =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addresstype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregionname: Option<string> }

    [<CLIMutable>]
    type vvendorwithcontacts =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          contacttype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumbertype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int> }

    module Readers =
        type productvendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.averageleadtime = RequiredColumn(reader, getOrdinal, reader.GetInt32, "averageleadtime")
            member __.standardprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "standardprice")
            member __.lastreceiptcost = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "lastreceiptcost")
            member __.lastreceiptdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "lastreceiptdate")
            member __.minorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "minorderqty")
            member __.maxorderqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "maxorderqty")
            member __.onorderqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "onorderqty")
            member __.unitmeasurecode = RequiredColumn(reader, getOrdinal, reader.GetString, "unitmeasurecode")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { productvendor.productid = __.productid.Read()
                  businessentityid = __.businessentityid.Read()
                  averageleadtime = __.averageleadtime.Read()
                  standardprice = __.standardprice.Read()
                  lastreceiptcost = __.lastreceiptcost.Read()
                  lastreceiptdate = __.lastreceiptdate.Read()
                  minorderqty = __.minorderqty.Read()
                  maxorderqty = __.maxorderqty.Read()
                  onorderqty = __.onorderqty.Read()
                  unitmeasurecode = __.unitmeasurecode.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.productid.IsNull() then None else Some(__.Read())

        type purchaseorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
            member __.purchaseorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderdetailid")
            member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
            member __.receivedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "receivedqty")
            member __.rejectedqty = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "rejectedqty")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { purchaseorderdetail.purchaseorderid = __.purchaseorderid.Read()
                  purchaseorderdetailid = __.purchaseorderdetailid.Read()
                  duedate = __.duedate.Read()
                  orderqty = __.orderqty.Read()
                  productid = __.productid.Read()
                  unitprice = __.unitprice.Read()
                  receivedqty = __.receivedqty.Read()
                  rejectedqty = __.rejectedqty.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.purchaseorderid.IsNull() then None else Some(__.Read())

        type purchaseorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.purchaseorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "purchaseorderid")
            member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.employeeid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "employeeid")
            member __.vendorid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "vendorid")
            member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.orderdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
            member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
            member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
            member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
            member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { purchaseorderheader.purchaseorderid = __.purchaseorderid.Read()
                  revisionnumber = __.revisionnumber.Read()
                  status = __.status.Read()
                  employeeid = __.employeeid.Read()
                  vendorid = __.vendorid.Read()
                  shipmethodid = __.shipmethodid.Read()
                  orderdate = __.orderdate.Read()
                  shipdate = __.shipdate.Read()
                  subtotal = __.subtotal.Read()
                  taxamt = __.taxamt.Read()
                  freight = __.freight.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.purchaseorderid.IsNull() then None else Some(__.Read())

        type shipmethodReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.shipbase = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shipbase")
            member __.shiprate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "shiprate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { shipmethod.shipmethodid = __.shipmethodid.Read()
                  name = __.name.Read()
                  shipbase = __.shipbase.Read()
                  shiprate = __.shiprate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.shipmethodid.IsNull() then None else Some(__.Read())

        type vendorReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.accountnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "accountnumber")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.creditrating = RequiredColumn(reader, getOrdinal, reader.GetInt16, "creditrating")
            member __.preferredvendorstatus = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "preferredvendorstatus")
            member __.activeflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "activeflag")
            member __.purchasingwebserviceurl = OptionalColumn(reader, getOrdinal, reader.GetString, "purchasingwebserviceurl")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { vendor.businessentityid = __.businessentityid.Read()
                  accountnumber = __.accountnumber.Read()
                  name = __.name.Read()
                  creditrating = __.creditrating.Read()
                  preferredvendorstatus = __.preferredvendorstatus.Read()
                  activeflag = __.activeflag.Read()
                  purchasingwebserviceurl = __.purchasingwebserviceurl.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vvendorwithaddressesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.addresstype = OptionalColumn(reader, getOrdinal, reader.GetString, "addresstype")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")

            member __.Read() =
                { vvendorwithaddresses.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  addresstype = __.addresstype.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovincename = __.stateprovincename.Read()
                  postalcode = __.postalcode.Read()
                  countryregionname = __.countryregionname.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vvendorwithcontactsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.contacttype = OptionalColumn(reader, getOrdinal, reader.GetString, "contacttype")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertype = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumbertype")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")

            member __.Read() =
                { vvendorwithcontacts.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  contacttype = __.contacttype.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertype = __.phonenumbertype.Read()
                  emailaddress = __.emailaddress.Read()
                  emailpromotion = __.emailpromotion.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

module sa =
    [<CLIMutable>]
    type c =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          customerid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          personid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          storeid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type cc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          cardtype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          cardnumber: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          expmonth: Option<int16>
          [<SqlHydra.ProviderDbType("Smallint")>]
          expyear: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type cr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          currencyrateid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          currencyratedate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Char")>]
          fromcurrencycode: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          tocurrencycode: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          averagerate: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          endofdayrate: Option<decimal>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type crc =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          currencycode: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type cu =
        { [<SqlHydra.ProviderDbType("Char")>]
          id: Option<string>
          [<SqlHydra.ProviderDbType("Char")>]
          currencycode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type pcc =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type s =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          salespersonid: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          demographics: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sci =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shoppingcartitemid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          shoppingcartid: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          datecreated: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type so =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          description: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          discountpct: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``type``: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          category: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Integer")>]
          minqty: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          maxqty: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sod =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salesorderdetailid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          carriertrackingnumber: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          orderqty: Option<int16>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitprice: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitpricediscount: Option<decimal>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type soh =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          revisionnumber: Option<int16>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          orderdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          shipdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: Option<int16>
          [<SqlHydra.ProviderDbType("Boolean")>]
          onlineorderflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          purchaseordernumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          accountnumber: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          customerid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salespersonid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          billtoaddressid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shiptoaddressid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          creditcardapprovalcode: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          currencyrateid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          subtotal: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxamt: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          freight: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          totaldue: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          comment: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sohsr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salesreasonid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sop =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sp =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesquota: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          bonus: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          commissionpct: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesytd: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          saleslastyear: Option<decimal>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type spqh =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          quotadate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesquota: Option<decimal>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salesreasonid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          reasontype: Option<string>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type st =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          group: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesytd: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          saleslastyear: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          costytd: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          costlastyear: Option<decimal>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type sth =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    [<CLIMutable>]
    type tr =
        { [<SqlHydra.ProviderDbType("Integer")>]
          id: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          salestaxrateid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: Option<int>
          [<SqlHydra.ProviderDbType("Smallint")>]
          taxtype: Option<int16>
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxrate: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: Option<System.Guid>
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: Option<System.DateTime> }

    module Readers =
        type cReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.customerid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "customerid")
            member __.personid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "personid")
            member __.storeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "storeid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { c.id = __.id.Read()
                  customerid = __.customerid.Read()
                  personid = __.personid.Read()
                  storeid = __.storeid.Read()
                  territoryid = __.territoryid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type ccReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.cardtype = OptionalColumn(reader, getOrdinal, reader.GetString, "cardtype")
            member __.cardnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "cardnumber")
            member __.expmonth = OptionalColumn(reader, getOrdinal, reader.GetInt16, "expmonth")
            member __.expyear = OptionalColumn(reader, getOrdinal, reader.GetInt16, "expyear")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { cc.id = __.id.Read()
                  creditcardid = __.creditcardid.Read()
                  cardtype = __.cardtype.Read()
                  cardnumber = __.cardnumber.Read()
                  expmonth = __.expmonth.Read()
                  expyear = __.expyear.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type crReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.currencyrateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
            member __.currencyratedate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "currencyratedate")
            member __.fromcurrencycode = OptionalColumn(reader, getOrdinal, reader.GetString, "fromcurrencycode")
            member __.tocurrencycode = OptionalColumn(reader, getOrdinal, reader.GetString, "tocurrencycode")
            member __.averagerate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "averagerate")
            member __.endofdayrate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "endofdayrate")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { cr.currencyrateid = __.currencyrateid.Read()
                  currencyratedate = __.currencyratedate.Read()
                  fromcurrencycode = __.fromcurrencycode.Read()
                  tocurrencycode = __.tocurrencycode.Read()
                  averagerate = __.averagerate.Read()
                  endofdayrate = __.endofdayrate.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.currencyrateid.IsNull() then None else Some(__.Read())

        type crcReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.countryregioncode = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.currencycode = OptionalColumn(reader, getOrdinal, reader.GetString, "currencycode")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { crc.countryregioncode = __.countryregioncode.Read()
                  currencycode = __.currencycode.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.countryregioncode.IsNull() then None else Some(__.Read())

        type cuReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetString, "id")
            member __.currencycode = OptionalColumn(reader, getOrdinal, reader.GetString, "currencycode")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { cu.id = __.id.Read()
                  currencycode = __.currencycode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type pccReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { pcc.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  creditcardid = __.creditcardid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
            member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { s.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  salespersonid = __.salespersonid.Read()
                  demographics = __.demographics.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sciReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.shoppingcartitemid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shoppingcartitemid")
            member __.shoppingcartid = OptionalColumn(reader, getOrdinal, reader.GetString, "shoppingcartid")
            member __.quantity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.datecreated = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "datecreated")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sci.id = __.id.Read()
                  shoppingcartitemid = __.shoppingcartitemid.Read()
                  shoppingcartid = __.shoppingcartid.Read()
                  quantity = __.quantity.Read()
                  productid = __.productid.Read()
                  datecreated = __.datecreated.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type soReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.specialofferid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.description = OptionalColumn(reader, getOrdinal, reader.GetString, "description")
            member __.discountpct = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "discountpct")
            member __.``type`` = OptionalColumn(reader, getOrdinal, reader.GetString, "type")
            member __.category = OptionalColumn(reader, getOrdinal, reader.GetString, "category")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.minqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "minqty")
            member __.maxqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "maxqty")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { so.id = __.id.Read()
                  specialofferid = __.specialofferid.Read()
                  description = __.description.Read()
                  discountpct = __.discountpct.Read()
                  ``type`` = __.``type``.Read()
                  category = __.category.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  minqty = __.minqty.Read()
                  maxqty = __.maxqty.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sodReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.salesorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.salesorderdetailid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesorderdetailid")
            member __.carriertrackingnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "carriertrackingnumber")
            member __.orderqty = OptionalColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.specialofferid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.unitprice = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
            member __.unitpricediscount = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "unitpricediscount")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sod.id = __.id.Read()
                  salesorderid = __.salesorderid.Read()
                  salesorderdetailid = __.salesorderdetailid.Read()
                  carriertrackingnumber = __.carriertrackingnumber.Read()
                  orderqty = __.orderqty.Read()
                  productid = __.productid.Read()
                  specialofferid = __.specialofferid.Read()
                  unitprice = __.unitprice.Read()
                  unitpricediscount = __.unitpricediscount.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sohReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.salesorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.revisionnumber = OptionalColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
            member __.orderdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
            member __.duedate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
            member __.status = OptionalColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.onlineorderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "onlineorderflag")
            member __.purchaseordernumber = OptionalColumn(reader, getOrdinal, reader.GetString, "purchaseordernumber")
            member __.accountnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "accountnumber")
            member __.customerid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "customerid")
            member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.billtoaddressid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "billtoaddressid")
            member __.shiptoaddressid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shiptoaddressid")
            member __.shipmethodid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.creditcardapprovalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "creditcardapprovalcode")
            member __.currencyrateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
            member __.subtotal = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
            member __.taxamt = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
            member __.freight = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "freight")
            member __.totaldue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "totaldue")
            member __.comment = OptionalColumn(reader, getOrdinal, reader.GetString, "comment")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { soh.id = __.id.Read()
                  salesorderid = __.salesorderid.Read()
                  revisionnumber = __.revisionnumber.Read()
                  orderdate = __.orderdate.Read()
                  duedate = __.duedate.Read()
                  shipdate = __.shipdate.Read()
                  status = __.status.Read()
                  onlineorderflag = __.onlineorderflag.Read()
                  purchaseordernumber = __.purchaseordernumber.Read()
                  accountnumber = __.accountnumber.Read()
                  customerid = __.customerid.Read()
                  salespersonid = __.salespersonid.Read()
                  territoryid = __.territoryid.Read()
                  billtoaddressid = __.billtoaddressid.Read()
                  shiptoaddressid = __.shiptoaddressid.Read()
                  shipmethodid = __.shipmethodid.Read()
                  creditcardid = __.creditcardid.Read()
                  creditcardapprovalcode = __.creditcardapprovalcode.Read()
                  currencyrateid = __.currencyrateid.Read()
                  subtotal = __.subtotal.Read()
                  taxamt = __.taxamt.Read()
                  freight = __.freight.Read()
                  totaldue = __.totaldue.Read()
                  comment = __.comment.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.onlineorderflag.IsNull() then None else Some(__.Read())

        type sohsrReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salesorderid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.salesreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sohsr.salesorderid = __.salesorderid.Read()
                  salesreasonid = __.salesreasonid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salesorderid.IsNull() then None else Some(__.Read())

        type sopReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.specialofferid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.productid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sop.id = __.id.Read()
                  specialofferid = __.specialofferid.Read()
                  productid = __.productid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type spReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
            member __.bonus = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "bonus")
            member __.commissionpct = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "commissionpct")
            member __.salesytd = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
            member __.saleslastyear = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sp.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  territoryid = __.territoryid.Read()
                  salesquota = __.salesquota.Read()
                  bonus = __.bonus.Read()
                  commissionpct = __.commissionpct.Read()
                  salesytd = __.salesytd.Read()
                  saleslastyear = __.saleslastyear.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type spqhReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.quotadate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "quotadate")
            member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { spqh.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  quotadate = __.quotadate.Read()
                  salesquota = __.salesquota.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type srReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.salesreasonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.reasontype = OptionalColumn(reader, getOrdinal, reader.GetString, "reasontype")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sr.id = __.id.Read()
                  salesreasonid = __.salesreasonid.Read()
                  name = __.name.Read()
                  reasontype = __.reasontype.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type stReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.countryregioncode = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.group = OptionalColumn(reader, getOrdinal, reader.GetString, "group")
            member __.salesytd = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
            member __.saleslastyear = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
            member __.costytd = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "costytd")
            member __.costlastyear = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "costlastyear")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { st.id = __.id.Read()
                  territoryid = __.territoryid.Read()
                  name = __.name.Read()
                  countryregioncode = __.countryregioncode.Read()
                  group = __.group.Read()
                  salesytd = __.salesytd.Read()
                  saleslastyear = __.saleslastyear.Read()
                  costytd = __.costytd.Read()
                  costlastyear = __.costlastyear.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type sthReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.startdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { sth.id = __.id.Read()
                  businessentityid = __.businessentityid.Read()
                  territoryid = __.territoryid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

        type trReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.id = OptionalColumn(reader, getOrdinal, reader.GetInt32, "id")
            member __.salestaxrateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salestaxrateid")
            member __.stateprovinceid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.taxtype = OptionalColumn(reader, getOrdinal, reader.GetInt16, "taxtype")
            member __.taxrate = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "taxrate")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = OptionalColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { tr.id = __.id.Read()
                  salestaxrateid = __.salestaxrateid.Read()
                  stateprovinceid = __.stateprovinceid.Read()
                  taxtype = __.taxtype.Read()
                  taxrate = __.taxrate.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.id.IsNull() then None else Some(__.Read())

module sales =
    [<CLIMutable>]
    type countryregioncurrency =
        { [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: string
          [<SqlHydra.ProviderDbType("Char")>]
          currencycode: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type creditcard =
        { [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          cardtype: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          cardnumber: string
          [<SqlHydra.ProviderDbType("Smallint")>]
          expmonth: int16
          [<SqlHydra.ProviderDbType("Smallint")>]
          expyear: int16
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type currency =
        { [<SqlHydra.ProviderDbType("Char")>]
          currencycode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type currencyrate =
        { [<SqlHydra.ProviderDbType("Integer")>]
          currencyrateid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          currencyratedate: System.DateTime
          [<SqlHydra.ProviderDbType("Char")>]
          fromcurrencycode: string
          [<SqlHydra.ProviderDbType("Char")>]
          tocurrencycode: string
          [<SqlHydra.ProviderDbType("Numeric")>]
          averagerate: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          endofdayrate: decimal
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type customer =
        { [<SqlHydra.ProviderDbType("Integer")>]
          customerid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          personid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          storeid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type personcreditcard =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesorderdetail =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          salesorderdetailid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          carriertrackingnumber: Option<string>
          [<SqlHydra.ProviderDbType("Smallint")>]
          orderqty: int16
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: int
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitprice: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          unitpricediscount: decimal
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesorderheader =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          revisionnumber: int16
          [<SqlHydra.ProviderDbType("Timestamp")>]
          orderdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          duedate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          shipdate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Smallint")>]
          status: int16
          [<SqlHydra.ProviderDbType("Boolean")>]
          onlineorderflag: bool
          [<SqlHydra.ProviderDbType("Varchar")>]
          purchaseordernumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          accountnumber: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          customerid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          salespersonid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          billtoaddressid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          shiptoaddressid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          shipmethodid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          creditcardid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          creditcardapprovalcode: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          currencyrateid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          subtotal: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxamt: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          freight: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          totaldue: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          comment: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesorderheadersalesreason =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salesorderid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          salesreasonid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesperson =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: Option<int>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesquota: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          bonus: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          commissionpct: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesytd: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          saleslastyear: decimal
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salespersonquotahistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          quotadate: System.DateTime
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesquota: decimal
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesreason =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salesreasonid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          reasontype: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salestaxrate =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salestaxrateid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          stateprovinceid: int
          [<SqlHydra.ProviderDbType("Smallint")>]
          taxtype: int16
          [<SqlHydra.ProviderDbType("Numeric")>]
          taxrate: decimal
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesterritory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregioncode: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          group: string
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesytd: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          saleslastyear: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          costytd: decimal
          [<SqlHydra.ProviderDbType("Numeric")>]
          costlastyear: decimal
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type salesterritoryhistory =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          territoryid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type shoppingcartitem =
        { [<SqlHydra.ProviderDbType("Integer")>]
          shoppingcartitemid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          shoppingcartid: string
          [<SqlHydra.ProviderDbType("Integer")>]
          quantity: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Timestamp")>]
          datecreated: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type specialoffer =
        { [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          description: string
          [<SqlHydra.ProviderDbType("Numeric")>]
          discountpct: decimal
          [<SqlHydra.ProviderDbType("Varchar")>]
          ``type``: string
          [<SqlHydra.ProviderDbType("Varchar")>]
          category: string
          [<SqlHydra.ProviderDbType("Timestamp")>]
          startdate: System.DateTime
          [<SqlHydra.ProviderDbType("Timestamp")>]
          enddate: System.DateTime
          [<SqlHydra.ProviderDbType("Integer")>]
          minqty: int
          [<SqlHydra.ProviderDbType("Integer")>]
          maxqty: Option<int>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type specialofferproduct =
        { [<SqlHydra.ProviderDbType("Integer")>]
          specialofferid: int
          [<SqlHydra.ProviderDbType("Integer")>]
          productid: int
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type store =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: int
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: string
          [<SqlHydra.ProviderDbType("Integer")>]
          salespersonid: Option<int>
          [<SqlHydra.ProviderDbType("Xml")>]
          demographics: Option<string>
          [<SqlHydra.ProviderDbType("Uuid")>]
          rowguid: System.Guid
          [<SqlHydra.ProviderDbType("Timestamp")>]
          modifieddate: System.DateTime }

    [<CLIMutable>]
    type vindividualcustomer =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumbertype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addresstype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregionname: Option<string>
          [<SqlHydra.ProviderDbType("Xml")>]
          demographics: Option<string> }

    [<CLIMutable>]
    type vpersondemographics =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Money")>]
          totalpurchaseytd: Option<decimal>
          [<SqlHydra.ProviderDbType("Date")>]
          datefirstpurchase: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Date")>]
          birthdate: Option<System.DateOnly>
          [<SqlHydra.ProviderDbType("Varchar")>]
          maritalstatus: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          yearlyincome: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          gender: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          totalchildren: Option<int>
          [<SqlHydra.ProviderDbType("Integer")>]
          numberchildrenathome: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          education: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          occupation: Option<string>
          [<SqlHydra.ProviderDbType("Boolean")>]
          homeownerflag: Option<bool>
          [<SqlHydra.ProviderDbType("Integer")>]
          numbercarsowned: Option<int> }

    [<CLIMutable>]
    type vsalesperson =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumbertype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregionname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          territoryname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          territorygroup: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesquota: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salesytd: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          saleslastyear: Option<decimal> }

    [<CLIMutable>]
    type vsalespersonsalesbyfiscalyears =
        { [<SqlHydra.ProviderDbType("Integer")>]
          SalesPersonID: Option<int>
          [<SqlHydra.ProviderDbType("Text")>]
          FullName: Option<string>
          [<SqlHydra.ProviderDbType("Text")>]
          JobTitle: Option<string>
          [<SqlHydra.ProviderDbType("Text")>]
          SalesTerritory: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          ``2012``: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          ``2013``: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          ``2014``: Option<decimal> }

    [<CLIMutable>]
    type vsalespersonsalesbyfiscalyearsdata =
        { [<SqlHydra.ProviderDbType("Integer")>]
          salespersonid: Option<int>
          [<SqlHydra.ProviderDbType("Text")>]
          fullname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          jobtitle: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          salesterritory: Option<string>
          [<SqlHydra.ProviderDbType("Numeric")>]
          salestotal: Option<decimal>
          [<SqlHydra.ProviderDbType("Numeric")>]
          fiscalyear: Option<decimal> }

    [<CLIMutable>]
    type vstorewithaddresses =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addresstype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline1: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          addressline2: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          city: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          stateprovincename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          postalcode: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          countryregionname: Option<string> }

    [<CLIMutable>]
    type vstorewithcontacts =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          contacttype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          title: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          firstname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          middlename: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          lastname: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          suffix: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumber: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          phonenumbertype: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          emailaddress: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          emailpromotion: Option<int> }

    [<CLIMutable>]
    type vstorewithdemographics =
        { [<SqlHydra.ProviderDbType("Integer")>]
          businessentityid: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          name: Option<string>
          [<SqlHydra.ProviderDbType("Money")>]
          AnnualSales: Option<decimal>
          [<SqlHydra.ProviderDbType("Money")>]
          AnnualRevenue: Option<decimal>
          [<SqlHydra.ProviderDbType("Varchar")>]
          BankName: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          BusinessType: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          YearOpened: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Specialty: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          SquareFeet: Option<int>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Brands: Option<string>
          [<SqlHydra.ProviderDbType("Varchar")>]
          Internet: Option<string>
          [<SqlHydra.ProviderDbType("Integer")>]
          NumberEmployees: Option<int> }

    module Readers =
        type countryregioncurrencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { countryregioncurrency.countryregioncode = __.countryregioncode.Read()
                  currencycode = __.currencycode.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.countryregioncode.IsNull() then None else Some(__.Read())

        type creditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.cardtype = RequiredColumn(reader, getOrdinal, reader.GetString, "cardtype")
            member __.cardnumber = RequiredColumn(reader, getOrdinal, reader.GetString, "cardnumber")
            member __.expmonth = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expmonth")
            member __.expyear = RequiredColumn(reader, getOrdinal, reader.GetInt16, "expyear")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { creditcard.creditcardid = __.creditcardid.Read()
                  cardtype = __.cardtype.Read()
                  cardnumber = __.cardnumber.Read()
                  expmonth = __.expmonth.Read()
                  expyear = __.expyear.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.creditcardid.IsNull() then None else Some(__.Read())

        type currencyReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.currencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "currencycode")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { currency.currencycode = __.currencycode.Read()
                  name = __.name.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.currencycode.IsNull() then None else Some(__.Read())

        type currencyrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.currencyrateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
            member __.currencyratedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "currencyratedate")
            member __.fromcurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "fromcurrencycode")
            member __.tocurrencycode = RequiredColumn(reader, getOrdinal, reader.GetString, "tocurrencycode")
            member __.averagerate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "averagerate")
            member __.endofdayrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "endofdayrate")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { currencyrate.currencyrateid = __.currencyrateid.Read()
                  currencyratedate = __.currencyratedate.Read()
                  fromcurrencycode = __.fromcurrencycode.Read()
                  tocurrencycode = __.tocurrencycode.Read()
                  averagerate = __.averagerate.Read()
                  endofdayrate = __.endofdayrate.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.currencyrateid.IsNull() then None else Some(__.Read())

        type customerReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "customerid")
            member __.personid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "personid")
            member __.storeid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "storeid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { customer.customerid = __.customerid.Read()
                  personid = __.personid.Read()
                  storeid = __.storeid.Read()
                  territoryid = __.territoryid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.customerid.IsNull() then None else Some(__.Read())

        type personcreditcardReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.creditcardid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { personcreditcard.businessentityid = __.businessentityid.Read()
                  creditcardid = __.creditcardid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type salesorderdetailReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.salesorderdetailid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderdetailid")
            member __.carriertrackingnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "carriertrackingnumber")
            member __.orderqty = RequiredColumn(reader, getOrdinal, reader.GetInt16, "orderqty")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.unitprice = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitprice")
            member __.unitpricediscount = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "unitpricediscount")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesorderdetail.salesorderid = __.salesorderid.Read()
                  salesorderdetailid = __.salesorderdetailid.Read()
                  carriertrackingnumber = __.carriertrackingnumber.Read()
                  orderqty = __.orderqty.Read()
                  productid = __.productid.Read()
                  specialofferid = __.specialofferid.Read()
                  unitprice = __.unitprice.Read()
                  unitpricediscount = __.unitpricediscount.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salesorderid.IsNull() then None else Some(__.Read())

        type salesorderheaderReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.revisionnumber = RequiredColumn(reader, getOrdinal, reader.GetInt16, "revisionnumber")
            member __.orderdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "orderdate")
            member __.duedate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "duedate")
            member __.shipdate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "shipdate")
            member __.status = RequiredColumn(reader, getOrdinal, reader.GetInt16, "status")
            member __.onlineorderflag = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "onlineorderflag")
            member __.purchaseordernumber = OptionalColumn(reader, getOrdinal, reader.GetString, "purchaseordernumber")
            member __.accountnumber = OptionalColumn(reader, getOrdinal, reader.GetString, "accountnumber")
            member __.customerid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "customerid")
            member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.billtoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "billtoaddressid")
            member __.shiptoaddressid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shiptoaddressid")
            member __.shipmethodid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shipmethodid")
            member __.creditcardid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "creditcardid")
            member __.creditcardapprovalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "creditcardapprovalcode")
            member __.currencyrateid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "currencyrateid")
            member __.subtotal = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "subtotal")
            member __.taxamt = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxamt")
            member __.freight = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "freight")
            member __.totaldue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "totaldue")
            member __.comment = OptionalColumn(reader, getOrdinal, reader.GetString, "comment")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesorderheader.salesorderid = __.salesorderid.Read()
                  revisionnumber = __.revisionnumber.Read()
                  orderdate = __.orderdate.Read()
                  duedate = __.duedate.Read()
                  shipdate = __.shipdate.Read()
                  status = __.status.Read()
                  onlineorderflag = __.onlineorderflag.Read()
                  purchaseordernumber = __.purchaseordernumber.Read()
                  accountnumber = __.accountnumber.Read()
                  customerid = __.customerid.Read()
                  salespersonid = __.salespersonid.Read()
                  territoryid = __.territoryid.Read()
                  billtoaddressid = __.billtoaddressid.Read()
                  shiptoaddressid = __.shiptoaddressid.Read()
                  shipmethodid = __.shipmethodid.Read()
                  creditcardid = __.creditcardid.Read()
                  creditcardapprovalcode = __.creditcardapprovalcode.Read()
                  currencyrateid = __.currencyrateid.Read()
                  subtotal = __.subtotal.Read()
                  taxamt = __.taxamt.Read()
                  freight = __.freight.Read()
                  totaldue = __.totaldue.Read()
                  comment = __.comment.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salesorderid.IsNull() then None else Some(__.Read())

        type salesorderheadersalesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salesorderid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesorderid")
            member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesorderheadersalesreason.salesorderid = __.salesorderid.Read()
                  salesreasonid = __.salesreasonid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salesorderid.IsNull() then None else Some(__.Read())

        type salespersonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.territoryid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
            member __.bonus = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "bonus")
            member __.commissionpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "commissionpct")
            member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
            member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesperson.businessentityid = __.businessentityid.Read()
                  territoryid = __.territoryid.Read()
                  salesquota = __.salesquota.Read()
                  bonus = __.bonus.Read()
                  commissionpct = __.commissionpct.Read()
                  salesytd = __.salesytd.Read()
                  saleslastyear = __.saleslastyear.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type salespersonquotahistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.quotadate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "quotadate")
            member __.salesquota = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salespersonquotahistory.businessentityid = __.businessentityid.Read()
                  quotadate = __.quotadate.Read()
                  salesquota = __.salesquota.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type salesreasonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salesreasonid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salesreasonid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.reasontype = RequiredColumn(reader, getOrdinal, reader.GetString, "reasontype")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesreason.salesreasonid = __.salesreasonid.Read()
                  name = __.name.Read()
                  reasontype = __.reasontype.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salesreasonid.IsNull() then None else Some(__.Read())

        type salestaxrateReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salestaxrateid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "salestaxrateid")
            member __.stateprovinceid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "stateprovinceid")
            member __.taxtype = RequiredColumn(reader, getOrdinal, reader.GetInt16, "taxtype")
            member __.taxrate = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "taxrate")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salestaxrate.salestaxrateid = __.salestaxrateid.Read()
                  stateprovinceid = __.stateprovinceid.Read()
                  taxtype = __.taxtype.Read()
                  taxrate = __.taxrate.Read()
                  name = __.name.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.salestaxrateid.IsNull() then None else Some(__.Read())

        type salesterritoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.countryregioncode = RequiredColumn(reader, getOrdinal, reader.GetString, "countryregioncode")
            member __.group = RequiredColumn(reader, getOrdinal, reader.GetString, "group")
            member __.salesytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
            member __.saleslastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")
            member __.costytd = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costytd")
            member __.costlastyear = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "costlastyear")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesterritory.territoryid = __.territoryid.Read()
                  name = __.name.Read()
                  countryregioncode = __.countryregioncode.Read()
                  group = __.group.Read()
                  salesytd = __.salesytd.Read()
                  saleslastyear = __.saleslastyear.Read()
                  costytd = __.costytd.Read()
                  costlastyear = __.costlastyear.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.territoryid.IsNull() then None else Some(__.Read())

        type salesterritoryhistoryReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.territoryid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "territoryid")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { salesterritoryhistory.businessentityid = __.businessentityid.Read()
                  territoryid = __.territoryid.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type shoppingcartitemReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.shoppingcartitemid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "shoppingcartitemid")
            member __.shoppingcartid = RequiredColumn(reader, getOrdinal, reader.GetString, "shoppingcartid")
            member __.quantity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "quantity")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.datecreated = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "datecreated")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { shoppingcartitem.shoppingcartitemid = __.shoppingcartitemid.Read()
                  shoppingcartid = __.shoppingcartid.Read()
                  quantity = __.quantity.Read()
                  productid = __.productid.Read()
                  datecreated = __.datecreated.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.shoppingcartitemid.IsNull() then None else Some(__.Read())

        type specialofferReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.description = RequiredColumn(reader, getOrdinal, reader.GetString, "description")
            member __.discountpct = RequiredColumn(reader, getOrdinal, reader.GetDecimal, "discountpct")
            member __.``type`` = RequiredColumn(reader, getOrdinal, reader.GetString, "type")
            member __.category = RequiredColumn(reader, getOrdinal, reader.GetString, "category")
            member __.startdate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "startdate")
            member __.enddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "enddate")
            member __.minqty = RequiredColumn(reader, getOrdinal, reader.GetInt32, "minqty")
            member __.maxqty = OptionalColumn(reader, getOrdinal, reader.GetInt32, "maxqty")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { specialoffer.specialofferid = __.specialofferid.Read()
                  description = __.description.Read()
                  discountpct = __.discountpct.Read()
                  ``type`` = __.``type``.Read()
                  category = __.category.Read()
                  startdate = __.startdate.Read()
                  enddate = __.enddate.Read()
                  minqty = __.minqty.Read()
                  maxqty = __.maxqty.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.specialofferid.IsNull() then None else Some(__.Read())

        type specialofferproductReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.specialofferid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "specialofferid")
            member __.productid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "productid")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { specialofferproduct.specialofferid = __.specialofferid.Read()
                  productid = __.productid.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.specialofferid.IsNull() then None else Some(__.Read())

        type storeReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = RequiredColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = RequiredColumn(reader, getOrdinal, reader.GetString, "name")
            member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
            member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")
            member __.rowguid = RequiredColumn(reader, getOrdinal, reader.GetGuid, "rowguid")
            member __.modifieddate = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "modifieddate")

            member __.Read() =
                { store.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  salespersonid = __.salespersonid.Read()
                  demographics = __.demographics.Read()
                  rowguid = __.rowguid.Read()
                  modifieddate = __.modifieddate.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vindividualcustomerReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertype = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumbertype")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
            member __.addresstype = OptionalColumn(reader, getOrdinal, reader.GetString, "addresstype")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")
            member __.demographics = OptionalColumn(reader, getOrdinal, reader.GetString, "demographics")

            member __.Read() =
                { vindividualcustomer.businessentityid = __.businessentityid.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertype = __.phonenumbertype.Read()
                  emailaddress = __.emailaddress.Read()
                  emailpromotion = __.emailpromotion.Read()
                  addresstype = __.addresstype.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovincename = __.stateprovincename.Read()
                  postalcode = __.postalcode.Read()
                  countryregionname = __.countryregionname.Read()
                  demographics = __.demographics.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vpersondemographicsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.totalpurchaseytd = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "totalpurchaseytd")
            member __.datefirstpurchase = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "datefirstpurchase")
            member __.birthdate = OptionalColumn(reader, getOrdinal, reader.GetDateOnly, "birthdate")
            member __.maritalstatus = OptionalColumn(reader, getOrdinal, reader.GetString, "maritalstatus")
            member __.yearlyincome = OptionalColumn(reader, getOrdinal, reader.GetString, "yearlyincome")
            member __.gender = OptionalColumn(reader, getOrdinal, reader.GetString, "gender")
            member __.totalchildren = OptionalColumn(reader, getOrdinal, reader.GetInt32, "totalchildren")
            member __.numberchildrenathome = OptionalColumn(reader, getOrdinal, reader.GetInt32, "numberchildrenathome")
            member __.education = OptionalColumn(reader, getOrdinal, reader.GetString, "education")
            member __.occupation = OptionalColumn(reader, getOrdinal, reader.GetString, "occupation")
            member __.homeownerflag = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "homeownerflag")
            member __.numbercarsowned = OptionalColumn(reader, getOrdinal, reader.GetInt32, "numbercarsowned")

            member __.Read() =
                { vpersondemographics.businessentityid = __.businessentityid.Read()
                  totalpurchaseytd = __.totalpurchaseytd.Read()
                  datefirstpurchase = __.datefirstpurchase.Read()
                  birthdate = __.birthdate.Read()
                  maritalstatus = __.maritalstatus.Read()
                  yearlyincome = __.yearlyincome.Read()
                  gender = __.gender.Read()
                  totalchildren = __.totalchildren.Read()
                  numberchildrenathome = __.numberchildrenathome.Read()
                  education = __.education.Read()
                  occupation = __.occupation.Read()
                  homeownerflag = __.homeownerflag.Read()
                  numbercarsowned = __.numbercarsowned.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vsalespersonReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.jobtitle = OptionalColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertype = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumbertype")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")
            member __.territoryname = OptionalColumn(reader, getOrdinal, reader.GetString, "territoryname")
            member __.territorygroup = OptionalColumn(reader, getOrdinal, reader.GetString, "territorygroup")
            member __.salesquota = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesquota")
            member __.salesytd = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salesytd")
            member __.saleslastyear = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "saleslastyear")

            member __.Read() =
                { vsalesperson.businessentityid = __.businessentityid.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  jobtitle = __.jobtitle.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertype = __.phonenumbertype.Read()
                  emailaddress = __.emailaddress.Read()
                  emailpromotion = __.emailpromotion.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovincename = __.stateprovincename.Read()
                  postalcode = __.postalcode.Read()
                  countryregionname = __.countryregionname.Read()
                  territoryname = __.territoryname.Read()
                  territorygroup = __.territorygroup.Read()
                  salesquota = __.salesquota.Read()
                  salesytd = __.salesytd.Read()
                  saleslastyear = __.saleslastyear.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vsalespersonsalesbyfiscalyearsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.SalesPersonID = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SalesPersonID")
            member __.FullName = OptionalColumn(reader, getOrdinal, reader.GetString, "FullName")
            member __.JobTitle = OptionalColumn(reader, getOrdinal, reader.GetString, "JobTitle")
            member __.SalesTerritory = OptionalColumn(reader, getOrdinal, reader.GetString, "SalesTerritory")
            member __.``2012`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2012")
            member __.``2013`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2013")
            member __.``2014`` = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "2014")

            member __.Read() =
                { vsalespersonsalesbyfiscalyears.SalesPersonID = __.SalesPersonID.Read()
                  FullName = __.FullName.Read()
                  JobTitle = __.JobTitle.Read()
                  SalesTerritory = __.SalesTerritory.Read()
                  ``2012`` = __.``2012``.Read()
                  ``2013`` = __.``2013``.Read()
                  ``2014`` = __.``2014``.Read() }

            member __.ReadIfNotNull() =
                if __.SalesPersonID.IsNull() then None else Some(__.Read())

        type vsalespersonsalesbyfiscalyearsdataReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.salespersonid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "salespersonid")
            member __.fullname = OptionalColumn(reader, getOrdinal, reader.GetString, "fullname")
            member __.jobtitle = OptionalColumn(reader, getOrdinal, reader.GetString, "jobtitle")
            member __.salesterritory = OptionalColumn(reader, getOrdinal, reader.GetString, "salesterritory")
            member __.salestotal = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "salestotal")
            member __.fiscalyear = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "fiscalyear")

            member __.Read() =
                { vsalespersonsalesbyfiscalyearsdata.salespersonid = __.salespersonid.Read()
                  fullname = __.fullname.Read()
                  jobtitle = __.jobtitle.Read()
                  salesterritory = __.salesterritory.Read()
                  salestotal = __.salestotal.Read()
                  fiscalyear = __.fiscalyear.Read() }

            member __.ReadIfNotNull() =
                if __.salespersonid.IsNull() then None else Some(__.Read())

        type vstorewithaddressesReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.addresstype = OptionalColumn(reader, getOrdinal, reader.GetString, "addresstype")
            member __.addressline1 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline1")
            member __.addressline2 = OptionalColumn(reader, getOrdinal, reader.GetString, "addressline2")
            member __.city = OptionalColumn(reader, getOrdinal, reader.GetString, "city")
            member __.stateprovincename = OptionalColumn(reader, getOrdinal, reader.GetString, "stateprovincename")
            member __.postalcode = OptionalColumn(reader, getOrdinal, reader.GetString, "postalcode")
            member __.countryregionname = OptionalColumn(reader, getOrdinal, reader.GetString, "countryregionname")

            member __.Read() =
                { vstorewithaddresses.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  addresstype = __.addresstype.Read()
                  addressline1 = __.addressline1.Read()
                  addressline2 = __.addressline2.Read()
                  city = __.city.Read()
                  stateprovincename = __.stateprovincename.Read()
                  postalcode = __.postalcode.Read()
                  countryregionname = __.countryregionname.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vstorewithcontactsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.contacttype = OptionalColumn(reader, getOrdinal, reader.GetString, "contacttype")
            member __.title = OptionalColumn(reader, getOrdinal, reader.GetString, "title")
            member __.firstname = OptionalColumn(reader, getOrdinal, reader.GetString, "firstname")
            member __.middlename = OptionalColumn(reader, getOrdinal, reader.GetString, "middlename")
            member __.lastname = OptionalColumn(reader, getOrdinal, reader.GetString, "lastname")
            member __.suffix = OptionalColumn(reader, getOrdinal, reader.GetString, "suffix")
            member __.phonenumber = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumber")
            member __.phonenumbertype = OptionalColumn(reader, getOrdinal, reader.GetString, "phonenumbertype")
            member __.emailaddress = OptionalColumn(reader, getOrdinal, reader.GetString, "emailaddress")
            member __.emailpromotion = OptionalColumn(reader, getOrdinal, reader.GetInt32, "emailpromotion")

            member __.Read() =
                { vstorewithcontacts.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  contacttype = __.contacttype.Read()
                  title = __.title.Read()
                  firstname = __.firstname.Read()
                  middlename = __.middlename.Read()
                  lastname = __.lastname.Read()
                  suffix = __.suffix.Read()
                  phonenumber = __.phonenumber.Read()
                  phonenumbertype = __.phonenumbertype.Read()
                  emailaddress = __.emailaddress.Read()
                  emailpromotion = __.emailpromotion.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

        type vstorewithdemographicsReader(reader: Npgsql.NpgsqlDataReader, getOrdinal) =
            member __.businessentityid = OptionalColumn(reader, getOrdinal, reader.GetInt32, "businessentityid")
            member __.name = OptionalColumn(reader, getOrdinal, reader.GetString, "name")
            member __.AnnualSales = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "AnnualSales")
            member __.AnnualRevenue = OptionalColumn(reader, getOrdinal, reader.GetDecimal, "AnnualRevenue")
            member __.BankName = OptionalColumn(reader, getOrdinal, reader.GetString, "BankName")
            member __.BusinessType = OptionalColumn(reader, getOrdinal, reader.GetString, "BusinessType")
            member __.YearOpened = OptionalColumn(reader, getOrdinal, reader.GetInt32, "YearOpened")
            member __.Specialty = OptionalColumn(reader, getOrdinal, reader.GetString, "Specialty")
            member __.SquareFeet = OptionalColumn(reader, getOrdinal, reader.GetInt32, "SquareFeet")
            member __.Brands = OptionalColumn(reader, getOrdinal, reader.GetString, "Brands")
            member __.Internet = OptionalColumn(reader, getOrdinal, reader.GetString, "Internet")
            member __.NumberEmployees = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberEmployees")

            member __.Read() =
                { vstorewithdemographics.businessentityid = __.businessentityid.Read()
                  name = __.name.Read()
                  AnnualSales = __.AnnualSales.Read()
                  AnnualRevenue = __.AnnualRevenue.Read()
                  BankName = __.BankName.Read()
                  BusinessType = __.BusinessType.Read()
                  YearOpened = __.YearOpened.Read()
                  Specialty = __.Specialty.Read()
                  SquareFeet = __.SquareFeet.Read()
                  Brands = __.Brands.Read()
                  Internet = __.Internet.Read()
                  NumberEmployees = __.NumberEmployees.Read() }

            member __.ReadIfNotNull() =
                if __.businessentityid.IsNull() then None else Some(__.Read())

type HydraReader(reader: Npgsql.NpgsqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazyextarrays = lazy (ext.Readers.arraysReader (reader, buildGetOrdinal 3))
    let lazyextjsonsupport = lazy (ext.Readers.jsonsupportReader (reader, buildGetOrdinal 3))
    let lazyextperson = lazy (ext.Readers.personReader (reader, buildGetOrdinal 2))
    let lazyhrd = lazy (hr.Readers.dReader (reader, buildGetOrdinal 5))
    let lazyhre = lazy (hr.Readers.eReader (reader, buildGetOrdinal 16))
    let lazyhredh = lazy (hr.Readers.edhReader (reader, buildGetOrdinal 7))
    let lazyhreph = lazy (hr.Readers.ephReader (reader, buildGetOrdinal 6))
    let lazyhrjc = lazy (hr.Readers.jcReader (reader, buildGetOrdinal 5))
    let lazyhrs = lazy (hr.Readers.sReader (reader, buildGetOrdinal 6))
    let lazyhumanresourcesdepartment = lazy (humanresources.Readers.departmentReader (reader, buildGetOrdinal 4))
    let lazyhumanresourcesemployee = lazy (humanresources.Readers.employeeReader (reader, buildGetOrdinal 15))
    let lazyhumanresourcesemployeedepartmenthistory = lazy (humanresources.Readers.employeedepartmenthistoryReader (reader, buildGetOrdinal 6))
    let lazyhumanresourcesemployeepayhistory = lazy (humanresources.Readers.employeepayhistoryReader (reader, buildGetOrdinal 5))
    let lazyhumanresourcesjobcandidate = lazy (humanresources.Readers.jobcandidateReader (reader, buildGetOrdinal 4))
    let lazyhumanresourcesshift = lazy (humanresources.Readers.shiftReader (reader, buildGetOrdinal 5))
    let lazyhumanresourcesvemployee = lazy (humanresources.Readers.vemployeeReader (reader, buildGetOrdinal 18))
    let lazyhumanresourcesvemployeedepartment = lazy (humanresources.Readers.vemployeedepartmentReader (reader, buildGetOrdinal 10))
    let lazyhumanresourcesvemployeedepartmenthistory = lazy (humanresources.Readers.vemployeedepartmenthistoryReader (reader, buildGetOrdinal 11))
    let lazyhumanresourcesvjobcandidate = lazy (humanresources.Readers.vjobcandidateReader (reader, buildGetOrdinal 16))
    let lazyhumanresourcesvjobcandidateeducation = lazy (humanresources.Readers.vjobcandidateeducationReader (reader, buildGetOrdinal 13))
    let lazyhumanresourcesvjobcandidateemployment = lazy (humanresources.Readers.vjobcandidateemploymentReader (reader, buildGetOrdinal 11))
    let lazypea = lazy (pe.Readers.aReader (reader, buildGetOrdinal 10))
    let lazypeat = lazy (pe.Readers.atReader (reader, buildGetOrdinal 5))
    let lazypebe = lazy (pe.Readers.beReader (reader, buildGetOrdinal 4))
    let lazypebea = lazy (pe.Readers.beaReader (reader, buildGetOrdinal 6))
    let lazypebec = lazy (pe.Readers.becReader (reader, buildGetOrdinal 6))
    let lazypecr = lazy (pe.Readers.crReader (reader, buildGetOrdinal 3))
    let lazypect = lazy (pe.Readers.ctReader (reader, buildGetOrdinal 4))
    let lazypee = lazy (pe.Readers.eReader (reader, buildGetOrdinal 6))
    let lazypep = lazy (pe.Readers.pReader (reader, buildGetOrdinal 14))
    let lazypepa = lazy (pe.Readers.paReader (reader, buildGetOrdinal 6))
    let lazypepnt = lazy (pe.Readers.pntReader (reader, buildGetOrdinal 4))
    let lazypepp = lazy (pe.Readers.ppReader (reader, buildGetOrdinal 5))
    let lazypesp = lazy (pe.Readers.spReader (reader, buildGetOrdinal 9))
    let lazypersonaddress = lazy (person.Readers.addressReader (reader, buildGetOrdinal 9))
    let lazypersonaddresstype = lazy (person.Readers.addresstypeReader (reader, buildGetOrdinal 4))
    let lazypersonbusinessentity = lazy (person.Readers.businessentityReader (reader, buildGetOrdinal 3))
    let lazypersonbusinessentityaddress = lazy (person.Readers.businessentityaddressReader (reader, buildGetOrdinal 5))
    let lazypersonbusinessentitycontact = lazy (person.Readers.businessentitycontactReader (reader, buildGetOrdinal 5))
    let lazypersoncontacttype = lazy (person.Readers.contacttypeReader (reader, buildGetOrdinal 3))
    let lazypersoncountryregion = lazy (person.Readers.countryregionReader (reader, buildGetOrdinal 3))
    let lazypersonemailaddress = lazy (person.Readers.emailaddressReader (reader, buildGetOrdinal 5))
    let lazypersonpassword = lazy (person.Readers.passwordReader (reader, buildGetOrdinal 5))
    let lazypersonperson = lazy (person.Readers.personReader (reader, buildGetOrdinal 13))
    let lazypersonpersonphone = lazy (person.Readers.personphoneReader (reader, buildGetOrdinal 4))
    let lazypersonphonenumbertype = lazy (person.Readers.phonenumbertypeReader (reader, buildGetOrdinal 3))
    let lazypersonstateprovince = lazy (person.Readers.stateprovinceReader (reader, buildGetOrdinal 8))
    let lazypersonvadditionalcontactinfo = lazy (person.Readers.vadditionalcontactinfoReader (reader, buildGetOrdinal 17))
    let lazypersonvstateprovincecountryregion = lazy (person.Readers.vstateprovincecountryregionReader (reader, buildGetOrdinal 5))
    let lazyprbom = lazy (pr.Readers.bomReader (reader, buildGetOrdinal 10))
    let lazyprc = lazy (pr.Readers.cReader (reader, buildGetOrdinal 4))
    let lazyprd = lazy (pr.Readers.dReader (reader, buildGetOrdinal 13))
    let lazypri = lazy (pr.Readers.iReader (reader, buildGetOrdinal 4))
    let lazyprl = lazy (pr.Readers.lReader (reader, buildGetOrdinal 6))
    let lazyprp = lazy (pr.Readers.pReader (reader, buildGetOrdinal 26))
    let lazyprpc = lazy (pr.Readers.pcReader (reader, buildGetOrdinal 5))
    let lazyprpch = lazy (pr.Readers.pchReader (reader, buildGetOrdinal 6))
    let lazyprpd = lazy (pr.Readers.pdReader (reader, buildGetOrdinal 5))
    let lazyprpdoc = lazy (pr.Readers.pdocReader (reader, buildGetOrdinal 4))
    let lazyprpi = lazy (pr.Readers.piReader (reader, buildGetOrdinal 8))
    let lazyprplph = lazy (pr.Readers.plphReader (reader, buildGetOrdinal 6))
    let lazyprpm = lazy (pr.Readers.pmReader (reader, buildGetOrdinal 7))
    let lazyprpmi = lazy (pr.Readers.pmiReader (reader, buildGetOrdinal 3))
    let lazyprpmpdc = lazy (pr.Readers.pmpdcReader (reader, buildGetOrdinal 4))
    let lazyprpp = lazy (pr.Readers.ppReader (reader, buildGetOrdinal 7))
    let lazyprppp = lazy (pr.Readers.pppReader (reader, buildGetOrdinal 4))
    let lazyprpr = lazy (pr.Readers.prReader (reader, buildGetOrdinal 9))
    let lazyprpsc = lazy (pr.Readers.pscReader (reader, buildGetOrdinal 6))
    let lazyprsr = lazy (pr.Readers.srReader (reader, buildGetOrdinal 4))
    let lazyprth = lazy (pr.Readers.thReader (reader, buildGetOrdinal 10))
    let lazyprtha = lazy (pr.Readers.thaReader (reader, buildGetOrdinal 10))
    let lazyprum = lazy (pr.Readers.umReader (reader, buildGetOrdinal 4))
    let lazyprw = lazy (pr.Readers.wReader (reader, buildGetOrdinal 10))
    let lazyprwr = lazy (pr.Readers.wrReader (reader, buildGetOrdinal 13))
    let lazyproductionbillofmaterials = lazy (production.Readers.billofmaterialsReader (reader, buildGetOrdinal 9))
    let lazyproductionculture = lazy (production.Readers.cultureReader (reader, buildGetOrdinal 3))
    let lazyproductiondocument = lazy (production.Readers.documentReader (reader, buildGetOrdinal 13))
    let lazyproductionillustration = lazy (production.Readers.illustrationReader (reader, buildGetOrdinal 3))
    let lazyproductionlocation = lazy (production.Readers.locationReader (reader, buildGetOrdinal 5))
    let lazyproductionproduct = lazy (production.Readers.productReader (reader, buildGetOrdinal 25))
    let lazyproductionproductcategory = lazy (production.Readers.productcategoryReader (reader, buildGetOrdinal 4))
    let lazyproductionproductcosthistory = lazy (production.Readers.productcosthistoryReader (reader, buildGetOrdinal 5))
    let lazyproductionproductdescription = lazy (production.Readers.productdescriptionReader (reader, buildGetOrdinal 4))
    let lazyproductionproductdocument = lazy (production.Readers.productdocumentReader (reader, buildGetOrdinal 3))
    let lazyproductionproductinventory = lazy (production.Readers.productinventoryReader (reader, buildGetOrdinal 7))
    let lazyproductionproductlistpricehistory = lazy (production.Readers.productlistpricehistoryReader (reader, buildGetOrdinal 5))
    let lazyproductionproductmodel = lazy (production.Readers.productmodelReader (reader, buildGetOrdinal 6))
    let lazyproductionproductmodelillustration = lazy (production.Readers.productmodelillustrationReader (reader, buildGetOrdinal 3))
    let lazyproductionproductmodelproductdescriptionculture = lazy (production.Readers.productmodelproductdescriptioncultureReader (reader, buildGetOrdinal 4))
    let lazyproductionproductphoto = lazy (production.Readers.productphotoReader (reader, buildGetOrdinal 6))
    let lazyproductionproductproductphoto = lazy (production.Readers.productproductphotoReader (reader, buildGetOrdinal 4))
    let lazyproductionproductreview = lazy (production.Readers.productreviewReader (reader, buildGetOrdinal 8))
    let lazyproductionproductsubcategory = lazy (production.Readers.productsubcategoryReader (reader, buildGetOrdinal 5))
    let lazyproductionscrapreason = lazy (production.Readers.scrapreasonReader (reader, buildGetOrdinal 3))
    let lazyproductiontransactionhistory = lazy (production.Readers.transactionhistoryReader (reader, buildGetOrdinal 9))
    let lazyproductiontransactionhistoryarchive = lazy (production.Readers.transactionhistoryarchiveReader (reader, buildGetOrdinal 9))
    let lazyproductionunitmeasure = lazy (production.Readers.unitmeasureReader (reader, buildGetOrdinal 3))
    let lazyproductionvproductanddescription = lazy (production.Readers.vproductanddescriptionReader (reader, buildGetOrdinal 4))
    let lazyproductionvproductmodelcatalogdescription = lazy (production.Readers.vproductmodelcatalogdescriptionReader (reader, buildGetOrdinal 25))
    let lazyproductionvproductmodelinstructions = lazy (production.Readers.vproductmodelinstructionsReader (reader, buildGetOrdinal 11))
    let lazyproductionworkorder = lazy (production.Readers.workorderReader (reader, buildGetOrdinal 9))
    let lazyproductionworkorderrouting = lazy (production.Readers.workorderroutingReader (reader, buildGetOrdinal 12))
    let lazypupod = lazy (pu.Readers.podReader (reader, buildGetOrdinal 10))
    let lazypupoh = lazy (pu.Readers.pohReader (reader, buildGetOrdinal 13))
    let lazypupv = lazy (pu.Readers.pvReader (reader, buildGetOrdinal 12))
    let lazypusm = lazy (pu.Readers.smReader (reader, buildGetOrdinal 7))
    let lazypuv = lazy (pu.Readers.vReader (reader, buildGetOrdinal 9))
    let lazypurchasingproductvendor = lazy (purchasing.Readers.productvendorReader (reader, buildGetOrdinal 11))
    let lazypurchasingpurchaseorderdetail = lazy (purchasing.Readers.purchaseorderdetailReader (reader, buildGetOrdinal 9))
    let lazypurchasingpurchaseorderheader = lazy (purchasing.Readers.purchaseorderheaderReader (reader, buildGetOrdinal 12))
    let lazypurchasingshipmethod = lazy (purchasing.Readers.shipmethodReader (reader, buildGetOrdinal 6))
    let lazypurchasingvendor = lazy (purchasing.Readers.vendorReader (reader, buildGetOrdinal 8))
    let lazypurchasingvvendorwithaddresses = lazy (purchasing.Readers.vvendorwithaddressesReader (reader, buildGetOrdinal 9))
    let lazypurchasingvvendorwithcontacts = lazy (purchasing.Readers.vvendorwithcontactsReader (reader, buildGetOrdinal 12))
    let lazysac = lazy (sa.Readers.cReader (reader, buildGetOrdinal 7))
    let lazysacc = lazy (sa.Readers.ccReader (reader, buildGetOrdinal 7))
    let lazysacr = lazy (sa.Readers.crReader (reader, buildGetOrdinal 7))
    let lazysacrc = lazy (sa.Readers.crcReader (reader, buildGetOrdinal 3))
    let lazysacu = lazy (sa.Readers.cuReader (reader, buildGetOrdinal 4))
    let lazysapcc = lazy (sa.Readers.pccReader (reader, buildGetOrdinal 4))
    let lazysas = lazy (sa.Readers.sReader (reader, buildGetOrdinal 7))
    let lazysasci = lazy (sa.Readers.sciReader (reader, buildGetOrdinal 7))
    let lazysaso = lazy (sa.Readers.soReader (reader, buildGetOrdinal 12))
    let lazysasod = lazy (sa.Readers.sodReader (reader, buildGetOrdinal 11))
    let lazysasoh = lazy (sa.Readers.sohReader (reader, buildGetOrdinal 26))
    let lazysasohsr = lazy (sa.Readers.sohsrReader (reader, buildGetOrdinal 3))
    let lazysasop = lazy (sa.Readers.sopReader (reader, buildGetOrdinal 5))
    let lazysasp = lazy (sa.Readers.spReader (reader, buildGetOrdinal 10))
    let lazysaspqh = lazy (sa.Readers.spqhReader (reader, buildGetOrdinal 6))
    let lazysasr = lazy (sa.Readers.srReader (reader, buildGetOrdinal 5))
    let lazysast = lazy (sa.Readers.stReader (reader, buildGetOrdinal 11))
    let lazysasth = lazy (sa.Readers.sthReader (reader, buildGetOrdinal 7))
    let lazysatr = lazy (sa.Readers.trReader (reader, buildGetOrdinal 8))
    let lazysalescountryregioncurrency = lazy (sales.Readers.countryregioncurrencyReader (reader, buildGetOrdinal 3))
    let lazysalescreditcard = lazy (sales.Readers.creditcardReader (reader, buildGetOrdinal 6))
    let lazysalescurrency = lazy (sales.Readers.currencyReader (reader, buildGetOrdinal 3))
    let lazysalescurrencyrate = lazy (sales.Readers.currencyrateReader (reader, buildGetOrdinal 7))
    let lazysalescustomer = lazy (sales.Readers.customerReader (reader, buildGetOrdinal 6))
    let lazysalespersoncreditcard = lazy (sales.Readers.personcreditcardReader (reader, buildGetOrdinal 3))
    let lazysalessalesorderdetail = lazy (sales.Readers.salesorderdetailReader (reader, buildGetOrdinal 10))
    let lazysalessalesorderheader = lazy (sales.Readers.salesorderheaderReader (reader, buildGetOrdinal 25))
    let lazysalessalesorderheadersalesreason = lazy (sales.Readers.salesorderheadersalesreasonReader (reader, buildGetOrdinal 3))
    let lazysalessalesperson = lazy (sales.Readers.salespersonReader (reader, buildGetOrdinal 9))
    let lazysalessalespersonquotahistory = lazy (sales.Readers.salespersonquotahistoryReader (reader, buildGetOrdinal 5))
    let lazysalessalesreason = lazy (sales.Readers.salesreasonReader (reader, buildGetOrdinal 4))
    let lazysalessalestaxrate = lazy (sales.Readers.salestaxrateReader (reader, buildGetOrdinal 7))
    let lazysalessalesterritory = lazy (sales.Readers.salesterritoryReader (reader, buildGetOrdinal 10))
    let lazysalessalesterritoryhistory = lazy (sales.Readers.salesterritoryhistoryReader (reader, buildGetOrdinal 6))
    let lazysalesshoppingcartitem = lazy (sales.Readers.shoppingcartitemReader (reader, buildGetOrdinal 6))
    let lazysalesspecialoffer = lazy (sales.Readers.specialofferReader (reader, buildGetOrdinal 11))
    let lazysalesspecialofferproduct = lazy (sales.Readers.specialofferproductReader (reader, buildGetOrdinal 4))
    let lazysalesstore = lazy (sales.Readers.storeReader (reader, buildGetOrdinal 6))
    let lazysalesvindividualcustomer = lazy (sales.Readers.vindividualcustomerReader (reader, buildGetOrdinal 18))
    let lazysalesvpersondemographics = lazy (sales.Readers.vpersondemographicsReader (reader, buildGetOrdinal 13))
    let lazysalesvsalesperson = lazy (sales.Readers.vsalespersonReader (reader, buildGetOrdinal 22))
    let lazysalesvsalespersonsalesbyfiscalyears = lazy (sales.Readers.vsalespersonsalesbyfiscalyearsReader (reader, buildGetOrdinal 7))
    let lazysalesvsalespersonsalesbyfiscalyearsdata = lazy (sales.Readers.vsalespersonsalesbyfiscalyearsdataReader (reader, buildGetOrdinal 6))
    let lazysalesvstorewithaddresses = lazy (sales.Readers.vstorewithaddressesReader (reader, buildGetOrdinal 9))
    let lazysalesvstorewithcontacts = lazy (sales.Readers.vstorewithcontactsReader (reader, buildGetOrdinal 12))
    let lazysalesvstorewithdemographics = lazy (sales.Readers.vstorewithdemographicsReader (reader, buildGetOrdinal 12))
    member __.``ext.arrays`` = lazyextarrays.Value
    member __.``ext.jsonsupport`` = lazyextjsonsupport.Value
    member __.``ext.person`` = lazyextperson.Value
    member __.``hr.d`` = lazyhrd.Value
    member __.``hr.e`` = lazyhre.Value
    member __.``hr.edh`` = lazyhredh.Value
    member __.``hr.eph`` = lazyhreph.Value
    member __.``hr.jc`` = lazyhrjc.Value
    member __.``hr.s`` = lazyhrs.Value
    member __.``humanresources.department`` = lazyhumanresourcesdepartment.Value
    member __.``humanresources.employee`` = lazyhumanresourcesemployee.Value
    member __.``humanresources.employeedepartmenthistory`` = lazyhumanresourcesemployeedepartmenthistory.Value
    member __.``humanresources.employeepayhistory`` = lazyhumanresourcesemployeepayhistory.Value
    member __.``humanresources.jobcandidate`` = lazyhumanresourcesjobcandidate.Value
    member __.``humanresources.shift`` = lazyhumanresourcesshift.Value
    member __.``humanresources.vemployee`` = lazyhumanresourcesvemployee.Value
    member __.``humanresources.vemployeedepartment`` = lazyhumanresourcesvemployeedepartment.Value
    member __.``humanresources.vemployeedepartmenthistory`` = lazyhumanresourcesvemployeedepartmenthistory.Value
    member __.``humanresources.vjobcandidate`` = lazyhumanresourcesvjobcandidate.Value
    member __.``humanresources.vjobcandidateeducation`` = lazyhumanresourcesvjobcandidateeducation.Value
    member __.``humanresources.vjobcandidateemployment`` = lazyhumanresourcesvjobcandidateemployment.Value
    member __.``pe.a`` = lazypea.Value
    member __.``pe.at`` = lazypeat.Value
    member __.``pe.be`` = lazypebe.Value
    member __.``pe.bea`` = lazypebea.Value
    member __.``pe.bec`` = lazypebec.Value
    member __.``pe.cr`` = lazypecr.Value
    member __.``pe.ct`` = lazypect.Value
    member __.``pe.e`` = lazypee.Value
    member __.``pe.p`` = lazypep.Value
    member __.``pe.pa`` = lazypepa.Value
    member __.``pe.pnt`` = lazypepnt.Value
    member __.``pe.pp`` = lazypepp.Value
    member __.``pe.sp`` = lazypesp.Value
    member __.``person.address`` = lazypersonaddress.Value
    member __.``person.addresstype`` = lazypersonaddresstype.Value
    member __.``person.businessentity`` = lazypersonbusinessentity.Value
    member __.``person.businessentityaddress`` = lazypersonbusinessentityaddress.Value
    member __.``person.businessentitycontact`` = lazypersonbusinessentitycontact.Value
    member __.``person.contacttype`` = lazypersoncontacttype.Value
    member __.``person.countryregion`` = lazypersoncountryregion.Value
    member __.``person.emailaddress`` = lazypersonemailaddress.Value
    member __.``person.password`` = lazypersonpassword.Value
    member __.``person.person`` = lazypersonperson.Value
    member __.``person.personphone`` = lazypersonpersonphone.Value
    member __.``person.phonenumbertype`` = lazypersonphonenumbertype.Value
    member __.``person.stateprovince`` = lazypersonstateprovince.Value
    member __.``person.vadditionalcontactinfo`` = lazypersonvadditionalcontactinfo.Value
    member __.``person.vstateprovincecountryregion`` = lazypersonvstateprovincecountryregion.Value
    member __.``pr.bom`` = lazyprbom.Value
    member __.``pr.c`` = lazyprc.Value
    member __.``pr.d`` = lazyprd.Value
    member __.``pr.i`` = lazypri.Value
    member __.``pr.l`` = lazyprl.Value
    member __.``pr.p`` = lazyprp.Value
    member __.``pr.pc`` = lazyprpc.Value
    member __.``pr.pch`` = lazyprpch.Value
    member __.``pr.pd`` = lazyprpd.Value
    member __.``pr.pdoc`` = lazyprpdoc.Value
    member __.``pr.pi`` = lazyprpi.Value
    member __.``pr.plph`` = lazyprplph.Value
    member __.``pr.pm`` = lazyprpm.Value
    member __.``pr.pmi`` = lazyprpmi.Value
    member __.``pr.pmpdc`` = lazyprpmpdc.Value
    member __.``pr.pp`` = lazyprpp.Value
    member __.``pr.ppp`` = lazyprppp.Value
    member __.``pr.pr`` = lazyprpr.Value
    member __.``pr.psc`` = lazyprpsc.Value
    member __.``pr.sr`` = lazyprsr.Value
    member __.``pr.th`` = lazyprth.Value
    member __.``pr.tha`` = lazyprtha.Value
    member __.``pr.um`` = lazyprum.Value
    member __.``pr.w`` = lazyprw.Value
    member __.``pr.wr`` = lazyprwr.Value
    member __.``production.billofmaterials`` = lazyproductionbillofmaterials.Value
    member __.``production.culture`` = lazyproductionculture.Value
    member __.``production.document`` = lazyproductiondocument.Value
    member __.``production.illustration`` = lazyproductionillustration.Value
    member __.``production.location`` = lazyproductionlocation.Value
    member __.``production.product`` = lazyproductionproduct.Value
    member __.``production.productcategory`` = lazyproductionproductcategory.Value
    member __.``production.productcosthistory`` = lazyproductionproductcosthistory.Value
    member __.``production.productdescription`` = lazyproductionproductdescription.Value
    member __.``production.productdocument`` = lazyproductionproductdocument.Value
    member __.``production.productinventory`` = lazyproductionproductinventory.Value
    member __.``production.productlistpricehistory`` = lazyproductionproductlistpricehistory.Value
    member __.``production.productmodel`` = lazyproductionproductmodel.Value
    member __.``production.productmodelillustration`` = lazyproductionproductmodelillustration.Value
    member __.``production.productmodelproductdescriptionculture`` = lazyproductionproductmodelproductdescriptionculture.Value
    member __.``production.productphoto`` = lazyproductionproductphoto.Value
    member __.``production.productproductphoto`` = lazyproductionproductproductphoto.Value
    member __.``production.productreview`` = lazyproductionproductreview.Value
    member __.``production.productsubcategory`` = lazyproductionproductsubcategory.Value
    member __.``production.scrapreason`` = lazyproductionscrapreason.Value
    member __.``production.transactionhistory`` = lazyproductiontransactionhistory.Value
    member __.``production.transactionhistoryarchive`` = lazyproductiontransactionhistoryarchive.Value
    member __.``production.unitmeasure`` = lazyproductionunitmeasure.Value
    member __.``production.vproductanddescription`` = lazyproductionvproductanddescription.Value
    member __.``production.vproductmodelcatalogdescription`` = lazyproductionvproductmodelcatalogdescription.Value
    member __.``production.vproductmodelinstructions`` = lazyproductionvproductmodelinstructions.Value
    member __.``production.workorder`` = lazyproductionworkorder.Value
    member __.``production.workorderrouting`` = lazyproductionworkorderrouting.Value
    member __.``pu.pod`` = lazypupod.Value
    member __.``pu.poh`` = lazypupoh.Value
    member __.``pu.pv`` = lazypupv.Value
    member __.``pu.sm`` = lazypusm.Value
    member __.``pu.v`` = lazypuv.Value
    member __.``purchasing.productvendor`` = lazypurchasingproductvendor.Value
    member __.``purchasing.purchaseorderdetail`` = lazypurchasingpurchaseorderdetail.Value
    member __.``purchasing.purchaseorderheader`` = lazypurchasingpurchaseorderheader.Value
    member __.``purchasing.shipmethod`` = lazypurchasingshipmethod.Value
    member __.``purchasing.vendor`` = lazypurchasingvendor.Value
    member __.``purchasing.vvendorwithaddresses`` = lazypurchasingvvendorwithaddresses.Value
    member __.``purchasing.vvendorwithcontacts`` = lazypurchasingvvendorwithcontacts.Value
    member __.``sa.c`` = lazysac.Value
    member __.``sa.cc`` = lazysacc.Value
    member __.``sa.cr`` = lazysacr.Value
    member __.``sa.crc`` = lazysacrc.Value
    member __.``sa.cu`` = lazysacu.Value
    member __.``sa.pcc`` = lazysapcc.Value
    member __.``sa.s`` = lazysas.Value
    member __.``sa.sci`` = lazysasci.Value
    member __.``sa.so`` = lazysaso.Value
    member __.``sa.sod`` = lazysasod.Value
    member __.``sa.soh`` = lazysasoh.Value
    member __.``sa.sohsr`` = lazysasohsr.Value
    member __.``sa.sop`` = lazysasop.Value
    member __.``sa.sp`` = lazysasp.Value
    member __.``sa.spqh`` = lazysaspqh.Value
    member __.``sa.sr`` = lazysasr.Value
    member __.``sa.st`` = lazysast.Value
    member __.``sa.sth`` = lazysasth.Value
    member __.``sa.tr`` = lazysatr.Value
    member __.``sales.countryregioncurrency`` = lazysalescountryregioncurrency.Value
    member __.``sales.creditcard`` = lazysalescreditcard.Value
    member __.``sales.currency`` = lazysalescurrency.Value
    member __.``sales.currencyrate`` = lazysalescurrencyrate.Value
    member __.``sales.customer`` = lazysalescustomer.Value
    member __.``sales.personcreditcard`` = lazysalespersoncreditcard.Value
    member __.``sales.salesorderdetail`` = lazysalessalesorderdetail.Value
    member __.``sales.salesorderheader`` = lazysalessalesorderheader.Value
    member __.``sales.salesorderheadersalesreason`` = lazysalessalesorderheadersalesreason.Value
    member __.``sales.salesperson`` = lazysalessalesperson.Value
    member __.``sales.salespersonquotahistory`` = lazysalessalespersonquotahistory.Value
    member __.``sales.salesreason`` = lazysalessalesreason.Value
    member __.``sales.salestaxrate`` = lazysalessalestaxrate.Value
    member __.``sales.salesterritory`` = lazysalessalesterritory.Value
    member __.``sales.salesterritoryhistory`` = lazysalessalesterritoryhistory.Value
    member __.``sales.shoppingcartitem`` = lazysalesshoppingcartitem.Value
    member __.``sales.specialoffer`` = lazysalesspecialoffer.Value
    member __.``sales.specialofferproduct`` = lazysalesspecialofferproduct.Value
    member __.``sales.store`` = lazysalesstore.Value
    member __.``sales.vindividualcustomer`` = lazysalesvindividualcustomer.Value
    member __.``sales.vpersondemographics`` = lazysalesvpersondemographics.Value
    member __.``sales.vsalesperson`` = lazysalesvsalesperson.Value
    member __.``sales.vsalespersonsalesbyfiscalyears`` = lazysalesvsalespersonsalesbyfiscalyears.Value
    member __.``sales.vsalespersonsalesbyfiscalyearsdata`` = lazysalesvsalespersonsalesbyfiscalyearsdata.Value
    member __.``sales.vstorewithaddresses`` = lazysalesvstorewithaddresses.Value
    member __.``sales.vstorewithcontacts`` = lazysalesvstorewithcontacts.Value
    member __.``sales.vstorewithdemographics`` = lazysalesvstorewithdemographics.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "ext.arrays", false -> __.``ext.arrays``.Read >> box
        | "ext.arrays", true -> __.``ext.arrays``.ReadIfNotNull >> box
        | "ext.jsonsupport", false -> __.``ext.jsonsupport``.Read >> box
        | "ext.jsonsupport", true -> __.``ext.jsonsupport``.ReadIfNotNull >> box
        | "ext.person", false -> __.``ext.person``.Read >> box
        | "ext.person", true -> __.``ext.person``.ReadIfNotNull >> box
        | "hr.d", false -> __.``hr.d``.Read >> box
        | "hr.d", true -> __.``hr.d``.ReadIfNotNull >> box
        | "hr.e", false -> __.``hr.e``.Read >> box
        | "hr.e", true -> __.``hr.e``.ReadIfNotNull >> box
        | "hr.edh", false -> __.``hr.edh``.Read >> box
        | "hr.edh", true -> __.``hr.edh``.ReadIfNotNull >> box
        | "hr.eph", false -> __.``hr.eph``.Read >> box
        | "hr.eph", true -> __.``hr.eph``.ReadIfNotNull >> box
        | "hr.jc", false -> __.``hr.jc``.Read >> box
        | "hr.jc", true -> __.``hr.jc``.ReadIfNotNull >> box
        | "hr.s", false -> __.``hr.s``.Read >> box
        | "hr.s", true -> __.``hr.s``.ReadIfNotNull >> box
        | "humanresources.department", false -> __.``humanresources.department``.Read >> box
        | "humanresources.department", true -> __.``humanresources.department``.ReadIfNotNull >> box
        | "humanresources.employee", false -> __.``humanresources.employee``.Read >> box
        | "humanresources.employee", true -> __.``humanresources.employee``.ReadIfNotNull >> box
        | "humanresources.employeedepartmenthistory", false -> __.``humanresources.employeedepartmenthistory``.Read >> box
        | "humanresources.employeedepartmenthistory", true -> __.``humanresources.employeedepartmenthistory``.ReadIfNotNull >> box
        | "humanresources.employeepayhistory", false -> __.``humanresources.employeepayhistory``.Read >> box
        | "humanresources.employeepayhistory", true -> __.``humanresources.employeepayhistory``.ReadIfNotNull >> box
        | "humanresources.jobcandidate", false -> __.``humanresources.jobcandidate``.Read >> box
        | "humanresources.jobcandidate", true -> __.``humanresources.jobcandidate``.ReadIfNotNull >> box
        | "humanresources.shift", false -> __.``humanresources.shift``.Read >> box
        | "humanresources.shift", true -> __.``humanresources.shift``.ReadIfNotNull >> box
        | "humanresources.vemployee", false -> __.``humanresources.vemployee``.Read >> box
        | "humanresources.vemployee", true -> __.``humanresources.vemployee``.ReadIfNotNull >> box
        | "humanresources.vemployeedepartment", false -> __.``humanresources.vemployeedepartment``.Read >> box
        | "humanresources.vemployeedepartment", true -> __.``humanresources.vemployeedepartment``.ReadIfNotNull >> box
        | "humanresources.vemployeedepartmenthistory", false -> __.``humanresources.vemployeedepartmenthistory``.Read >> box
        | "humanresources.vemployeedepartmenthistory", true -> __.``humanresources.vemployeedepartmenthistory``.ReadIfNotNull >> box
        | "humanresources.vjobcandidate", false -> __.``humanresources.vjobcandidate``.Read >> box
        | "humanresources.vjobcandidate", true -> __.``humanresources.vjobcandidate``.ReadIfNotNull >> box
        | "humanresources.vjobcandidateeducation", false -> __.``humanresources.vjobcandidateeducation``.Read >> box
        | "humanresources.vjobcandidateeducation", true -> __.``humanresources.vjobcandidateeducation``.ReadIfNotNull >> box
        | "humanresources.vjobcandidateemployment", false -> __.``humanresources.vjobcandidateemployment``.Read >> box
        | "humanresources.vjobcandidateemployment", true -> __.``humanresources.vjobcandidateemployment``.ReadIfNotNull >> box
        | "pe.a", false -> __.``pe.a``.Read >> box
        | "pe.a", true -> __.``pe.a``.ReadIfNotNull >> box
        | "pe.at", false -> __.``pe.at``.Read >> box
        | "pe.at", true -> __.``pe.at``.ReadIfNotNull >> box
        | "pe.be", false -> __.``pe.be``.Read >> box
        | "pe.be", true -> __.``pe.be``.ReadIfNotNull >> box
        | "pe.bea", false -> __.``pe.bea``.Read >> box
        | "pe.bea", true -> __.``pe.bea``.ReadIfNotNull >> box
        | "pe.bec", false -> __.``pe.bec``.Read >> box
        | "pe.bec", true -> __.``pe.bec``.ReadIfNotNull >> box
        | "pe.cr", false -> __.``pe.cr``.Read >> box
        | "pe.cr", true -> __.``pe.cr``.ReadIfNotNull >> box
        | "pe.ct", false -> __.``pe.ct``.Read >> box
        | "pe.ct", true -> __.``pe.ct``.ReadIfNotNull >> box
        | "pe.e", false -> __.``pe.e``.Read >> box
        | "pe.e", true -> __.``pe.e``.ReadIfNotNull >> box
        | "pe.p", false -> __.``pe.p``.Read >> box
        | "pe.p", true -> __.``pe.p``.ReadIfNotNull >> box
        | "pe.pa", false -> __.``pe.pa``.Read >> box
        | "pe.pa", true -> __.``pe.pa``.ReadIfNotNull >> box
        | "pe.pnt", false -> __.``pe.pnt``.Read >> box
        | "pe.pnt", true -> __.``pe.pnt``.ReadIfNotNull >> box
        | "pe.pp", false -> __.``pe.pp``.Read >> box
        | "pe.pp", true -> __.``pe.pp``.ReadIfNotNull >> box
        | "pe.sp", false -> __.``pe.sp``.Read >> box
        | "pe.sp", true -> __.``pe.sp``.ReadIfNotNull >> box
        | "person.address", false -> __.``person.address``.Read >> box
        | "person.address", true -> __.``person.address``.ReadIfNotNull >> box
        | "person.addresstype", false -> __.``person.addresstype``.Read >> box
        | "person.addresstype", true -> __.``person.addresstype``.ReadIfNotNull >> box
        | "person.businessentity", false -> __.``person.businessentity``.Read >> box
        | "person.businessentity", true -> __.``person.businessentity``.ReadIfNotNull >> box
        | "person.businessentityaddress", false -> __.``person.businessentityaddress``.Read >> box
        | "person.businessentityaddress", true -> __.``person.businessentityaddress``.ReadIfNotNull >> box
        | "person.businessentitycontact", false -> __.``person.businessentitycontact``.Read >> box
        | "person.businessentitycontact", true -> __.``person.businessentitycontact``.ReadIfNotNull >> box
        | "person.contacttype", false -> __.``person.contacttype``.Read >> box
        | "person.contacttype", true -> __.``person.contacttype``.ReadIfNotNull >> box
        | "person.countryregion", false -> __.``person.countryregion``.Read >> box
        | "person.countryregion", true -> __.``person.countryregion``.ReadIfNotNull >> box
        | "person.emailaddress", false -> __.``person.emailaddress``.Read >> box
        | "person.emailaddress", true -> __.``person.emailaddress``.ReadIfNotNull >> box
        | "person.password", false -> __.``person.password``.Read >> box
        | "person.password", true -> __.``person.password``.ReadIfNotNull >> box
        | "person.person", false -> __.``person.person``.Read >> box
        | "person.person", true -> __.``person.person``.ReadIfNotNull >> box
        | "person.personphone", false -> __.``person.personphone``.Read >> box
        | "person.personphone", true -> __.``person.personphone``.ReadIfNotNull >> box
        | "person.phonenumbertype", false -> __.``person.phonenumbertype``.Read >> box
        | "person.phonenumbertype", true -> __.``person.phonenumbertype``.ReadIfNotNull >> box
        | "person.stateprovince", false -> __.``person.stateprovince``.Read >> box
        | "person.stateprovince", true -> __.``person.stateprovince``.ReadIfNotNull >> box
        | "person.vadditionalcontactinfo", false -> __.``person.vadditionalcontactinfo``.Read >> box
        | "person.vadditionalcontactinfo", true -> __.``person.vadditionalcontactinfo``.ReadIfNotNull >> box
        | "person.vstateprovincecountryregion", false -> __.``person.vstateprovincecountryregion``.Read >> box
        | "person.vstateprovincecountryregion", true -> __.``person.vstateprovincecountryregion``.ReadIfNotNull >> box
        | "pr.bom", false -> __.``pr.bom``.Read >> box
        | "pr.bom", true -> __.``pr.bom``.ReadIfNotNull >> box
        | "pr.c", false -> __.``pr.c``.Read >> box
        | "pr.c", true -> __.``pr.c``.ReadIfNotNull >> box
        | "pr.d", false -> __.``pr.d``.Read >> box
        | "pr.d", true -> __.``pr.d``.ReadIfNotNull >> box
        | "pr.i", false -> __.``pr.i``.Read >> box
        | "pr.i", true -> __.``pr.i``.ReadIfNotNull >> box
        | "pr.l", false -> __.``pr.l``.Read >> box
        | "pr.l", true -> __.``pr.l``.ReadIfNotNull >> box
        | "pr.p", false -> __.``pr.p``.Read >> box
        | "pr.p", true -> __.``pr.p``.ReadIfNotNull >> box
        | "pr.pc", false -> __.``pr.pc``.Read >> box
        | "pr.pc", true -> __.``pr.pc``.ReadIfNotNull >> box
        | "pr.pch", false -> __.``pr.pch``.Read >> box
        | "pr.pch", true -> __.``pr.pch``.ReadIfNotNull >> box
        | "pr.pd", false -> __.``pr.pd``.Read >> box
        | "pr.pd", true -> __.``pr.pd``.ReadIfNotNull >> box
        | "pr.pdoc", false -> __.``pr.pdoc``.Read >> box
        | "pr.pdoc", true -> __.``pr.pdoc``.ReadIfNotNull >> box
        | "pr.pi", false -> __.``pr.pi``.Read >> box
        | "pr.pi", true -> __.``pr.pi``.ReadIfNotNull >> box
        | "pr.plph", false -> __.``pr.plph``.Read >> box
        | "pr.plph", true -> __.``pr.plph``.ReadIfNotNull >> box
        | "pr.pm", false -> __.``pr.pm``.Read >> box
        | "pr.pm", true -> __.``pr.pm``.ReadIfNotNull >> box
        | "pr.pmi", false -> __.``pr.pmi``.Read >> box
        | "pr.pmi", true -> __.``pr.pmi``.ReadIfNotNull >> box
        | "pr.pmpdc", false -> __.``pr.pmpdc``.Read >> box
        | "pr.pmpdc", true -> __.``pr.pmpdc``.ReadIfNotNull >> box
        | "pr.pp", false -> __.``pr.pp``.Read >> box
        | "pr.pp", true -> __.``pr.pp``.ReadIfNotNull >> box
        | "pr.ppp", false -> __.``pr.ppp``.Read >> box
        | "pr.ppp", true -> __.``pr.ppp``.ReadIfNotNull >> box
        | "pr.pr", false -> __.``pr.pr``.Read >> box
        | "pr.pr", true -> __.``pr.pr``.ReadIfNotNull >> box
        | "pr.psc", false -> __.``pr.psc``.Read >> box
        | "pr.psc", true -> __.``pr.psc``.ReadIfNotNull >> box
        | "pr.sr", false -> __.``pr.sr``.Read >> box
        | "pr.sr", true -> __.``pr.sr``.ReadIfNotNull >> box
        | "pr.th", false -> __.``pr.th``.Read >> box
        | "pr.th", true -> __.``pr.th``.ReadIfNotNull >> box
        | "pr.tha", false -> __.``pr.tha``.Read >> box
        | "pr.tha", true -> __.``pr.tha``.ReadIfNotNull >> box
        | "pr.um", false -> __.``pr.um``.Read >> box
        | "pr.um", true -> __.``pr.um``.ReadIfNotNull >> box
        | "pr.w", false -> __.``pr.w``.Read >> box
        | "pr.w", true -> __.``pr.w``.ReadIfNotNull >> box
        | "pr.wr", false -> __.``pr.wr``.Read >> box
        | "pr.wr", true -> __.``pr.wr``.ReadIfNotNull >> box
        | "production.billofmaterials", false -> __.``production.billofmaterials``.Read >> box
        | "production.billofmaterials", true -> __.``production.billofmaterials``.ReadIfNotNull >> box
        | "production.culture", false -> __.``production.culture``.Read >> box
        | "production.culture", true -> __.``production.culture``.ReadIfNotNull >> box
        | "production.document", false -> __.``production.document``.Read >> box
        | "production.document", true -> __.``production.document``.ReadIfNotNull >> box
        | "production.illustration", false -> __.``production.illustration``.Read >> box
        | "production.illustration", true -> __.``production.illustration``.ReadIfNotNull >> box
        | "production.location", false -> __.``production.location``.Read >> box
        | "production.location", true -> __.``production.location``.ReadIfNotNull >> box
        | "production.product", false -> __.``production.product``.Read >> box
        | "production.product", true -> __.``production.product``.ReadIfNotNull >> box
        | "production.productcategory", false -> __.``production.productcategory``.Read >> box
        | "production.productcategory", true -> __.``production.productcategory``.ReadIfNotNull >> box
        | "production.productcosthistory", false -> __.``production.productcosthistory``.Read >> box
        | "production.productcosthistory", true -> __.``production.productcosthistory``.ReadIfNotNull >> box
        | "production.productdescription", false -> __.``production.productdescription``.Read >> box
        | "production.productdescription", true -> __.``production.productdescription``.ReadIfNotNull >> box
        | "production.productdocument", false -> __.``production.productdocument``.Read >> box
        | "production.productdocument", true -> __.``production.productdocument``.ReadIfNotNull >> box
        | "production.productinventory", false -> __.``production.productinventory``.Read >> box
        | "production.productinventory", true -> __.``production.productinventory``.ReadIfNotNull >> box
        | "production.productlistpricehistory", false -> __.``production.productlistpricehistory``.Read >> box
        | "production.productlistpricehistory", true -> __.``production.productlistpricehistory``.ReadIfNotNull >> box
        | "production.productmodel", false -> __.``production.productmodel``.Read >> box
        | "production.productmodel", true -> __.``production.productmodel``.ReadIfNotNull >> box
        | "production.productmodelillustration", false -> __.``production.productmodelillustration``.Read >> box
        | "production.productmodelillustration", true -> __.``production.productmodelillustration``.ReadIfNotNull >> box
        | "production.productmodelproductdescriptionculture", false -> __.``production.productmodelproductdescriptionculture``.Read >> box
        | "production.productmodelproductdescriptionculture", true -> __.``production.productmodelproductdescriptionculture``.ReadIfNotNull >> box
        | "production.productphoto", false -> __.``production.productphoto``.Read >> box
        | "production.productphoto", true -> __.``production.productphoto``.ReadIfNotNull >> box
        | "production.productproductphoto", false -> __.``production.productproductphoto``.Read >> box
        | "production.productproductphoto", true -> __.``production.productproductphoto``.ReadIfNotNull >> box
        | "production.productreview", false -> __.``production.productreview``.Read >> box
        | "production.productreview", true -> __.``production.productreview``.ReadIfNotNull >> box
        | "production.productsubcategory", false -> __.``production.productsubcategory``.Read >> box
        | "production.productsubcategory", true -> __.``production.productsubcategory``.ReadIfNotNull >> box
        | "production.scrapreason", false -> __.``production.scrapreason``.Read >> box
        | "production.scrapreason", true -> __.``production.scrapreason``.ReadIfNotNull >> box
        | "production.transactionhistory", false -> __.``production.transactionhistory``.Read >> box
        | "production.transactionhistory", true -> __.``production.transactionhistory``.ReadIfNotNull >> box
        | "production.transactionhistoryarchive", false -> __.``production.transactionhistoryarchive``.Read >> box
        | "production.transactionhistoryarchive", true -> __.``production.transactionhistoryarchive``.ReadIfNotNull >> box
        | "production.unitmeasure", false -> __.``production.unitmeasure``.Read >> box
        | "production.unitmeasure", true -> __.``production.unitmeasure``.ReadIfNotNull >> box
        | "production.vproductanddescription", false -> __.``production.vproductanddescription``.Read >> box
        | "production.vproductanddescription", true -> __.``production.vproductanddescription``.ReadIfNotNull >> box
        | "production.vproductmodelcatalogdescription", false -> __.``production.vproductmodelcatalogdescription``.Read >> box
        | "production.vproductmodelcatalogdescription", true -> __.``production.vproductmodelcatalogdescription``.ReadIfNotNull >> box
        | "production.vproductmodelinstructions", false -> __.``production.vproductmodelinstructions``.Read >> box
        | "production.vproductmodelinstructions", true -> __.``production.vproductmodelinstructions``.ReadIfNotNull >> box
        | "production.workorder", false -> __.``production.workorder``.Read >> box
        | "production.workorder", true -> __.``production.workorder``.ReadIfNotNull >> box
        | "production.workorderrouting", false -> __.``production.workorderrouting``.Read >> box
        | "production.workorderrouting", true -> __.``production.workorderrouting``.ReadIfNotNull >> box
        | "pu.pod", false -> __.``pu.pod``.Read >> box
        | "pu.pod", true -> __.``pu.pod``.ReadIfNotNull >> box
        | "pu.poh", false -> __.``pu.poh``.Read >> box
        | "pu.poh", true -> __.``pu.poh``.ReadIfNotNull >> box
        | "pu.pv", false -> __.``pu.pv``.Read >> box
        | "pu.pv", true -> __.``pu.pv``.ReadIfNotNull >> box
        | "pu.sm", false -> __.``pu.sm``.Read >> box
        | "pu.sm", true -> __.``pu.sm``.ReadIfNotNull >> box
        | "pu.v", false -> __.``pu.v``.Read >> box
        | "pu.v", true -> __.``pu.v``.ReadIfNotNull >> box
        | "purchasing.productvendor", false -> __.``purchasing.productvendor``.Read >> box
        | "purchasing.productvendor", true -> __.``purchasing.productvendor``.ReadIfNotNull >> box
        | "purchasing.purchaseorderdetail", false -> __.``purchasing.purchaseorderdetail``.Read >> box
        | "purchasing.purchaseorderdetail", true -> __.``purchasing.purchaseorderdetail``.ReadIfNotNull >> box
        | "purchasing.purchaseorderheader", false -> __.``purchasing.purchaseorderheader``.Read >> box
        | "purchasing.purchaseorderheader", true -> __.``purchasing.purchaseorderheader``.ReadIfNotNull >> box
        | "purchasing.shipmethod", false -> __.``purchasing.shipmethod``.Read >> box
        | "purchasing.shipmethod", true -> __.``purchasing.shipmethod``.ReadIfNotNull >> box
        | "purchasing.vendor", false -> __.``purchasing.vendor``.Read >> box
        | "purchasing.vendor", true -> __.``purchasing.vendor``.ReadIfNotNull >> box
        | "purchasing.vvendorwithaddresses", false -> __.``purchasing.vvendorwithaddresses``.Read >> box
        | "purchasing.vvendorwithaddresses", true -> __.``purchasing.vvendorwithaddresses``.ReadIfNotNull >> box
        | "purchasing.vvendorwithcontacts", false -> __.``purchasing.vvendorwithcontacts``.Read >> box
        | "purchasing.vvendorwithcontacts", true -> __.``purchasing.vvendorwithcontacts``.ReadIfNotNull >> box
        | "sa.c", false -> __.``sa.c``.Read >> box
        | "sa.c", true -> __.``sa.c``.ReadIfNotNull >> box
        | "sa.cc", false -> __.``sa.cc``.Read >> box
        | "sa.cc", true -> __.``sa.cc``.ReadIfNotNull >> box
        | "sa.cr", false -> __.``sa.cr``.Read >> box
        | "sa.cr", true -> __.``sa.cr``.ReadIfNotNull >> box
        | "sa.crc", false -> __.``sa.crc``.Read >> box
        | "sa.crc", true -> __.``sa.crc``.ReadIfNotNull >> box
        | "sa.cu", false -> __.``sa.cu``.Read >> box
        | "sa.cu", true -> __.``sa.cu``.ReadIfNotNull >> box
        | "sa.pcc", false -> __.``sa.pcc``.Read >> box
        | "sa.pcc", true -> __.``sa.pcc``.ReadIfNotNull >> box
        | "sa.s", false -> __.``sa.s``.Read >> box
        | "sa.s", true -> __.``sa.s``.ReadIfNotNull >> box
        | "sa.sci", false -> __.``sa.sci``.Read >> box
        | "sa.sci", true -> __.``sa.sci``.ReadIfNotNull >> box
        | "sa.so", false -> __.``sa.so``.Read >> box
        | "sa.so", true -> __.``sa.so``.ReadIfNotNull >> box
        | "sa.sod", false -> __.``sa.sod``.Read >> box
        | "sa.sod", true -> __.``sa.sod``.ReadIfNotNull >> box
        | "sa.soh", false -> __.``sa.soh``.Read >> box
        | "sa.soh", true -> __.``sa.soh``.ReadIfNotNull >> box
        | "sa.sohsr", false -> __.``sa.sohsr``.Read >> box
        | "sa.sohsr", true -> __.``sa.sohsr``.ReadIfNotNull >> box
        | "sa.sop", false -> __.``sa.sop``.Read >> box
        | "sa.sop", true -> __.``sa.sop``.ReadIfNotNull >> box
        | "sa.sp", false -> __.``sa.sp``.Read >> box
        | "sa.sp", true -> __.``sa.sp``.ReadIfNotNull >> box
        | "sa.spqh", false -> __.``sa.spqh``.Read >> box
        | "sa.spqh", true -> __.``sa.spqh``.ReadIfNotNull >> box
        | "sa.sr", false -> __.``sa.sr``.Read >> box
        | "sa.sr", true -> __.``sa.sr``.ReadIfNotNull >> box
        | "sa.st", false -> __.``sa.st``.Read >> box
        | "sa.st", true -> __.``sa.st``.ReadIfNotNull >> box
        | "sa.sth", false -> __.``sa.sth``.Read >> box
        | "sa.sth", true -> __.``sa.sth``.ReadIfNotNull >> box
        | "sa.tr", false -> __.``sa.tr``.Read >> box
        | "sa.tr", true -> __.``sa.tr``.ReadIfNotNull >> box
        | "sales.countryregioncurrency", false -> __.``sales.countryregioncurrency``.Read >> box
        | "sales.countryregioncurrency", true -> __.``sales.countryregioncurrency``.ReadIfNotNull >> box
        | "sales.creditcard", false -> __.``sales.creditcard``.Read >> box
        | "sales.creditcard", true -> __.``sales.creditcard``.ReadIfNotNull >> box
        | "sales.currency", false -> __.``sales.currency``.Read >> box
        | "sales.currency", true -> __.``sales.currency``.ReadIfNotNull >> box
        | "sales.currencyrate", false -> __.``sales.currencyrate``.Read >> box
        | "sales.currencyrate", true -> __.``sales.currencyrate``.ReadIfNotNull >> box
        | "sales.customer", false -> __.``sales.customer``.Read >> box
        | "sales.customer", true -> __.``sales.customer``.ReadIfNotNull >> box
        | "sales.personcreditcard", false -> __.``sales.personcreditcard``.Read >> box
        | "sales.personcreditcard", true -> __.``sales.personcreditcard``.ReadIfNotNull >> box
        | "sales.salesorderdetail", false -> __.``sales.salesorderdetail``.Read >> box
        | "sales.salesorderdetail", true -> __.``sales.salesorderdetail``.ReadIfNotNull >> box
        | "sales.salesorderheader", false -> __.``sales.salesorderheader``.Read >> box
        | "sales.salesorderheader", true -> __.``sales.salesorderheader``.ReadIfNotNull >> box
        | "sales.salesorderheadersalesreason", false -> __.``sales.salesorderheadersalesreason``.Read >> box
        | "sales.salesorderheadersalesreason", true -> __.``sales.salesorderheadersalesreason``.ReadIfNotNull >> box
        | "sales.salesperson", false -> __.``sales.salesperson``.Read >> box
        | "sales.salesperson", true -> __.``sales.salesperson``.ReadIfNotNull >> box
        | "sales.salespersonquotahistory", false -> __.``sales.salespersonquotahistory``.Read >> box
        | "sales.salespersonquotahistory", true -> __.``sales.salespersonquotahistory``.ReadIfNotNull >> box
        | "sales.salesreason", false -> __.``sales.salesreason``.Read >> box
        | "sales.salesreason", true -> __.``sales.salesreason``.ReadIfNotNull >> box
        | "sales.salestaxrate", false -> __.``sales.salestaxrate``.Read >> box
        | "sales.salestaxrate", true -> __.``sales.salestaxrate``.ReadIfNotNull >> box
        | "sales.salesterritory", false -> __.``sales.salesterritory``.Read >> box
        | "sales.salesterritory", true -> __.``sales.salesterritory``.ReadIfNotNull >> box
        | "sales.salesterritoryhistory", false -> __.``sales.salesterritoryhistory``.Read >> box
        | "sales.salesterritoryhistory", true -> __.``sales.salesterritoryhistory``.ReadIfNotNull >> box
        | "sales.shoppingcartitem", false -> __.``sales.shoppingcartitem``.Read >> box
        | "sales.shoppingcartitem", true -> __.``sales.shoppingcartitem``.ReadIfNotNull >> box
        | "sales.specialoffer", false -> __.``sales.specialoffer``.Read >> box
        | "sales.specialoffer", true -> __.``sales.specialoffer``.ReadIfNotNull >> box
        | "sales.specialofferproduct", false -> __.``sales.specialofferproduct``.Read >> box
        | "sales.specialofferproduct", true -> __.``sales.specialofferproduct``.ReadIfNotNull >> box
        | "sales.store", false -> __.``sales.store``.Read >> box
        | "sales.store", true -> __.``sales.store``.ReadIfNotNull >> box
        | "sales.vindividualcustomer", false -> __.``sales.vindividualcustomer``.Read >> box
        | "sales.vindividualcustomer", true -> __.``sales.vindividualcustomer``.ReadIfNotNull >> box
        | "sales.vpersondemographics", false -> __.``sales.vpersondemographics``.Read >> box
        | "sales.vpersondemographics", true -> __.``sales.vpersondemographics``.ReadIfNotNull >> box
        | "sales.vsalesperson", false -> __.``sales.vsalesperson``.Read >> box
        | "sales.vsalesperson", true -> __.``sales.vsalesperson``.ReadIfNotNull >> box
        | "sales.vsalespersonsalesbyfiscalyears", false -> __.``sales.vsalespersonsalesbyfiscalyears``.Read >> box
        | "sales.vsalespersonsalesbyfiscalyears", true -> __.``sales.vsalespersonsalesbyfiscalyears``.ReadIfNotNull >> box
        | "sales.vsalespersonsalesbyfiscalyearsdata", false -> __.``sales.vsalespersonsalesbyfiscalyearsdata``.Read >> box
        | "sales.vsalespersonsalesbyfiscalyearsdata", true -> __.``sales.vsalespersonsalesbyfiscalyearsdata``.ReadIfNotNull >> box
        | "sales.vstorewithaddresses", false -> __.``sales.vstorewithaddresses``.Read >> box
        | "sales.vstorewithaddresses", true -> __.``sales.vstorewithaddresses``.ReadIfNotNull >> box
        | "sales.vstorewithcontacts", false -> __.``sales.vstorewithcontacts``.Read >> box
        | "sales.vstorewithcontacts", true -> __.``sales.vstorewithcontacts``.ReadIfNotNull >> box
        | "sales.vstorewithdemographics", false -> __.``sales.vstorewithdemographics``.Read >> box
        | "sales.vstorewithdemographics", true -> __.``sales.vstorewithdemographics``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Npgsql.NpgsqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<bool []> then Some(wrap reader.GetFieldValue<bool []>)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<int16 []> then Some(wrap reader.GetFieldValue<int16 []>)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int []> then Some(wrap reader.GetFieldValue<int []>)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int64 []> then Some(wrap reader.GetFieldValue<int64 []>)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<double []> then Some(wrap reader.GetFieldValue<double []>)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<decimal []> then Some(wrap reader.GetFieldValue<decimal []>)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<string []> then Some(wrap reader.GetFieldValue<string []>)
        else if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<System.Guid []> then Some(wrap reader.GetFieldValue<System.Guid []>)
        else if t = typedefof<System.TimeSpan> then Some(wrap reader.GetTimeSpan)
        else if t = typedefof<System.TimeSpan []> then Some(wrap reader.GetFieldValue<System.TimeSpan []>)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.DateOnly []> then Some(wrap reader.GetFieldValue<System.DateOnly []>)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.TimeOnly []> then Some(wrap reader.GetFieldValue<System.TimeOnly []>)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTime []> then Some(wrap reader.GetFieldValue<System.DateTime []>)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTime)
        else if t = typedefof<System.DateTimeOffset []> then Some(wrap reader.GetFieldValue<System.DateTimeOffset []>)
        else if t = typedefof<byte []> then Some(wrap reader.GetFieldValue<byte []>)
        else if t = typedefof<char> then Some(wrap reader.GetChar)
        else if t = typedefof<char []> then Some(wrap reader.GetFieldValue<char []>)
        else if t = typedefof<float> then Some(wrap reader.GetFloat)
        else if t = typedefof<float []> then Some(wrap reader.GetFieldValue<float []>)
        else None

    static member Read(reader: Npgsql.NpgsqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
