module Npgsql.Generation

open Expecto
open SqlHydra
open SqlHydra.Domain
open NUnit.Framework
open VerifyTests
open VerifyExpecto
open SqlHydra.Npgsql

let cfg = 
    {
        ConnectionString = DB.connectionString
        OutputFile = ""
        Namespace = "TestNS"
        IsCLIMutable = true
        ProviderDbTypeAttributes = true
        TableDeclarations = false
        Readers = Some { ReadersConfig.ReaderType = AppInfo.info.DefaultReaderType } 
        Filters = Filters.Empty
    }

let lazySchema = lazy NpgsqlSchemaProvider.getSchema cfg

let getCode cfg =
    lazySchema.Value
    |> SchemaGenerator.generateModule cfg AppInfo.info
    |> SchemaGenerator.toFormattedCode cfg AppInfo.info "---"

let inCode (str: string) cfg = 
    let code = getCode cfg
    Expect.isTrue (code.Contains str) ""

let notInCode (str: string) cfg = 
    let code = getCode cfg
    Expect.isFalse (code.Contains str) ""

[<Test; Ignore "Ignore">]
let ``Print Schema``() =
    let schema = NpgsqlSchemaProvider.getSchema cfg
    printfn "Schema: %A" schema

[<Test; Ignore "Ignore">]
let ``Print Code``() =
    getCode cfg |> printfn "%s"

[<Test>]
let ``Verify Generated Code``() = task {
    let code = getCode cfg
            
    let settings = VerifySettings()
    settings.UseDirectory("./Verify")
    settings.ScrubLines(fun line -> line.StartsWith("// This code was generated by `SqlHydra.Npgsql`"))
    VerifierSettings.OmitContentFromException() // Cleans up FAKE build output
#if NET6_0
    let! result = Verifier.Verify("Verify Generated Code NET6", code, settings)
#endif
#if NET7_0
    let! result = Verifier.Verify("Verify Generated Code NET7", code, settings)
#endif
    //if result.Exception <> null then raise result.Exception
    ()
}

[<Test>]
let ``Code Should Have Reader``() =
    cfg |> inCode "type HydraReader"

[<Test>]
let ``Code Should Not Have Reader``() =
    { cfg with Readers = None } |> notInCode "type HydraReader"

[<Test>]
let ``Code Should Have CLIMutable``() =
    { cfg with IsCLIMutable = true } |> inCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Not Have CLIMutable``() =
    { cfg with IsCLIMutable = false } |> notInCode "[<CLIMutable>]"

[<Test>]
let ``Code Should Have Namespace``() =
    cfg |> inCode "namespace TestNS"

[<Test>]
let ``Should have Tables and PKs``() =
    let schema = lazySchema.Value
    
    let allColumns = 
        schema.Tables 
        |> List.collect (fun t -> t.Columns)

    let pks = allColumns |> List.filter (fun c -> c.IsPK)
    
    Expect.isTrue (schema.Tables.Length > 0) ""

    let numberOfTables =
        schema.Tables
        |> Seq.filter (fun t -> t.Type = TableType.Table)
        |> Seq.length

    Expect.isTrue (pks.Length > numberOfTables) "Expected at least one pk per table"
    Expect.isTrue (pks.Length < allColumns.Length) "Every column should not be a PK"

[<Test>]
let ``Code Should Have ProviderDbTypeAttribute With Json``() =
    cfg |> inCode "[<SqlHydra.ProviderDbType(\"Json\")>]"

[<Test>]
let ``Code Should Have ProviderDbTypeAttribute With Jsonb``() =
    cfg |> inCode "[<SqlHydra.ProviderDbType(\"Jsonb\")>]"

